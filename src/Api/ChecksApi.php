<?php
/**
 * ChecksApi
 * PHP version 5
 *
 * @category Class
 * @package  Gitee
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * Gitee SDK for PHP
 *
 * OpenAPI spec version: 5.4.85
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.42
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Gitee\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Gitee\ApiException;
use Gitee\Configuration;
use Gitee\HeaderSelector;
use Gitee\ObjectSerializer;

/**
 * ChecksApi Class Doc Comment
 *
 * @category Class
 * @package  Gitee
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChecksApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getV5ReposOwnerRepoCheckRunsCheckRunId
     *
     * 获取检查项详情
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $checkRunId 检查项 ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\CheckRun
     */
    public function getV5ReposOwnerRepoCheckRunsCheckRunId($owner, $repo, $checkRunId, $accessToken = null)
    {
        list($response) = $this->getV5ReposOwnerRepoCheckRunsCheckRunIdWithHttpInfo($owner, $repo, $checkRunId, $accessToken);
        return $response;
    }

    /**
     * Operation getV5ReposOwnerRepoCheckRunsCheckRunIdWithHttpInfo
     *
     * 获取检查项详情
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $checkRunId 检查项 ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\CheckRun, HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5ReposOwnerRepoCheckRunsCheckRunIdWithHttpInfo($owner, $repo, $checkRunId, $accessToken = null)
    {
        $returnType = '\Gitee\Model\CheckRun';
        $request = $this->getV5ReposOwnerRepoCheckRunsCheckRunIdRequest($owner, $repo, $checkRunId, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\CheckRun',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5ReposOwnerRepoCheckRunsCheckRunIdAsync
     *
     * 获取检查项详情
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $checkRunId 检查项 ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoCheckRunsCheckRunIdAsync($owner, $repo, $checkRunId, $accessToken = null)
    {
        return $this->getV5ReposOwnerRepoCheckRunsCheckRunIdAsyncWithHttpInfo($owner, $repo, $checkRunId, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5ReposOwnerRepoCheckRunsCheckRunIdAsyncWithHttpInfo
     *
     * 获取检查项详情
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $checkRunId 检查项 ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoCheckRunsCheckRunIdAsyncWithHttpInfo($owner, $repo, $checkRunId, $accessToken = null)
    {
        $returnType = '\Gitee\Model\CheckRun';
        $request = $this->getV5ReposOwnerRepoCheckRunsCheckRunIdRequest($owner, $repo, $checkRunId, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5ReposOwnerRepoCheckRunsCheckRunId'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $checkRunId 检查项 ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5ReposOwnerRepoCheckRunsCheckRunIdRequest($owner, $repo, $checkRunId, $accessToken = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling getV5ReposOwnerRepoCheckRunsCheckRunId'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling getV5ReposOwnerRepoCheckRunsCheckRunId'
            );
        }
        // verify the required parameter 'checkRunId' is set
        if ($checkRunId === null || (is_array($checkRunId) && count($checkRunId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkRunId when calling getV5ReposOwnerRepoCheckRunsCheckRunId'
            );
        }

        $resourcePath = '/v5/repos/{owner}/{repo}/check-runs/{check_run_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($checkRunId !== null) {
            $resourcePath = str_replace(
                '{' . 'check_run_id' . '}',
                ObjectSerializer::toPathValue($checkRunId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5ReposOwnerRepoCheckRunsCheckRunIdAnnotations
     *
     * 获取检查项代码注释
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $checkRunId 检查项 ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\CheckAnnotation
     */
    public function getV5ReposOwnerRepoCheckRunsCheckRunIdAnnotations($owner, $repo, $checkRunId, $accessToken = null, $page = '1', $perPage = '20')
    {
        list($response) = $this->getV5ReposOwnerRepoCheckRunsCheckRunIdAnnotationsWithHttpInfo($owner, $repo, $checkRunId, $accessToken, $page, $perPage);
        return $response;
    }

    /**
     * Operation getV5ReposOwnerRepoCheckRunsCheckRunIdAnnotationsWithHttpInfo
     *
     * 获取检查项代码注释
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $checkRunId 检查项 ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\CheckAnnotation, HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5ReposOwnerRepoCheckRunsCheckRunIdAnnotationsWithHttpInfo($owner, $repo, $checkRunId, $accessToken = null, $page = '1', $perPage = '20')
    {
        $returnType = '\Gitee\Model\CheckAnnotation';
        $request = $this->getV5ReposOwnerRepoCheckRunsCheckRunIdAnnotationsRequest($owner, $repo, $checkRunId, $accessToken, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\CheckAnnotation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5ReposOwnerRepoCheckRunsCheckRunIdAnnotationsAsync
     *
     * 获取检查项代码注释
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $checkRunId 检查项 ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoCheckRunsCheckRunIdAnnotationsAsync($owner, $repo, $checkRunId, $accessToken = null, $page = '1', $perPage = '20')
    {
        return $this->getV5ReposOwnerRepoCheckRunsCheckRunIdAnnotationsAsyncWithHttpInfo($owner, $repo, $checkRunId, $accessToken, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5ReposOwnerRepoCheckRunsCheckRunIdAnnotationsAsyncWithHttpInfo
     *
     * 获取检查项代码注释
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $checkRunId 检查项 ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoCheckRunsCheckRunIdAnnotationsAsyncWithHttpInfo($owner, $repo, $checkRunId, $accessToken = null, $page = '1', $perPage = '20')
    {
        $returnType = '\Gitee\Model\CheckAnnotation';
        $request = $this->getV5ReposOwnerRepoCheckRunsCheckRunIdAnnotationsRequest($owner, $repo, $checkRunId, $accessToken, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5ReposOwnerRepoCheckRunsCheckRunIdAnnotations'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $checkRunId 检查项 ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5ReposOwnerRepoCheckRunsCheckRunIdAnnotationsRequest($owner, $repo, $checkRunId, $accessToken = null, $page = '1', $perPage = '20')
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling getV5ReposOwnerRepoCheckRunsCheckRunIdAnnotations'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling getV5ReposOwnerRepoCheckRunsCheckRunIdAnnotations'
            );
        }
        // verify the required parameter 'checkRunId' is set
        if ($checkRunId === null || (is_array($checkRunId) && count($checkRunId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkRunId when calling getV5ReposOwnerRepoCheckRunsCheckRunIdAnnotations'
            );
        }
        if ($perPage !== null && $perPage > 100) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling ChecksApi.getV5ReposOwnerRepoCheckRunsCheckRunIdAnnotations, must be smaller than or equal to 100.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling ChecksApi.getV5ReposOwnerRepoCheckRunsCheckRunIdAnnotations, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v5/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($checkRunId !== null) {
            $resourcePath = str_replace(
                '{' . 'check_run_id' . '}',
                ObjectSerializer::toPathValue($checkRunId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5ReposOwnerRepoCommitsRefCheckRuns
     *
     * 获取某个提交的检查项
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $ref 分支名\\标签名\\sha 值 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  int $pullRequestId 关联 pull request 的 ID (optional, default to 0)
     * @param  string $checkName 检查项名称 (optional)
     * @param  string $status 检查项状态 (optional)
     * @param  string $filter 最新的\\全部 (optional, default to latest)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\CheckRun
     */
    public function getV5ReposOwnerRepoCommitsRefCheckRuns($owner, $repo, $ref, $accessToken = null, $page = '1', $perPage = '20', $pullRequestId = '0', $checkName = null, $status = null, $filter = 'latest')
    {
        list($response) = $this->getV5ReposOwnerRepoCommitsRefCheckRunsWithHttpInfo($owner, $repo, $ref, $accessToken, $page, $perPage, $pullRequestId, $checkName, $status, $filter);
        return $response;
    }

    /**
     * Operation getV5ReposOwnerRepoCommitsRefCheckRunsWithHttpInfo
     *
     * 获取某个提交的检查项
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $ref 分支名\\标签名\\sha 值 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  int $pullRequestId 关联 pull request 的 ID (optional, default to 0)
     * @param  string $checkName 检查项名称 (optional)
     * @param  string $status 检查项状态 (optional)
     * @param  string $filter 最新的\\全部 (optional, default to latest)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\CheckRun, HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5ReposOwnerRepoCommitsRefCheckRunsWithHttpInfo($owner, $repo, $ref, $accessToken = null, $page = '1', $perPage = '20', $pullRequestId = '0', $checkName = null, $status = null, $filter = 'latest')
    {
        $returnType = '\Gitee\Model\CheckRun';
        $request = $this->getV5ReposOwnerRepoCommitsRefCheckRunsRequest($owner, $repo, $ref, $accessToken, $page, $perPage, $pullRequestId, $checkName, $status, $filter);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\CheckRun',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5ReposOwnerRepoCommitsRefCheckRunsAsync
     *
     * 获取某个提交的检查项
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $ref 分支名\\标签名\\sha 值 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  int $pullRequestId 关联 pull request 的 ID (optional, default to 0)
     * @param  string $checkName 检查项名称 (optional)
     * @param  string $status 检查项状态 (optional)
     * @param  string $filter 最新的\\全部 (optional, default to latest)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoCommitsRefCheckRunsAsync($owner, $repo, $ref, $accessToken = null, $page = '1', $perPage = '20', $pullRequestId = '0', $checkName = null, $status = null, $filter = 'latest')
    {
        return $this->getV5ReposOwnerRepoCommitsRefCheckRunsAsyncWithHttpInfo($owner, $repo, $ref, $accessToken, $page, $perPage, $pullRequestId, $checkName, $status, $filter)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5ReposOwnerRepoCommitsRefCheckRunsAsyncWithHttpInfo
     *
     * 获取某个提交的检查项
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $ref 分支名\\标签名\\sha 值 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  int $pullRequestId 关联 pull request 的 ID (optional, default to 0)
     * @param  string $checkName 检查项名称 (optional)
     * @param  string $status 检查项状态 (optional)
     * @param  string $filter 最新的\\全部 (optional, default to latest)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoCommitsRefCheckRunsAsyncWithHttpInfo($owner, $repo, $ref, $accessToken = null, $page = '1', $perPage = '20', $pullRequestId = '0', $checkName = null, $status = null, $filter = 'latest')
    {
        $returnType = '\Gitee\Model\CheckRun';
        $request = $this->getV5ReposOwnerRepoCommitsRefCheckRunsRequest($owner, $repo, $ref, $accessToken, $page, $perPage, $pullRequestId, $checkName, $status, $filter);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5ReposOwnerRepoCommitsRefCheckRuns'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $ref 分支名\\标签名\\sha 值 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  int $pullRequestId 关联 pull request 的 ID (optional, default to 0)
     * @param  string $checkName 检查项名称 (optional)
     * @param  string $status 检查项状态 (optional)
     * @param  string $filter 最新的\\全部 (optional, default to latest)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5ReposOwnerRepoCommitsRefCheckRunsRequest($owner, $repo, $ref, $accessToken = null, $page = '1', $perPage = '20', $pullRequestId = '0', $checkName = null, $status = null, $filter = 'latest')
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling getV5ReposOwnerRepoCommitsRefCheckRuns'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling getV5ReposOwnerRepoCommitsRefCheckRuns'
            );
        }
        // verify the required parameter 'ref' is set
        if ($ref === null || (is_array($ref) && count($ref) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ref when calling getV5ReposOwnerRepoCommitsRefCheckRuns'
            );
        }
        if ($perPage !== null && $perPage > 100) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling ChecksApi.getV5ReposOwnerRepoCommitsRefCheckRuns, must be smaller than or equal to 100.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling ChecksApi.getV5ReposOwnerRepoCommitsRefCheckRuns, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v5/repos/{owner}/{repo}/commits/{ref}/check-runs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }
        // query params
        if ($pullRequestId !== null) {
            $queryParams['pull_request_id'] = ObjectSerializer::toQueryValue($pullRequestId);
        }
        // query params
        if ($checkName !== null) {
            $queryParams['check_name'] = ObjectSerializer::toQueryValue($checkName);
        }
        // query params
        if ($status !== null) {
            $queryParams['status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }

        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($ref !== null) {
            $resourcePath = str_replace(
                '{' . 'ref' . '}',
                ObjectSerializer::toPathValue($ref),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchV5ReposOwnerRepoCheckRunsCheckRunId
     *
     * 更新检查项
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $outputTitle 标题 (required)
     * @param  string $outputSummary 概论 (required)
     * @param  string[] $outputAnnotationsPath 路径 (required)
     * @param  int[] $outputAnnotationsStartLine 开始行 (required)
     * @param  int[] $outputAnnotationsEndLine 结束行 (required)
     * @param  string[] $outputAnnotationsAnnotationLevel 注释级别 (required)
     * @param  string[] $outputAnnotationsMessage 注释信息 (required)
     * @param  string[] $outputImagesAlt 注释 (required)
     * @param  string[] $outputImagesImageUrl URL (required)
     * @param  string[] $actionsLabel 文本 (required)
     * @param  string[] $actionsDescription 描述 (required)
     * @param  string[] $actionsIdentifier 标识 (required)
     * @param  int $checkRunId 检查项 ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $pullRequestId 关联 pull_request 的 ID (optional)
     * @param  string $detailsUrl 详情链接 (optional)
     * @param  string $status 状态 (optional, default to queued)
     * @param  \DateTime $startedAt 开始时间 (optional)
     * @param  string $conclusion 结论 (optional)
     * @param  \DateTime $completedAt 完成时间 (optional)
     * @param  string $outputText 详细信息 (optional)
     * @param  int[] $outputAnnotationsStartColumn 开始列 (optional)
     * @param  int[] $outputAnnotationsEndColumn 结束列 (optional)
     * @param  string[] $outputAnnotationsTitle 标题 (optional)
     * @param  string[] $outputAnnotationsRawDetails 详情内容 (optional)
     * @param  string[] $outputImagesCaption 描述 (optional)
     * @param  string $name 名字 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\CheckRun
     */
    public function patchV5ReposOwnerRepoCheckRunsCheckRunId($owner, $repo, $outputTitle, $outputSummary, $outputAnnotationsPath, $outputAnnotationsStartLine, $outputAnnotationsEndLine, $outputAnnotationsAnnotationLevel, $outputAnnotationsMessage, $outputImagesAlt, $outputImagesImageUrl, $actionsLabel, $actionsDescription, $actionsIdentifier, $checkRunId, $accessToken = null, $pullRequestId = null, $detailsUrl = null, $status = 'queued', $startedAt = null, $conclusion = null, $completedAt = null, $outputText = null, $outputAnnotationsStartColumn = null, $outputAnnotationsEndColumn = null, $outputAnnotationsTitle = null, $outputAnnotationsRawDetails = null, $outputImagesCaption = null, $name = null)
    {
        list($response) = $this->patchV5ReposOwnerRepoCheckRunsCheckRunIdWithHttpInfo($owner, $repo, $outputTitle, $outputSummary, $outputAnnotationsPath, $outputAnnotationsStartLine, $outputAnnotationsEndLine, $outputAnnotationsAnnotationLevel, $outputAnnotationsMessage, $outputImagesAlt, $outputImagesImageUrl, $actionsLabel, $actionsDescription, $actionsIdentifier, $checkRunId, $accessToken, $pullRequestId, $detailsUrl, $status, $startedAt, $conclusion, $completedAt, $outputText, $outputAnnotationsStartColumn, $outputAnnotationsEndColumn, $outputAnnotationsTitle, $outputAnnotationsRawDetails, $outputImagesCaption, $name);
        return $response;
    }

    /**
     * Operation patchV5ReposOwnerRepoCheckRunsCheckRunIdWithHttpInfo
     *
     * 更新检查项
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $outputTitle 标题 (required)
     * @param  string $outputSummary 概论 (required)
     * @param  string[] $outputAnnotationsPath 路径 (required)
     * @param  int[] $outputAnnotationsStartLine 开始行 (required)
     * @param  int[] $outputAnnotationsEndLine 结束行 (required)
     * @param  string[] $outputAnnotationsAnnotationLevel 注释级别 (required)
     * @param  string[] $outputAnnotationsMessage 注释信息 (required)
     * @param  string[] $outputImagesAlt 注释 (required)
     * @param  string[] $outputImagesImageUrl URL (required)
     * @param  string[] $actionsLabel 文本 (required)
     * @param  string[] $actionsDescription 描述 (required)
     * @param  string[] $actionsIdentifier 标识 (required)
     * @param  int $checkRunId 检查项 ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $pullRequestId 关联 pull_request 的 ID (optional)
     * @param  string $detailsUrl 详情链接 (optional)
     * @param  string $status 状态 (optional, default to queued)
     * @param  \DateTime $startedAt 开始时间 (optional)
     * @param  string $conclusion 结论 (optional)
     * @param  \DateTime $completedAt 完成时间 (optional)
     * @param  string $outputText 详细信息 (optional)
     * @param  int[] $outputAnnotationsStartColumn 开始列 (optional)
     * @param  int[] $outputAnnotationsEndColumn 结束列 (optional)
     * @param  string[] $outputAnnotationsTitle 标题 (optional)
     * @param  string[] $outputAnnotationsRawDetails 详情内容 (optional)
     * @param  string[] $outputImagesCaption 描述 (optional)
     * @param  string $name 名字 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\CheckRun, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchV5ReposOwnerRepoCheckRunsCheckRunIdWithHttpInfo($owner, $repo, $outputTitle, $outputSummary, $outputAnnotationsPath, $outputAnnotationsStartLine, $outputAnnotationsEndLine, $outputAnnotationsAnnotationLevel, $outputAnnotationsMessage, $outputImagesAlt, $outputImagesImageUrl, $actionsLabel, $actionsDescription, $actionsIdentifier, $checkRunId, $accessToken = null, $pullRequestId = null, $detailsUrl = null, $status = 'queued', $startedAt = null, $conclusion = null, $completedAt = null, $outputText = null, $outputAnnotationsStartColumn = null, $outputAnnotationsEndColumn = null, $outputAnnotationsTitle = null, $outputAnnotationsRawDetails = null, $outputImagesCaption = null, $name = null)
    {
        $returnType = '\Gitee\Model\CheckRun';
        $request = $this->patchV5ReposOwnerRepoCheckRunsCheckRunIdRequest($owner, $repo, $outputTitle, $outputSummary, $outputAnnotationsPath, $outputAnnotationsStartLine, $outputAnnotationsEndLine, $outputAnnotationsAnnotationLevel, $outputAnnotationsMessage, $outputImagesAlt, $outputImagesImageUrl, $actionsLabel, $actionsDescription, $actionsIdentifier, $checkRunId, $accessToken, $pullRequestId, $detailsUrl, $status, $startedAt, $conclusion, $completedAt, $outputText, $outputAnnotationsStartColumn, $outputAnnotationsEndColumn, $outputAnnotationsTitle, $outputAnnotationsRawDetails, $outputImagesCaption, $name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\CheckRun',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchV5ReposOwnerRepoCheckRunsCheckRunIdAsync
     *
     * 更新检查项
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $outputTitle 标题 (required)
     * @param  string $outputSummary 概论 (required)
     * @param  string[] $outputAnnotationsPath 路径 (required)
     * @param  int[] $outputAnnotationsStartLine 开始行 (required)
     * @param  int[] $outputAnnotationsEndLine 结束行 (required)
     * @param  string[] $outputAnnotationsAnnotationLevel 注释级别 (required)
     * @param  string[] $outputAnnotationsMessage 注释信息 (required)
     * @param  string[] $outputImagesAlt 注释 (required)
     * @param  string[] $outputImagesImageUrl URL (required)
     * @param  string[] $actionsLabel 文本 (required)
     * @param  string[] $actionsDescription 描述 (required)
     * @param  string[] $actionsIdentifier 标识 (required)
     * @param  int $checkRunId 检查项 ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $pullRequestId 关联 pull_request 的 ID (optional)
     * @param  string $detailsUrl 详情链接 (optional)
     * @param  string $status 状态 (optional, default to queued)
     * @param  \DateTime $startedAt 开始时间 (optional)
     * @param  string $conclusion 结论 (optional)
     * @param  \DateTime $completedAt 完成时间 (optional)
     * @param  string $outputText 详细信息 (optional)
     * @param  int[] $outputAnnotationsStartColumn 开始列 (optional)
     * @param  int[] $outputAnnotationsEndColumn 结束列 (optional)
     * @param  string[] $outputAnnotationsTitle 标题 (optional)
     * @param  string[] $outputAnnotationsRawDetails 详情内容 (optional)
     * @param  string[] $outputImagesCaption 描述 (optional)
     * @param  string $name 名字 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchV5ReposOwnerRepoCheckRunsCheckRunIdAsync($owner, $repo, $outputTitle, $outputSummary, $outputAnnotationsPath, $outputAnnotationsStartLine, $outputAnnotationsEndLine, $outputAnnotationsAnnotationLevel, $outputAnnotationsMessage, $outputImagesAlt, $outputImagesImageUrl, $actionsLabel, $actionsDescription, $actionsIdentifier, $checkRunId, $accessToken = null, $pullRequestId = null, $detailsUrl = null, $status = 'queued', $startedAt = null, $conclusion = null, $completedAt = null, $outputText = null, $outputAnnotationsStartColumn = null, $outputAnnotationsEndColumn = null, $outputAnnotationsTitle = null, $outputAnnotationsRawDetails = null, $outputImagesCaption = null, $name = null)
    {
        return $this->patchV5ReposOwnerRepoCheckRunsCheckRunIdAsyncWithHttpInfo($owner, $repo, $outputTitle, $outputSummary, $outputAnnotationsPath, $outputAnnotationsStartLine, $outputAnnotationsEndLine, $outputAnnotationsAnnotationLevel, $outputAnnotationsMessage, $outputImagesAlt, $outputImagesImageUrl, $actionsLabel, $actionsDescription, $actionsIdentifier, $checkRunId, $accessToken, $pullRequestId, $detailsUrl, $status, $startedAt, $conclusion, $completedAt, $outputText, $outputAnnotationsStartColumn, $outputAnnotationsEndColumn, $outputAnnotationsTitle, $outputAnnotationsRawDetails, $outputImagesCaption, $name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchV5ReposOwnerRepoCheckRunsCheckRunIdAsyncWithHttpInfo
     *
     * 更新检查项
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $outputTitle 标题 (required)
     * @param  string $outputSummary 概论 (required)
     * @param  string[] $outputAnnotationsPath 路径 (required)
     * @param  int[] $outputAnnotationsStartLine 开始行 (required)
     * @param  int[] $outputAnnotationsEndLine 结束行 (required)
     * @param  string[] $outputAnnotationsAnnotationLevel 注释级别 (required)
     * @param  string[] $outputAnnotationsMessage 注释信息 (required)
     * @param  string[] $outputImagesAlt 注释 (required)
     * @param  string[] $outputImagesImageUrl URL (required)
     * @param  string[] $actionsLabel 文本 (required)
     * @param  string[] $actionsDescription 描述 (required)
     * @param  string[] $actionsIdentifier 标识 (required)
     * @param  int $checkRunId 检查项 ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $pullRequestId 关联 pull_request 的 ID (optional)
     * @param  string $detailsUrl 详情链接 (optional)
     * @param  string $status 状态 (optional, default to queued)
     * @param  \DateTime $startedAt 开始时间 (optional)
     * @param  string $conclusion 结论 (optional)
     * @param  \DateTime $completedAt 完成时间 (optional)
     * @param  string $outputText 详细信息 (optional)
     * @param  int[] $outputAnnotationsStartColumn 开始列 (optional)
     * @param  int[] $outputAnnotationsEndColumn 结束列 (optional)
     * @param  string[] $outputAnnotationsTitle 标题 (optional)
     * @param  string[] $outputAnnotationsRawDetails 详情内容 (optional)
     * @param  string[] $outputImagesCaption 描述 (optional)
     * @param  string $name 名字 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchV5ReposOwnerRepoCheckRunsCheckRunIdAsyncWithHttpInfo($owner, $repo, $outputTitle, $outputSummary, $outputAnnotationsPath, $outputAnnotationsStartLine, $outputAnnotationsEndLine, $outputAnnotationsAnnotationLevel, $outputAnnotationsMessage, $outputImagesAlt, $outputImagesImageUrl, $actionsLabel, $actionsDescription, $actionsIdentifier, $checkRunId, $accessToken = null, $pullRequestId = null, $detailsUrl = null, $status = 'queued', $startedAt = null, $conclusion = null, $completedAt = null, $outputText = null, $outputAnnotationsStartColumn = null, $outputAnnotationsEndColumn = null, $outputAnnotationsTitle = null, $outputAnnotationsRawDetails = null, $outputImagesCaption = null, $name = null)
    {
        $returnType = '\Gitee\Model\CheckRun';
        $request = $this->patchV5ReposOwnerRepoCheckRunsCheckRunIdRequest($owner, $repo, $outputTitle, $outputSummary, $outputAnnotationsPath, $outputAnnotationsStartLine, $outputAnnotationsEndLine, $outputAnnotationsAnnotationLevel, $outputAnnotationsMessage, $outputImagesAlt, $outputImagesImageUrl, $actionsLabel, $actionsDescription, $actionsIdentifier, $checkRunId, $accessToken, $pullRequestId, $detailsUrl, $status, $startedAt, $conclusion, $completedAt, $outputText, $outputAnnotationsStartColumn, $outputAnnotationsEndColumn, $outputAnnotationsTitle, $outputAnnotationsRawDetails, $outputImagesCaption, $name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchV5ReposOwnerRepoCheckRunsCheckRunId'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $outputTitle 标题 (required)
     * @param  string $outputSummary 概论 (required)
     * @param  string[] $outputAnnotationsPath 路径 (required)
     * @param  int[] $outputAnnotationsStartLine 开始行 (required)
     * @param  int[] $outputAnnotationsEndLine 结束行 (required)
     * @param  string[] $outputAnnotationsAnnotationLevel 注释级别 (required)
     * @param  string[] $outputAnnotationsMessage 注释信息 (required)
     * @param  string[] $outputImagesAlt 注释 (required)
     * @param  string[] $outputImagesImageUrl URL (required)
     * @param  string[] $actionsLabel 文本 (required)
     * @param  string[] $actionsDescription 描述 (required)
     * @param  string[] $actionsIdentifier 标识 (required)
     * @param  int $checkRunId 检查项 ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $pullRequestId 关联 pull_request 的 ID (optional)
     * @param  string $detailsUrl 详情链接 (optional)
     * @param  string $status 状态 (optional, default to queued)
     * @param  \DateTime $startedAt 开始时间 (optional)
     * @param  string $conclusion 结论 (optional)
     * @param  \DateTime $completedAt 完成时间 (optional)
     * @param  string $outputText 详细信息 (optional)
     * @param  int[] $outputAnnotationsStartColumn 开始列 (optional)
     * @param  int[] $outputAnnotationsEndColumn 结束列 (optional)
     * @param  string[] $outputAnnotationsTitle 标题 (optional)
     * @param  string[] $outputAnnotationsRawDetails 详情内容 (optional)
     * @param  string[] $outputImagesCaption 描述 (optional)
     * @param  string $name 名字 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function patchV5ReposOwnerRepoCheckRunsCheckRunIdRequest($owner, $repo, $outputTitle, $outputSummary, $outputAnnotationsPath, $outputAnnotationsStartLine, $outputAnnotationsEndLine, $outputAnnotationsAnnotationLevel, $outputAnnotationsMessage, $outputImagesAlt, $outputImagesImageUrl, $actionsLabel, $actionsDescription, $actionsIdentifier, $checkRunId, $accessToken = null, $pullRequestId = null, $detailsUrl = null, $status = 'queued', $startedAt = null, $conclusion = null, $completedAt = null, $outputText = null, $outputAnnotationsStartColumn = null, $outputAnnotationsEndColumn = null, $outputAnnotationsTitle = null, $outputAnnotationsRawDetails = null, $outputImagesCaption = null, $name = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling patchV5ReposOwnerRepoCheckRunsCheckRunId'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling patchV5ReposOwnerRepoCheckRunsCheckRunId'
            );
        }
        // verify the required parameter 'outputTitle' is set
        if ($outputTitle === null || (is_array($outputTitle) && count($outputTitle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $outputTitle when calling patchV5ReposOwnerRepoCheckRunsCheckRunId'
            );
        }
        // verify the required parameter 'outputSummary' is set
        if ($outputSummary === null || (is_array($outputSummary) && count($outputSummary) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $outputSummary when calling patchV5ReposOwnerRepoCheckRunsCheckRunId'
            );
        }
        // verify the required parameter 'outputAnnotationsPath' is set
        if ($outputAnnotationsPath === null || (is_array($outputAnnotationsPath) && count($outputAnnotationsPath) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $outputAnnotationsPath when calling patchV5ReposOwnerRepoCheckRunsCheckRunId'
            );
        }
        // verify the required parameter 'outputAnnotationsStartLine' is set
        if ($outputAnnotationsStartLine === null || (is_array($outputAnnotationsStartLine) && count($outputAnnotationsStartLine) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $outputAnnotationsStartLine when calling patchV5ReposOwnerRepoCheckRunsCheckRunId'
            );
        }
        // verify the required parameter 'outputAnnotationsEndLine' is set
        if ($outputAnnotationsEndLine === null || (is_array($outputAnnotationsEndLine) && count($outputAnnotationsEndLine) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $outputAnnotationsEndLine when calling patchV5ReposOwnerRepoCheckRunsCheckRunId'
            );
        }
        // verify the required parameter 'outputAnnotationsAnnotationLevel' is set
        if ($outputAnnotationsAnnotationLevel === null || (is_array($outputAnnotationsAnnotationLevel) && count($outputAnnotationsAnnotationLevel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $outputAnnotationsAnnotationLevel when calling patchV5ReposOwnerRepoCheckRunsCheckRunId'
            );
        }
        // verify the required parameter 'outputAnnotationsMessage' is set
        if ($outputAnnotationsMessage === null || (is_array($outputAnnotationsMessage) && count($outputAnnotationsMessage) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $outputAnnotationsMessage when calling patchV5ReposOwnerRepoCheckRunsCheckRunId'
            );
        }
        // verify the required parameter 'outputImagesAlt' is set
        if ($outputImagesAlt === null || (is_array($outputImagesAlt) && count($outputImagesAlt) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $outputImagesAlt when calling patchV5ReposOwnerRepoCheckRunsCheckRunId'
            );
        }
        // verify the required parameter 'outputImagesImageUrl' is set
        if ($outputImagesImageUrl === null || (is_array($outputImagesImageUrl) && count($outputImagesImageUrl) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $outputImagesImageUrl when calling patchV5ReposOwnerRepoCheckRunsCheckRunId'
            );
        }
        // verify the required parameter 'actionsLabel' is set
        if ($actionsLabel === null || (is_array($actionsLabel) && count($actionsLabel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actionsLabel when calling patchV5ReposOwnerRepoCheckRunsCheckRunId'
            );
        }
        // verify the required parameter 'actionsDescription' is set
        if ($actionsDescription === null || (is_array($actionsDescription) && count($actionsDescription) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actionsDescription when calling patchV5ReposOwnerRepoCheckRunsCheckRunId'
            );
        }
        // verify the required parameter 'actionsIdentifier' is set
        if ($actionsIdentifier === null || (is_array($actionsIdentifier) && count($actionsIdentifier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actionsIdentifier when calling patchV5ReposOwnerRepoCheckRunsCheckRunId'
            );
        }
        // verify the required parameter 'checkRunId' is set
        if ($checkRunId === null || (is_array($checkRunId) && count($checkRunId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkRunId when calling patchV5ReposOwnerRepoCheckRunsCheckRunId'
            );
        }

        $resourcePath = '/v5/repos/{owner}/{repo}/check-runs/{check_run_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($checkRunId !== null) {
            $resourcePath = str_replace(
                '{' . 'check_run_id' . '}',
                ObjectSerializer::toPathValue($checkRunId),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($pullRequestId !== null) {
            $formParams['pull_request_id'] = ObjectSerializer::toFormValue($pullRequestId);
        }
        // form params
        if ($detailsUrl !== null) {
            $formParams['details_url'] = ObjectSerializer::toFormValue($detailsUrl);
        }
        // form params
        if ($status !== null) {
            $formParams['status'] = ObjectSerializer::toFormValue($status);
        }
        // form params
        if ($startedAt !== null) {
            $formParams['started_at'] = ObjectSerializer::toFormValue($startedAt);
        }
        // form params
        if ($conclusion !== null) {
            $formParams['conclusion'] = ObjectSerializer::toFormValue($conclusion);
        }
        // form params
        if ($completedAt !== null) {
            $formParams['completed_at'] = ObjectSerializer::toFormValue($completedAt);
        }
        // form params
        if ($outputTitle !== null) {
            $formParams['output[title]'] = ObjectSerializer::toFormValue($outputTitle);
        }
        // form params
        if ($outputSummary !== null) {
            $formParams['output[summary]'] = ObjectSerializer::toFormValue($outputSummary);
        }
        // form params
        if ($outputText !== null) {
            $formParams['output[text]'] = ObjectSerializer::toFormValue($outputText);
        }
        // form params
        if ($outputAnnotationsPath !== null) {
            $formParams['output[annotations][path]'] = ObjectSerializer::toFormValue($outputAnnotationsPath);
        }
        // form params
        if ($outputAnnotationsStartLine !== null) {
            $formParams['output[annotations][start_line]'] = ObjectSerializer::toFormValue($outputAnnotationsStartLine);
        }
        // form params
        if ($outputAnnotationsEndLine !== null) {
            $formParams['output[annotations][end_line]'] = ObjectSerializer::toFormValue($outputAnnotationsEndLine);
        }
        // form params
        if ($outputAnnotationsStartColumn !== null) {
            $formParams['output[annotations][start_column]'] = ObjectSerializer::toFormValue($outputAnnotationsStartColumn);
        }
        // form params
        if ($outputAnnotationsEndColumn !== null) {
            $formParams['output[annotations][end_column]'] = ObjectSerializer::toFormValue($outputAnnotationsEndColumn);
        }
        // form params
        if ($outputAnnotationsAnnotationLevel !== null) {
            $formParams['output[annotations][annotation_level]'] = ObjectSerializer::toFormValue($outputAnnotationsAnnotationLevel);
        }
        // form params
        if ($outputAnnotationsMessage !== null) {
            $formParams['output[annotations][message]'] = ObjectSerializer::toFormValue($outputAnnotationsMessage);
        }
        // form params
        if ($outputAnnotationsTitle !== null) {
            $formParams['output[annotations][title]'] = ObjectSerializer::toFormValue($outputAnnotationsTitle);
        }
        // form params
        if ($outputAnnotationsRawDetails !== null) {
            $formParams['output[annotations][raw_details]'] = ObjectSerializer::toFormValue($outputAnnotationsRawDetails);
        }
        // form params
        if ($outputImagesAlt !== null) {
            $formParams['output[images][alt]'] = ObjectSerializer::toFormValue($outputImagesAlt);
        }
        // form params
        if ($outputImagesImageUrl !== null) {
            $formParams['output[images][image_url]'] = ObjectSerializer::toFormValue($outputImagesImageUrl);
        }
        // form params
        if ($outputImagesCaption !== null) {
            $formParams['output[images][caption]'] = ObjectSerializer::toFormValue($outputImagesCaption);
        }
        // form params
        if ($actionsLabel !== null) {
            $formParams['actions[label]'] = ObjectSerializer::toFormValue($actionsLabel);
        }
        // form params
        if ($actionsDescription !== null) {
            $formParams['actions[description]'] = ObjectSerializer::toFormValue($actionsDescription);
        }
        // form params
        if ($actionsIdentifier !== null) {
            $formParams['actions[identifier]'] = ObjectSerializer::toFormValue($actionsIdentifier);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postV5ReposOwnerRepoCheckRuns
     *
     * 创建检查项
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $outputTitle 标题 (required)
     * @param  string $outputSummary 概论 (required)
     * @param  string[] $outputAnnotationsPath 路径 (required)
     * @param  int[] $outputAnnotationsStartLine 开始行 (required)
     * @param  int[] $outputAnnotationsEndLine 结束行 (required)
     * @param  string[] $outputAnnotationsAnnotationLevel 注释级别 (required)
     * @param  string[] $outputAnnotationsMessage 注释信息 (required)
     * @param  string[] $outputImagesAlt 注释 (required)
     * @param  string[] $outputImagesImageUrl URL (required)
     * @param  string[] $actionsLabel 文本 (required)
     * @param  string[] $actionsDescription 描述 (required)
     * @param  string[] $actionsIdentifier 标识 (required)
     * @param  string $name 名字 (required)
     * @param  string $headSha 提交的 sha 值（必须是完整的） (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $pullRequestId PullRequest ID (optional)
     * @param  string $detailsUrl 详情链接 (optional)
     * @param  string $status 状态 (optional, default to queued)
     * @param  \DateTime $startedAt 开始时间 (optional)
     * @param  string $conclusion 结论 (optional)
     * @param  \DateTime $completedAt 完成时间 (optional)
     * @param  string $outputText 详细信息 (optional)
     * @param  int[] $outputAnnotationsStartColumn 开始列 (optional)
     * @param  int[] $outputAnnotationsEndColumn 结束列 (optional)
     * @param  string[] $outputAnnotationsTitle 标题 (optional)
     * @param  string[] $outputAnnotationsRawDetails 详情内容 (optional)
     * @param  string[] $outputImagesCaption 描述 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\CheckRun
     */
    public function postV5ReposOwnerRepoCheckRuns($owner, $repo, $outputTitle, $outputSummary, $outputAnnotationsPath, $outputAnnotationsStartLine, $outputAnnotationsEndLine, $outputAnnotationsAnnotationLevel, $outputAnnotationsMessage, $outputImagesAlt, $outputImagesImageUrl, $actionsLabel, $actionsDescription, $actionsIdentifier, $name, $headSha, $accessToken = null, $pullRequestId = null, $detailsUrl = null, $status = 'queued', $startedAt = null, $conclusion = null, $completedAt = null, $outputText = null, $outputAnnotationsStartColumn = null, $outputAnnotationsEndColumn = null, $outputAnnotationsTitle = null, $outputAnnotationsRawDetails = null, $outputImagesCaption = null)
    {
        list($response) = $this->postV5ReposOwnerRepoCheckRunsWithHttpInfo($owner, $repo, $outputTitle, $outputSummary, $outputAnnotationsPath, $outputAnnotationsStartLine, $outputAnnotationsEndLine, $outputAnnotationsAnnotationLevel, $outputAnnotationsMessage, $outputImagesAlt, $outputImagesImageUrl, $actionsLabel, $actionsDescription, $actionsIdentifier, $name, $headSha, $accessToken, $pullRequestId, $detailsUrl, $status, $startedAt, $conclusion, $completedAt, $outputText, $outputAnnotationsStartColumn, $outputAnnotationsEndColumn, $outputAnnotationsTitle, $outputAnnotationsRawDetails, $outputImagesCaption);
        return $response;
    }

    /**
     * Operation postV5ReposOwnerRepoCheckRunsWithHttpInfo
     *
     * 创建检查项
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $outputTitle 标题 (required)
     * @param  string $outputSummary 概论 (required)
     * @param  string[] $outputAnnotationsPath 路径 (required)
     * @param  int[] $outputAnnotationsStartLine 开始行 (required)
     * @param  int[] $outputAnnotationsEndLine 结束行 (required)
     * @param  string[] $outputAnnotationsAnnotationLevel 注释级别 (required)
     * @param  string[] $outputAnnotationsMessage 注释信息 (required)
     * @param  string[] $outputImagesAlt 注释 (required)
     * @param  string[] $outputImagesImageUrl URL (required)
     * @param  string[] $actionsLabel 文本 (required)
     * @param  string[] $actionsDescription 描述 (required)
     * @param  string[] $actionsIdentifier 标识 (required)
     * @param  string $name 名字 (required)
     * @param  string $headSha 提交的 sha 值（必须是完整的） (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $pullRequestId PullRequest ID (optional)
     * @param  string $detailsUrl 详情链接 (optional)
     * @param  string $status 状态 (optional, default to queued)
     * @param  \DateTime $startedAt 开始时间 (optional)
     * @param  string $conclusion 结论 (optional)
     * @param  \DateTime $completedAt 完成时间 (optional)
     * @param  string $outputText 详细信息 (optional)
     * @param  int[] $outputAnnotationsStartColumn 开始列 (optional)
     * @param  int[] $outputAnnotationsEndColumn 结束列 (optional)
     * @param  string[] $outputAnnotationsTitle 标题 (optional)
     * @param  string[] $outputAnnotationsRawDetails 详情内容 (optional)
     * @param  string[] $outputImagesCaption 描述 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\CheckRun, HTTP status code, HTTP response headers (array of strings)
     */
    public function postV5ReposOwnerRepoCheckRunsWithHttpInfo($owner, $repo, $outputTitle, $outputSummary, $outputAnnotationsPath, $outputAnnotationsStartLine, $outputAnnotationsEndLine, $outputAnnotationsAnnotationLevel, $outputAnnotationsMessage, $outputImagesAlt, $outputImagesImageUrl, $actionsLabel, $actionsDescription, $actionsIdentifier, $name, $headSha, $accessToken = null, $pullRequestId = null, $detailsUrl = null, $status = 'queued', $startedAt = null, $conclusion = null, $completedAt = null, $outputText = null, $outputAnnotationsStartColumn = null, $outputAnnotationsEndColumn = null, $outputAnnotationsTitle = null, $outputAnnotationsRawDetails = null, $outputImagesCaption = null)
    {
        $returnType = '\Gitee\Model\CheckRun';
        $request = $this->postV5ReposOwnerRepoCheckRunsRequest($owner, $repo, $outputTitle, $outputSummary, $outputAnnotationsPath, $outputAnnotationsStartLine, $outputAnnotationsEndLine, $outputAnnotationsAnnotationLevel, $outputAnnotationsMessage, $outputImagesAlt, $outputImagesImageUrl, $actionsLabel, $actionsDescription, $actionsIdentifier, $name, $headSha, $accessToken, $pullRequestId, $detailsUrl, $status, $startedAt, $conclusion, $completedAt, $outputText, $outputAnnotationsStartColumn, $outputAnnotationsEndColumn, $outputAnnotationsTitle, $outputAnnotationsRawDetails, $outputImagesCaption);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\CheckRun',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postV5ReposOwnerRepoCheckRunsAsync
     *
     * 创建检查项
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $outputTitle 标题 (required)
     * @param  string $outputSummary 概论 (required)
     * @param  string[] $outputAnnotationsPath 路径 (required)
     * @param  int[] $outputAnnotationsStartLine 开始行 (required)
     * @param  int[] $outputAnnotationsEndLine 结束行 (required)
     * @param  string[] $outputAnnotationsAnnotationLevel 注释级别 (required)
     * @param  string[] $outputAnnotationsMessage 注释信息 (required)
     * @param  string[] $outputImagesAlt 注释 (required)
     * @param  string[] $outputImagesImageUrl URL (required)
     * @param  string[] $actionsLabel 文本 (required)
     * @param  string[] $actionsDescription 描述 (required)
     * @param  string[] $actionsIdentifier 标识 (required)
     * @param  string $name 名字 (required)
     * @param  string $headSha 提交的 sha 值（必须是完整的） (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $pullRequestId PullRequest ID (optional)
     * @param  string $detailsUrl 详情链接 (optional)
     * @param  string $status 状态 (optional, default to queued)
     * @param  \DateTime $startedAt 开始时间 (optional)
     * @param  string $conclusion 结论 (optional)
     * @param  \DateTime $completedAt 完成时间 (optional)
     * @param  string $outputText 详细信息 (optional)
     * @param  int[] $outputAnnotationsStartColumn 开始列 (optional)
     * @param  int[] $outputAnnotationsEndColumn 结束列 (optional)
     * @param  string[] $outputAnnotationsTitle 标题 (optional)
     * @param  string[] $outputAnnotationsRawDetails 详情内容 (optional)
     * @param  string[] $outputImagesCaption 描述 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV5ReposOwnerRepoCheckRunsAsync($owner, $repo, $outputTitle, $outputSummary, $outputAnnotationsPath, $outputAnnotationsStartLine, $outputAnnotationsEndLine, $outputAnnotationsAnnotationLevel, $outputAnnotationsMessage, $outputImagesAlt, $outputImagesImageUrl, $actionsLabel, $actionsDescription, $actionsIdentifier, $name, $headSha, $accessToken = null, $pullRequestId = null, $detailsUrl = null, $status = 'queued', $startedAt = null, $conclusion = null, $completedAt = null, $outputText = null, $outputAnnotationsStartColumn = null, $outputAnnotationsEndColumn = null, $outputAnnotationsTitle = null, $outputAnnotationsRawDetails = null, $outputImagesCaption = null)
    {
        return $this->postV5ReposOwnerRepoCheckRunsAsyncWithHttpInfo($owner, $repo, $outputTitle, $outputSummary, $outputAnnotationsPath, $outputAnnotationsStartLine, $outputAnnotationsEndLine, $outputAnnotationsAnnotationLevel, $outputAnnotationsMessage, $outputImagesAlt, $outputImagesImageUrl, $actionsLabel, $actionsDescription, $actionsIdentifier, $name, $headSha, $accessToken, $pullRequestId, $detailsUrl, $status, $startedAt, $conclusion, $completedAt, $outputText, $outputAnnotationsStartColumn, $outputAnnotationsEndColumn, $outputAnnotationsTitle, $outputAnnotationsRawDetails, $outputImagesCaption)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postV5ReposOwnerRepoCheckRunsAsyncWithHttpInfo
     *
     * 创建检查项
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $outputTitle 标题 (required)
     * @param  string $outputSummary 概论 (required)
     * @param  string[] $outputAnnotationsPath 路径 (required)
     * @param  int[] $outputAnnotationsStartLine 开始行 (required)
     * @param  int[] $outputAnnotationsEndLine 结束行 (required)
     * @param  string[] $outputAnnotationsAnnotationLevel 注释级别 (required)
     * @param  string[] $outputAnnotationsMessage 注释信息 (required)
     * @param  string[] $outputImagesAlt 注释 (required)
     * @param  string[] $outputImagesImageUrl URL (required)
     * @param  string[] $actionsLabel 文本 (required)
     * @param  string[] $actionsDescription 描述 (required)
     * @param  string[] $actionsIdentifier 标识 (required)
     * @param  string $name 名字 (required)
     * @param  string $headSha 提交的 sha 值（必须是完整的） (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $pullRequestId PullRequest ID (optional)
     * @param  string $detailsUrl 详情链接 (optional)
     * @param  string $status 状态 (optional, default to queued)
     * @param  \DateTime $startedAt 开始时间 (optional)
     * @param  string $conclusion 结论 (optional)
     * @param  \DateTime $completedAt 完成时间 (optional)
     * @param  string $outputText 详细信息 (optional)
     * @param  int[] $outputAnnotationsStartColumn 开始列 (optional)
     * @param  int[] $outputAnnotationsEndColumn 结束列 (optional)
     * @param  string[] $outputAnnotationsTitle 标题 (optional)
     * @param  string[] $outputAnnotationsRawDetails 详情内容 (optional)
     * @param  string[] $outputImagesCaption 描述 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV5ReposOwnerRepoCheckRunsAsyncWithHttpInfo($owner, $repo, $outputTitle, $outputSummary, $outputAnnotationsPath, $outputAnnotationsStartLine, $outputAnnotationsEndLine, $outputAnnotationsAnnotationLevel, $outputAnnotationsMessage, $outputImagesAlt, $outputImagesImageUrl, $actionsLabel, $actionsDescription, $actionsIdentifier, $name, $headSha, $accessToken = null, $pullRequestId = null, $detailsUrl = null, $status = 'queued', $startedAt = null, $conclusion = null, $completedAt = null, $outputText = null, $outputAnnotationsStartColumn = null, $outputAnnotationsEndColumn = null, $outputAnnotationsTitle = null, $outputAnnotationsRawDetails = null, $outputImagesCaption = null)
    {
        $returnType = '\Gitee\Model\CheckRun';
        $request = $this->postV5ReposOwnerRepoCheckRunsRequest($owner, $repo, $outputTitle, $outputSummary, $outputAnnotationsPath, $outputAnnotationsStartLine, $outputAnnotationsEndLine, $outputAnnotationsAnnotationLevel, $outputAnnotationsMessage, $outputImagesAlt, $outputImagesImageUrl, $actionsLabel, $actionsDescription, $actionsIdentifier, $name, $headSha, $accessToken, $pullRequestId, $detailsUrl, $status, $startedAt, $conclusion, $completedAt, $outputText, $outputAnnotationsStartColumn, $outputAnnotationsEndColumn, $outputAnnotationsTitle, $outputAnnotationsRawDetails, $outputImagesCaption);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postV5ReposOwnerRepoCheckRuns'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $outputTitle 标题 (required)
     * @param  string $outputSummary 概论 (required)
     * @param  string[] $outputAnnotationsPath 路径 (required)
     * @param  int[] $outputAnnotationsStartLine 开始行 (required)
     * @param  int[] $outputAnnotationsEndLine 结束行 (required)
     * @param  string[] $outputAnnotationsAnnotationLevel 注释级别 (required)
     * @param  string[] $outputAnnotationsMessage 注释信息 (required)
     * @param  string[] $outputImagesAlt 注释 (required)
     * @param  string[] $outputImagesImageUrl URL (required)
     * @param  string[] $actionsLabel 文本 (required)
     * @param  string[] $actionsDescription 描述 (required)
     * @param  string[] $actionsIdentifier 标识 (required)
     * @param  string $name 名字 (required)
     * @param  string $headSha 提交的 sha 值（必须是完整的） (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $pullRequestId PullRequest ID (optional)
     * @param  string $detailsUrl 详情链接 (optional)
     * @param  string $status 状态 (optional, default to queued)
     * @param  \DateTime $startedAt 开始时间 (optional)
     * @param  string $conclusion 结论 (optional)
     * @param  \DateTime $completedAt 完成时间 (optional)
     * @param  string $outputText 详细信息 (optional)
     * @param  int[] $outputAnnotationsStartColumn 开始列 (optional)
     * @param  int[] $outputAnnotationsEndColumn 结束列 (optional)
     * @param  string[] $outputAnnotationsTitle 标题 (optional)
     * @param  string[] $outputAnnotationsRawDetails 详情内容 (optional)
     * @param  string[] $outputImagesCaption 描述 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postV5ReposOwnerRepoCheckRunsRequest($owner, $repo, $outputTitle, $outputSummary, $outputAnnotationsPath, $outputAnnotationsStartLine, $outputAnnotationsEndLine, $outputAnnotationsAnnotationLevel, $outputAnnotationsMessage, $outputImagesAlt, $outputImagesImageUrl, $actionsLabel, $actionsDescription, $actionsIdentifier, $name, $headSha, $accessToken = null, $pullRequestId = null, $detailsUrl = null, $status = 'queued', $startedAt = null, $conclusion = null, $completedAt = null, $outputText = null, $outputAnnotationsStartColumn = null, $outputAnnotationsEndColumn = null, $outputAnnotationsTitle = null, $outputAnnotationsRawDetails = null, $outputImagesCaption = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling postV5ReposOwnerRepoCheckRuns'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling postV5ReposOwnerRepoCheckRuns'
            );
        }
        // verify the required parameter 'outputTitle' is set
        if ($outputTitle === null || (is_array($outputTitle) && count($outputTitle) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $outputTitle when calling postV5ReposOwnerRepoCheckRuns'
            );
        }
        // verify the required parameter 'outputSummary' is set
        if ($outputSummary === null || (is_array($outputSummary) && count($outputSummary) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $outputSummary when calling postV5ReposOwnerRepoCheckRuns'
            );
        }
        // verify the required parameter 'outputAnnotationsPath' is set
        if ($outputAnnotationsPath === null || (is_array($outputAnnotationsPath) && count($outputAnnotationsPath) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $outputAnnotationsPath when calling postV5ReposOwnerRepoCheckRuns'
            );
        }
        // verify the required parameter 'outputAnnotationsStartLine' is set
        if ($outputAnnotationsStartLine === null || (is_array($outputAnnotationsStartLine) && count($outputAnnotationsStartLine) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $outputAnnotationsStartLine when calling postV5ReposOwnerRepoCheckRuns'
            );
        }
        // verify the required parameter 'outputAnnotationsEndLine' is set
        if ($outputAnnotationsEndLine === null || (is_array($outputAnnotationsEndLine) && count($outputAnnotationsEndLine) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $outputAnnotationsEndLine when calling postV5ReposOwnerRepoCheckRuns'
            );
        }
        // verify the required parameter 'outputAnnotationsAnnotationLevel' is set
        if ($outputAnnotationsAnnotationLevel === null || (is_array($outputAnnotationsAnnotationLevel) && count($outputAnnotationsAnnotationLevel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $outputAnnotationsAnnotationLevel when calling postV5ReposOwnerRepoCheckRuns'
            );
        }
        // verify the required parameter 'outputAnnotationsMessage' is set
        if ($outputAnnotationsMessage === null || (is_array($outputAnnotationsMessage) && count($outputAnnotationsMessage) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $outputAnnotationsMessage when calling postV5ReposOwnerRepoCheckRuns'
            );
        }
        // verify the required parameter 'outputImagesAlt' is set
        if ($outputImagesAlt === null || (is_array($outputImagesAlt) && count($outputImagesAlt) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $outputImagesAlt when calling postV5ReposOwnerRepoCheckRuns'
            );
        }
        // verify the required parameter 'outputImagesImageUrl' is set
        if ($outputImagesImageUrl === null || (is_array($outputImagesImageUrl) && count($outputImagesImageUrl) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $outputImagesImageUrl when calling postV5ReposOwnerRepoCheckRuns'
            );
        }
        // verify the required parameter 'actionsLabel' is set
        if ($actionsLabel === null || (is_array($actionsLabel) && count($actionsLabel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actionsLabel when calling postV5ReposOwnerRepoCheckRuns'
            );
        }
        // verify the required parameter 'actionsDescription' is set
        if ($actionsDescription === null || (is_array($actionsDescription) && count($actionsDescription) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actionsDescription when calling postV5ReposOwnerRepoCheckRuns'
            );
        }
        // verify the required parameter 'actionsIdentifier' is set
        if ($actionsIdentifier === null || (is_array($actionsIdentifier) && count($actionsIdentifier) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actionsIdentifier when calling postV5ReposOwnerRepoCheckRuns'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling postV5ReposOwnerRepoCheckRuns'
            );
        }
        // verify the required parameter 'headSha' is set
        if ($headSha === null || (is_array($headSha) && count($headSha) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $headSha when calling postV5ReposOwnerRepoCheckRuns'
            );
        }

        $resourcePath = '/v5/repos/{owner}/{repo}/check-runs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($pullRequestId !== null) {
            $formParams['pull_request_id'] = ObjectSerializer::toFormValue($pullRequestId);
        }
        // form params
        if ($detailsUrl !== null) {
            $formParams['details_url'] = ObjectSerializer::toFormValue($detailsUrl);
        }
        // form params
        if ($status !== null) {
            $formParams['status'] = ObjectSerializer::toFormValue($status);
        }
        // form params
        if ($startedAt !== null) {
            $formParams['started_at'] = ObjectSerializer::toFormValue($startedAt);
        }
        // form params
        if ($conclusion !== null) {
            $formParams['conclusion'] = ObjectSerializer::toFormValue($conclusion);
        }
        // form params
        if ($completedAt !== null) {
            $formParams['completed_at'] = ObjectSerializer::toFormValue($completedAt);
        }
        // form params
        if ($outputTitle !== null) {
            $formParams['output[title]'] = ObjectSerializer::toFormValue($outputTitle);
        }
        // form params
        if ($outputSummary !== null) {
            $formParams['output[summary]'] = ObjectSerializer::toFormValue($outputSummary);
        }
        // form params
        if ($outputText !== null) {
            $formParams['output[text]'] = ObjectSerializer::toFormValue($outputText);
        }
        // form params
        if ($outputAnnotationsPath !== null) {
            $formParams['output[annotations][path]'] = ObjectSerializer::toFormValue($outputAnnotationsPath);
        }
        // form params
        if ($outputAnnotationsStartLine !== null) {
            $formParams['output[annotations][start_line]'] = ObjectSerializer::toFormValue($outputAnnotationsStartLine);
        }
        // form params
        if ($outputAnnotationsEndLine !== null) {
            $formParams['output[annotations][end_line]'] = ObjectSerializer::toFormValue($outputAnnotationsEndLine);
        }
        // form params
        if ($outputAnnotationsStartColumn !== null) {
            $formParams['output[annotations][start_column]'] = ObjectSerializer::toFormValue($outputAnnotationsStartColumn);
        }
        // form params
        if ($outputAnnotationsEndColumn !== null) {
            $formParams['output[annotations][end_column]'] = ObjectSerializer::toFormValue($outputAnnotationsEndColumn);
        }
        // form params
        if ($outputAnnotationsAnnotationLevel !== null) {
            $formParams['output[annotations][annotation_level]'] = ObjectSerializer::toFormValue($outputAnnotationsAnnotationLevel);
        }
        // form params
        if ($outputAnnotationsMessage !== null) {
            $formParams['output[annotations][message]'] = ObjectSerializer::toFormValue($outputAnnotationsMessage);
        }
        // form params
        if ($outputAnnotationsTitle !== null) {
            $formParams['output[annotations][title]'] = ObjectSerializer::toFormValue($outputAnnotationsTitle);
        }
        // form params
        if ($outputAnnotationsRawDetails !== null) {
            $formParams['output[annotations][raw_details]'] = ObjectSerializer::toFormValue($outputAnnotationsRawDetails);
        }
        // form params
        if ($outputImagesAlt !== null) {
            $formParams['output[images][alt]'] = ObjectSerializer::toFormValue($outputImagesAlt);
        }
        // form params
        if ($outputImagesImageUrl !== null) {
            $formParams['output[images][image_url]'] = ObjectSerializer::toFormValue($outputImagesImageUrl);
        }
        // form params
        if ($outputImagesCaption !== null) {
            $formParams['output[images][caption]'] = ObjectSerializer::toFormValue($outputImagesCaption);
        }
        // form params
        if ($actionsLabel !== null) {
            $formParams['actions[label]'] = ObjectSerializer::toFormValue($actionsLabel);
        }
        // form params
        if ($actionsDescription !== null) {
            $formParams['actions[description]'] = ObjectSerializer::toFormValue($actionsDescription);
        }
        // form params
        if ($actionsIdentifier !== null) {
            $formParams['actions[identifier]'] = ObjectSerializer::toFormValue($actionsIdentifier);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($headSha !== null) {
            $formParams['head_sha'] = ObjectSerializer::toFormValue($headSha);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
