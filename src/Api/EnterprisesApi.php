<?php
/**
 * EnterprisesApi
 * PHP version 5
 *
 * @category Class
 * @package  Gitee
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * Gitee SDK for PHP
 *
 * OpenAPI spec version: 5.4.85
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.42
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Gitee\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Gitee\ApiException;
use Gitee\Configuration;
use Gitee\HeaderSelector;
use Gitee\ObjectSerializer;

/**
 * EnterprisesApi Class Doc Comment
 *
 * @category Class
 * @package  Gitee
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EnterprisesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteV5EnterprisesEnterpriseMembersUsername
     *
     * 移除企业成员
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteV5EnterprisesEnterpriseMembersUsername($enterprise, $username, $accessToken = null)
    {
        $this->deleteV5EnterprisesEnterpriseMembersUsernameWithHttpInfo($enterprise, $username, $accessToken);
    }

    /**
     * Operation deleteV5EnterprisesEnterpriseMembersUsernameWithHttpInfo
     *
     * 移除企业成员
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteV5EnterprisesEnterpriseMembersUsernameWithHttpInfo($enterprise, $username, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteV5EnterprisesEnterpriseMembersUsernameRequest($enterprise, $username, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteV5EnterprisesEnterpriseMembersUsernameAsync
     *
     * 移除企业成员
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteV5EnterprisesEnterpriseMembersUsernameAsync($enterprise, $username, $accessToken = null)
    {
        return $this->deleteV5EnterprisesEnterpriseMembersUsernameAsyncWithHttpInfo($enterprise, $username, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteV5EnterprisesEnterpriseMembersUsernameAsyncWithHttpInfo
     *
     * 移除企业成员
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteV5EnterprisesEnterpriseMembersUsernameAsyncWithHttpInfo($enterprise, $username, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteV5EnterprisesEnterpriseMembersUsernameRequest($enterprise, $username, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteV5EnterprisesEnterpriseMembersUsername'
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteV5EnterprisesEnterpriseMembersUsernameRequest($enterprise, $username, $accessToken = null)
    {
        // verify the required parameter 'enterprise' is set
        if ($enterprise === null || (is_array($enterprise) && count($enterprise) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterprise when calling deleteV5EnterprisesEnterpriseMembersUsername'
            );
        }
        // verify the required parameter 'username' is set
        if ($username === null || (is_array($username) && count($username) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $username when calling deleteV5EnterprisesEnterpriseMembersUsername'
            );
        }

        $resourcePath = '/v5/enterprises/{enterprise}/members/{username}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($enterprise !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise' . '}',
                ObjectSerializer::toPathValue($enterprise),
                $resourcePath
            );
        }
        // path params
        if ($username !== null) {
            $resourcePath = str_replace(
                '{' . 'username' . '}',
                ObjectSerializer::toPathValue($username),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteV5EnterprisesEnterpriseWeekReportsReportIdCommentsId
     *
     * 删除周报某个评论
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  int $reportId 周报ID (required)
     * @param  int $id 评论ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteV5EnterprisesEnterpriseWeekReportsReportIdCommentsId($enterprise, $reportId, $id, $accessToken = null)
    {
        $this->deleteV5EnterprisesEnterpriseWeekReportsReportIdCommentsIdWithHttpInfo($enterprise, $reportId, $id, $accessToken);
    }

    /**
     * Operation deleteV5EnterprisesEnterpriseWeekReportsReportIdCommentsIdWithHttpInfo
     *
     * 删除周报某个评论
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  int $reportId 周报ID (required)
     * @param  int $id 评论ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteV5EnterprisesEnterpriseWeekReportsReportIdCommentsIdWithHttpInfo($enterprise, $reportId, $id, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteV5EnterprisesEnterpriseWeekReportsReportIdCommentsIdRequest($enterprise, $reportId, $id, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteV5EnterprisesEnterpriseWeekReportsReportIdCommentsIdAsync
     *
     * 删除周报某个评论
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  int $reportId 周报ID (required)
     * @param  int $id 评论ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteV5EnterprisesEnterpriseWeekReportsReportIdCommentsIdAsync($enterprise, $reportId, $id, $accessToken = null)
    {
        return $this->deleteV5EnterprisesEnterpriseWeekReportsReportIdCommentsIdAsyncWithHttpInfo($enterprise, $reportId, $id, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteV5EnterprisesEnterpriseWeekReportsReportIdCommentsIdAsyncWithHttpInfo
     *
     * 删除周报某个评论
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  int $reportId 周报ID (required)
     * @param  int $id 评论ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteV5EnterprisesEnterpriseWeekReportsReportIdCommentsIdAsyncWithHttpInfo($enterprise, $reportId, $id, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteV5EnterprisesEnterpriseWeekReportsReportIdCommentsIdRequest($enterprise, $reportId, $id, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteV5EnterprisesEnterpriseWeekReportsReportIdCommentsId'
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  int $reportId 周报ID (required)
     * @param  int $id 评论ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteV5EnterprisesEnterpriseWeekReportsReportIdCommentsIdRequest($enterprise, $reportId, $id, $accessToken = null)
    {
        // verify the required parameter 'enterprise' is set
        if ($enterprise === null || (is_array($enterprise) && count($enterprise) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterprise when calling deleteV5EnterprisesEnterpriseWeekReportsReportIdCommentsId'
            );
        }
        // verify the required parameter 'reportId' is set
        if ($reportId === null || (is_array($reportId) && count($reportId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reportId when calling deleteV5EnterprisesEnterpriseWeekReportsReportIdCommentsId'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteV5EnterprisesEnterpriseWeekReportsReportIdCommentsId'
            );
        }

        $resourcePath = '/v5/enterprises/{enterprise}/week_reports/{report_id}/comments/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($enterprise !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise' . '}',
                ObjectSerializer::toPathValue($enterprise),
                $resourcePath
            );
        }
        // path params
        if ($reportId !== null) {
            $resourcePath = str_replace(
                '{' . 'report_id' . '}',
                ObjectSerializer::toPathValue($reportId),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5EnterpriseEnterprisePullRequests
     *
     * 企业 Pull Request 列表
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $issueNumber 可选。Issue 编号(区分大小写，无需添加 # 号) (optional)
     * @param  string $repo 可选。仓库路径(path) (optional)
     * @param  int $programId 可选。项目ID (optional)
     * @param  string $state 可选。Pull Request 状态 (optional, default to open)
     * @param  string $head 可选。Pull Request 提交的源分支。格式：branch 或者：username:branch (optional)
     * @param  string $base 可选。Pull Request 提交目标分支的名称。 (optional)
     * @param  string $sort 可选。排序字段，默认按创建时间 (optional, default to created)
     * @param  string $since 可选。起始的更新时间，要求时间格式为 ISO 8601 (optional)
     * @param  string $direction 可选。升序/降序 (optional, default to desc)
     * @param  int $milestoneNumber 可选。里程碑序号(id) (optional)
     * @param  string $labels 用逗号分开的标签。如: bug,performance (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\PullRequest[]
     */
    public function getV5EnterpriseEnterprisePullRequests($enterprise, $accessToken = null, $issueNumber = null, $repo = null, $programId = null, $state = 'open', $head = null, $base = null, $sort = 'created', $since = null, $direction = 'desc', $milestoneNumber = null, $labels = null, $page = '1', $perPage = '20')
    {
        list($response) = $this->getV5EnterpriseEnterprisePullRequestsWithHttpInfo($enterprise, $accessToken, $issueNumber, $repo, $programId, $state, $head, $base, $sort, $since, $direction, $milestoneNumber, $labels, $page, $perPage);
        return $response;
    }

    /**
     * Operation getV5EnterpriseEnterprisePullRequestsWithHttpInfo
     *
     * 企业 Pull Request 列表
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $issueNumber 可选。Issue 编号(区分大小写，无需添加 # 号) (optional)
     * @param  string $repo 可选。仓库路径(path) (optional)
     * @param  int $programId 可选。项目ID (optional)
     * @param  string $state 可选。Pull Request 状态 (optional, default to open)
     * @param  string $head 可选。Pull Request 提交的源分支。格式：branch 或者：username:branch (optional)
     * @param  string $base 可选。Pull Request 提交目标分支的名称。 (optional)
     * @param  string $sort 可选。排序字段，默认按创建时间 (optional, default to created)
     * @param  string $since 可选。起始的更新时间，要求时间格式为 ISO 8601 (optional)
     * @param  string $direction 可选。升序/降序 (optional, default to desc)
     * @param  int $milestoneNumber 可选。里程碑序号(id) (optional)
     * @param  string $labels 用逗号分开的标签。如: bug,performance (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\PullRequest[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5EnterpriseEnterprisePullRequestsWithHttpInfo($enterprise, $accessToken = null, $issueNumber = null, $repo = null, $programId = null, $state = 'open', $head = null, $base = null, $sort = 'created', $since = null, $direction = 'desc', $milestoneNumber = null, $labels = null, $page = '1', $perPage = '20')
    {
        $returnType = '\Gitee\Model\PullRequest[]';
        $request = $this->getV5EnterpriseEnterprisePullRequestsRequest($enterprise, $accessToken, $issueNumber, $repo, $programId, $state, $head, $base, $sort, $since, $direction, $milestoneNumber, $labels, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\PullRequest[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5EnterpriseEnterprisePullRequestsAsync
     *
     * 企业 Pull Request 列表
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $issueNumber 可选。Issue 编号(区分大小写，无需添加 # 号) (optional)
     * @param  string $repo 可选。仓库路径(path) (optional)
     * @param  int $programId 可选。项目ID (optional)
     * @param  string $state 可选。Pull Request 状态 (optional, default to open)
     * @param  string $head 可选。Pull Request 提交的源分支。格式：branch 或者：username:branch (optional)
     * @param  string $base 可选。Pull Request 提交目标分支的名称。 (optional)
     * @param  string $sort 可选。排序字段，默认按创建时间 (optional, default to created)
     * @param  string $since 可选。起始的更新时间，要求时间格式为 ISO 8601 (optional)
     * @param  string $direction 可选。升序/降序 (optional, default to desc)
     * @param  int $milestoneNumber 可选。里程碑序号(id) (optional)
     * @param  string $labels 用逗号分开的标签。如: bug,performance (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5EnterpriseEnterprisePullRequestsAsync($enterprise, $accessToken = null, $issueNumber = null, $repo = null, $programId = null, $state = 'open', $head = null, $base = null, $sort = 'created', $since = null, $direction = 'desc', $milestoneNumber = null, $labels = null, $page = '1', $perPage = '20')
    {
        return $this->getV5EnterpriseEnterprisePullRequestsAsyncWithHttpInfo($enterprise, $accessToken, $issueNumber, $repo, $programId, $state, $head, $base, $sort, $since, $direction, $milestoneNumber, $labels, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5EnterpriseEnterprisePullRequestsAsyncWithHttpInfo
     *
     * 企业 Pull Request 列表
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $issueNumber 可选。Issue 编号(区分大小写，无需添加 # 号) (optional)
     * @param  string $repo 可选。仓库路径(path) (optional)
     * @param  int $programId 可选。项目ID (optional)
     * @param  string $state 可选。Pull Request 状态 (optional, default to open)
     * @param  string $head 可选。Pull Request 提交的源分支。格式：branch 或者：username:branch (optional)
     * @param  string $base 可选。Pull Request 提交目标分支的名称。 (optional)
     * @param  string $sort 可选。排序字段，默认按创建时间 (optional, default to created)
     * @param  string $since 可选。起始的更新时间，要求时间格式为 ISO 8601 (optional)
     * @param  string $direction 可选。升序/降序 (optional, default to desc)
     * @param  int $milestoneNumber 可选。里程碑序号(id) (optional)
     * @param  string $labels 用逗号分开的标签。如: bug,performance (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5EnterpriseEnterprisePullRequestsAsyncWithHttpInfo($enterprise, $accessToken = null, $issueNumber = null, $repo = null, $programId = null, $state = 'open', $head = null, $base = null, $sort = 'created', $since = null, $direction = 'desc', $milestoneNumber = null, $labels = null, $page = '1', $perPage = '20')
    {
        $returnType = '\Gitee\Model\PullRequest[]';
        $request = $this->getV5EnterpriseEnterprisePullRequestsRequest($enterprise, $accessToken, $issueNumber, $repo, $programId, $state, $head, $base, $sort, $since, $direction, $milestoneNumber, $labels, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5EnterpriseEnterprisePullRequests'
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $issueNumber 可选。Issue 编号(区分大小写，无需添加 # 号) (optional)
     * @param  string $repo 可选。仓库路径(path) (optional)
     * @param  int $programId 可选。项目ID (optional)
     * @param  string $state 可选。Pull Request 状态 (optional, default to open)
     * @param  string $head 可选。Pull Request 提交的源分支。格式：branch 或者：username:branch (optional)
     * @param  string $base 可选。Pull Request 提交目标分支的名称。 (optional)
     * @param  string $sort 可选。排序字段，默认按创建时间 (optional, default to created)
     * @param  string $since 可选。起始的更新时间，要求时间格式为 ISO 8601 (optional)
     * @param  string $direction 可选。升序/降序 (optional, default to desc)
     * @param  int $milestoneNumber 可选。里程碑序号(id) (optional)
     * @param  string $labels 用逗号分开的标签。如: bug,performance (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5EnterpriseEnterprisePullRequestsRequest($enterprise, $accessToken = null, $issueNumber = null, $repo = null, $programId = null, $state = 'open', $head = null, $base = null, $sort = 'created', $since = null, $direction = 'desc', $milestoneNumber = null, $labels = null, $page = '1', $perPage = '20')
    {
        // verify the required parameter 'enterprise' is set
        if ($enterprise === null || (is_array($enterprise) && count($enterprise) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterprise when calling getV5EnterpriseEnterprisePullRequests'
            );
        }
        if ($perPage !== null && $perPage > 100) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling EnterprisesApi.getV5EnterpriseEnterprisePullRequests, must be smaller than or equal to 100.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling EnterprisesApi.getV5EnterpriseEnterprisePullRequests, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v5/enterprise/{enterprise}/pull_requests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($issueNumber !== null) {
            $queryParams['issue_number'] = ObjectSerializer::toQueryValue($issueNumber);
        }
        // query params
        if ($repo !== null) {
            $queryParams['repo'] = ObjectSerializer::toQueryValue($repo);
        }
        // query params
        if ($programId !== null) {
            $queryParams['program_id'] = ObjectSerializer::toQueryValue($programId);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state);
        }
        // query params
        if ($head !== null) {
            $queryParams['head'] = ObjectSerializer::toQueryValue($head);
        }
        // query params
        if ($base !== null) {
            $queryParams['base'] = ObjectSerializer::toQueryValue($base);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($since !== null) {
            $queryParams['since'] = ObjectSerializer::toQueryValue($since);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($milestoneNumber !== null) {
            $queryParams['milestone_number'] = ObjectSerializer::toQueryValue($milestoneNumber);
        }
        // query params
        if ($labels !== null) {
            $queryParams['labels'] = ObjectSerializer::toQueryValue($labels);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterprise !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise' . '}',
                ObjectSerializer::toPathValue($enterprise),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5EnterprisesEnterprise
     *
     * 获取一个企业
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\EnterpriseBasic
     */
    public function getV5EnterprisesEnterprise($enterprise, $accessToken = null)
    {
        list($response) = $this->getV5EnterprisesEnterpriseWithHttpInfo($enterprise, $accessToken);
        return $response;
    }

    /**
     * Operation getV5EnterprisesEnterpriseWithHttpInfo
     *
     * 获取一个企业
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\EnterpriseBasic, HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5EnterprisesEnterpriseWithHttpInfo($enterprise, $accessToken = null)
    {
        $returnType = '\Gitee\Model\EnterpriseBasic';
        $request = $this->getV5EnterprisesEnterpriseRequest($enterprise, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\EnterpriseBasic',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5EnterprisesEnterpriseAsync
     *
     * 获取一个企业
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5EnterprisesEnterpriseAsync($enterprise, $accessToken = null)
    {
        return $this->getV5EnterprisesEnterpriseAsyncWithHttpInfo($enterprise, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5EnterprisesEnterpriseAsyncWithHttpInfo
     *
     * 获取一个企业
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5EnterprisesEnterpriseAsyncWithHttpInfo($enterprise, $accessToken = null)
    {
        $returnType = '\Gitee\Model\EnterpriseBasic';
        $request = $this->getV5EnterprisesEnterpriseRequest($enterprise, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5EnterprisesEnterprise'
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5EnterprisesEnterpriseRequest($enterprise, $accessToken = null)
    {
        // verify the required parameter 'enterprise' is set
        if ($enterprise === null || (is_array($enterprise) && count($enterprise) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterprise when calling getV5EnterprisesEnterprise'
            );
        }

        $resourcePath = '/v5/enterprises/{enterprise}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($enterprise !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise' . '}',
                ObjectSerializer::toPathValue($enterprise),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5EnterprisesEnterpriseMembers
     *
     * 列出企业的所有成员
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $role 根据角色筛选成员 (optional, default to all)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\EnterpriseMember[]
     */
    public function getV5EnterprisesEnterpriseMembers($enterprise, $accessToken = null, $role = 'all', $page = '1', $perPage = '20')
    {
        list($response) = $this->getV5EnterprisesEnterpriseMembersWithHttpInfo($enterprise, $accessToken, $role, $page, $perPage);
        return $response;
    }

    /**
     * Operation getV5EnterprisesEnterpriseMembersWithHttpInfo
     *
     * 列出企业的所有成员
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $role 根据角色筛选成员 (optional, default to all)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\EnterpriseMember[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5EnterprisesEnterpriseMembersWithHttpInfo($enterprise, $accessToken = null, $role = 'all', $page = '1', $perPage = '20')
    {
        $returnType = '\Gitee\Model\EnterpriseMember[]';
        $request = $this->getV5EnterprisesEnterpriseMembersRequest($enterprise, $accessToken, $role, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\EnterpriseMember[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5EnterprisesEnterpriseMembersAsync
     *
     * 列出企业的所有成员
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $role 根据角色筛选成员 (optional, default to all)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5EnterprisesEnterpriseMembersAsync($enterprise, $accessToken = null, $role = 'all', $page = '1', $perPage = '20')
    {
        return $this->getV5EnterprisesEnterpriseMembersAsyncWithHttpInfo($enterprise, $accessToken, $role, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5EnterprisesEnterpriseMembersAsyncWithHttpInfo
     *
     * 列出企业的所有成员
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $role 根据角色筛选成员 (optional, default to all)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5EnterprisesEnterpriseMembersAsyncWithHttpInfo($enterprise, $accessToken = null, $role = 'all', $page = '1', $perPage = '20')
    {
        $returnType = '\Gitee\Model\EnterpriseMember[]';
        $request = $this->getV5EnterprisesEnterpriseMembersRequest($enterprise, $accessToken, $role, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5EnterprisesEnterpriseMembers'
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $role 根据角色筛选成员 (optional, default to all)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5EnterprisesEnterpriseMembersRequest($enterprise, $accessToken = null, $role = 'all', $page = '1', $perPage = '20')
    {
        // verify the required parameter 'enterprise' is set
        if ($enterprise === null || (is_array($enterprise) && count($enterprise) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterprise when calling getV5EnterprisesEnterpriseMembers'
            );
        }
        if ($perPage !== null && $perPage > 100) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling EnterprisesApi.getV5EnterprisesEnterpriseMembers, must be smaller than or equal to 100.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling EnterprisesApi.getV5EnterprisesEnterpriseMembers, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v5/enterprises/{enterprise}/members';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($role !== null) {
            $queryParams['role'] = ObjectSerializer::toQueryValue($role);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterprise !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise' . '}',
                ObjectSerializer::toPathValue($enterprise),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5EnterprisesEnterpriseMembersSearch
     *
     * 获取企业成员信息(通过用户名/邮箱)
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $queryType 查询类型：username/email (required)
     * @param  string $queryValue 查询值 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\EnterpriseMember
     */
    public function getV5EnterprisesEnterpriseMembersSearch($enterprise, $queryType, $queryValue, $accessToken = null)
    {
        list($response) = $this->getV5EnterprisesEnterpriseMembersSearchWithHttpInfo($enterprise, $queryType, $queryValue, $accessToken);
        return $response;
    }

    /**
     * Operation getV5EnterprisesEnterpriseMembersSearchWithHttpInfo
     *
     * 获取企业成员信息(通过用户名/邮箱)
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $queryType 查询类型：username/email (required)
     * @param  string $queryValue 查询值 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\EnterpriseMember, HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5EnterprisesEnterpriseMembersSearchWithHttpInfo($enterprise, $queryType, $queryValue, $accessToken = null)
    {
        $returnType = '\Gitee\Model\EnterpriseMember';
        $request = $this->getV5EnterprisesEnterpriseMembersSearchRequest($enterprise, $queryType, $queryValue, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\EnterpriseMember',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5EnterprisesEnterpriseMembersSearchAsync
     *
     * 获取企业成员信息(通过用户名/邮箱)
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $queryType 查询类型：username/email (required)
     * @param  string $queryValue 查询值 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5EnterprisesEnterpriseMembersSearchAsync($enterprise, $queryType, $queryValue, $accessToken = null)
    {
        return $this->getV5EnterprisesEnterpriseMembersSearchAsyncWithHttpInfo($enterprise, $queryType, $queryValue, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5EnterprisesEnterpriseMembersSearchAsyncWithHttpInfo
     *
     * 获取企业成员信息(通过用户名/邮箱)
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $queryType 查询类型：username/email (required)
     * @param  string $queryValue 查询值 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5EnterprisesEnterpriseMembersSearchAsyncWithHttpInfo($enterprise, $queryType, $queryValue, $accessToken = null)
    {
        $returnType = '\Gitee\Model\EnterpriseMember';
        $request = $this->getV5EnterprisesEnterpriseMembersSearchRequest($enterprise, $queryType, $queryValue, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5EnterprisesEnterpriseMembersSearch'
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $queryType 查询类型：username/email (required)
     * @param  string $queryValue 查询值 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5EnterprisesEnterpriseMembersSearchRequest($enterprise, $queryType, $queryValue, $accessToken = null)
    {
        // verify the required parameter 'enterprise' is set
        if ($enterprise === null || (is_array($enterprise) && count($enterprise) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterprise when calling getV5EnterprisesEnterpriseMembersSearch'
            );
        }
        // verify the required parameter 'queryType' is set
        if ($queryType === null || (is_array($queryType) && count($queryType) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $queryType when calling getV5EnterprisesEnterpriseMembersSearch'
            );
        }
        // verify the required parameter 'queryValue' is set
        if ($queryValue === null || (is_array($queryValue) && count($queryValue) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $queryValue when calling getV5EnterprisesEnterpriseMembersSearch'
            );
        }

        $resourcePath = '/v5/enterprises/{enterprise}/members/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($queryType !== null) {
            $queryParams['query_type'] = ObjectSerializer::toQueryValue($queryType);
        }
        // query params
        if ($queryValue !== null) {
            $queryParams['query_value'] = ObjectSerializer::toQueryValue($queryValue);
        }

        // path params
        if ($enterprise !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise' . '}',
                ObjectSerializer::toPathValue($enterprise),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5EnterprisesEnterpriseMembersUsername
     *
     * 获取企业的一个成员
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\EnterpriseMember
     */
    public function getV5EnterprisesEnterpriseMembersUsername($enterprise, $username, $accessToken = null)
    {
        list($response) = $this->getV5EnterprisesEnterpriseMembersUsernameWithHttpInfo($enterprise, $username, $accessToken);
        return $response;
    }

    /**
     * Operation getV5EnterprisesEnterpriseMembersUsernameWithHttpInfo
     *
     * 获取企业的一个成员
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\EnterpriseMember, HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5EnterprisesEnterpriseMembersUsernameWithHttpInfo($enterprise, $username, $accessToken = null)
    {
        $returnType = '\Gitee\Model\EnterpriseMember';
        $request = $this->getV5EnterprisesEnterpriseMembersUsernameRequest($enterprise, $username, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\EnterpriseMember',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5EnterprisesEnterpriseMembersUsernameAsync
     *
     * 获取企业的一个成员
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5EnterprisesEnterpriseMembersUsernameAsync($enterprise, $username, $accessToken = null)
    {
        return $this->getV5EnterprisesEnterpriseMembersUsernameAsyncWithHttpInfo($enterprise, $username, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5EnterprisesEnterpriseMembersUsernameAsyncWithHttpInfo
     *
     * 获取企业的一个成员
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5EnterprisesEnterpriseMembersUsernameAsyncWithHttpInfo($enterprise, $username, $accessToken = null)
    {
        $returnType = '\Gitee\Model\EnterpriseMember';
        $request = $this->getV5EnterprisesEnterpriseMembersUsernameRequest($enterprise, $username, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5EnterprisesEnterpriseMembersUsername'
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5EnterprisesEnterpriseMembersUsernameRequest($enterprise, $username, $accessToken = null)
    {
        // verify the required parameter 'enterprise' is set
        if ($enterprise === null || (is_array($enterprise) && count($enterprise) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterprise when calling getV5EnterprisesEnterpriseMembersUsername'
            );
        }
        // verify the required parameter 'username' is set
        if ($username === null || (is_array($username) && count($username) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $username when calling getV5EnterprisesEnterpriseMembersUsername'
            );
        }

        $resourcePath = '/v5/enterprises/{enterprise}/members/{username}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($enterprise !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise' . '}',
                ObjectSerializer::toPathValue($enterprise),
                $resourcePath
            );
        }
        // path params
        if ($username !== null) {
            $resourcePath = str_replace(
                '{' . 'username' . '}',
                ObjectSerializer::toPathValue($username),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5EnterprisesEnterpriseUsersUsernameWeekReports
     *
     * 个人周报列表
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\WeekReport[]
     */
    public function getV5EnterprisesEnterpriseUsersUsernameWeekReports($enterprise, $username, $accessToken = null, $page = '1', $perPage = '20')
    {
        list($response) = $this->getV5EnterprisesEnterpriseUsersUsernameWeekReportsWithHttpInfo($enterprise, $username, $accessToken, $page, $perPage);
        return $response;
    }

    /**
     * Operation getV5EnterprisesEnterpriseUsersUsernameWeekReportsWithHttpInfo
     *
     * 个人周报列表
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\WeekReport[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5EnterprisesEnterpriseUsersUsernameWeekReportsWithHttpInfo($enterprise, $username, $accessToken = null, $page = '1', $perPage = '20')
    {
        $returnType = '\Gitee\Model\WeekReport[]';
        $request = $this->getV5EnterprisesEnterpriseUsersUsernameWeekReportsRequest($enterprise, $username, $accessToken, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\WeekReport[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5EnterprisesEnterpriseUsersUsernameWeekReportsAsync
     *
     * 个人周报列表
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5EnterprisesEnterpriseUsersUsernameWeekReportsAsync($enterprise, $username, $accessToken = null, $page = '1', $perPage = '20')
    {
        return $this->getV5EnterprisesEnterpriseUsersUsernameWeekReportsAsyncWithHttpInfo($enterprise, $username, $accessToken, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5EnterprisesEnterpriseUsersUsernameWeekReportsAsyncWithHttpInfo
     *
     * 个人周报列表
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5EnterprisesEnterpriseUsersUsernameWeekReportsAsyncWithHttpInfo($enterprise, $username, $accessToken = null, $page = '1', $perPage = '20')
    {
        $returnType = '\Gitee\Model\WeekReport[]';
        $request = $this->getV5EnterprisesEnterpriseUsersUsernameWeekReportsRequest($enterprise, $username, $accessToken, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5EnterprisesEnterpriseUsersUsernameWeekReports'
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5EnterprisesEnterpriseUsersUsernameWeekReportsRequest($enterprise, $username, $accessToken = null, $page = '1', $perPage = '20')
    {
        // verify the required parameter 'enterprise' is set
        if ($enterprise === null || (is_array($enterprise) && count($enterprise) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterprise when calling getV5EnterprisesEnterpriseUsersUsernameWeekReports'
            );
        }
        // verify the required parameter 'username' is set
        if ($username === null || (is_array($username) && count($username) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $username when calling getV5EnterprisesEnterpriseUsersUsernameWeekReports'
            );
        }
        if ($perPage !== null && $perPage > 100) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling EnterprisesApi.getV5EnterprisesEnterpriseUsersUsernameWeekReports, must be smaller than or equal to 100.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling EnterprisesApi.getV5EnterprisesEnterpriseUsersUsernameWeekReports, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v5/enterprises/{enterprise}/users/{username}/week_reports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterprise !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise' . '}',
                ObjectSerializer::toPathValue($enterprise),
                $resourcePath
            );
        }
        // path params
        if ($username !== null) {
            $resourcePath = str_replace(
                '{' . 'username' . '}',
                ObjectSerializer::toPathValue($username),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5EnterprisesEnterpriseWeekReports
     *
     * 企业成员周报列表
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $username 用户名(username/login) (optional)
     * @param  int $year 周报所属年 (optional)
     * @param  int $weekIndex 周报所属周 (optional)
     * @param  string $date 周报日期(格式：2019-03-25) (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\WeekReport[]
     */
    public function getV5EnterprisesEnterpriseWeekReports($enterprise, $accessToken = null, $page = '1', $perPage = '20', $username = null, $year = null, $weekIndex = null, $date = null)
    {
        list($response) = $this->getV5EnterprisesEnterpriseWeekReportsWithHttpInfo($enterprise, $accessToken, $page, $perPage, $username, $year, $weekIndex, $date);
        return $response;
    }

    /**
     * Operation getV5EnterprisesEnterpriseWeekReportsWithHttpInfo
     *
     * 企业成员周报列表
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $username 用户名(username/login) (optional)
     * @param  int $year 周报所属年 (optional)
     * @param  int $weekIndex 周报所属周 (optional)
     * @param  string $date 周报日期(格式：2019-03-25) (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\WeekReport[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5EnterprisesEnterpriseWeekReportsWithHttpInfo($enterprise, $accessToken = null, $page = '1', $perPage = '20', $username = null, $year = null, $weekIndex = null, $date = null)
    {
        $returnType = '\Gitee\Model\WeekReport[]';
        $request = $this->getV5EnterprisesEnterpriseWeekReportsRequest($enterprise, $accessToken, $page, $perPage, $username, $year, $weekIndex, $date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\WeekReport[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5EnterprisesEnterpriseWeekReportsAsync
     *
     * 企业成员周报列表
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $username 用户名(username/login) (optional)
     * @param  int $year 周报所属年 (optional)
     * @param  int $weekIndex 周报所属周 (optional)
     * @param  string $date 周报日期(格式：2019-03-25) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5EnterprisesEnterpriseWeekReportsAsync($enterprise, $accessToken = null, $page = '1', $perPage = '20', $username = null, $year = null, $weekIndex = null, $date = null)
    {
        return $this->getV5EnterprisesEnterpriseWeekReportsAsyncWithHttpInfo($enterprise, $accessToken, $page, $perPage, $username, $year, $weekIndex, $date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5EnterprisesEnterpriseWeekReportsAsyncWithHttpInfo
     *
     * 企业成员周报列表
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $username 用户名(username/login) (optional)
     * @param  int $year 周报所属年 (optional)
     * @param  int $weekIndex 周报所属周 (optional)
     * @param  string $date 周报日期(格式：2019-03-25) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5EnterprisesEnterpriseWeekReportsAsyncWithHttpInfo($enterprise, $accessToken = null, $page = '1', $perPage = '20', $username = null, $year = null, $weekIndex = null, $date = null)
    {
        $returnType = '\Gitee\Model\WeekReport[]';
        $request = $this->getV5EnterprisesEnterpriseWeekReportsRequest($enterprise, $accessToken, $page, $perPage, $username, $year, $weekIndex, $date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5EnterprisesEnterpriseWeekReports'
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $username 用户名(username/login) (optional)
     * @param  int $year 周报所属年 (optional)
     * @param  int $weekIndex 周报所属周 (optional)
     * @param  string $date 周报日期(格式：2019-03-25) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5EnterprisesEnterpriseWeekReportsRequest($enterprise, $accessToken = null, $page = '1', $perPage = '20', $username = null, $year = null, $weekIndex = null, $date = null)
    {
        // verify the required parameter 'enterprise' is set
        if ($enterprise === null || (is_array($enterprise) && count($enterprise) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterprise when calling getV5EnterprisesEnterpriseWeekReports'
            );
        }
        if ($perPage !== null && $perPage > 100) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling EnterprisesApi.getV5EnterprisesEnterpriseWeekReports, must be smaller than or equal to 100.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling EnterprisesApi.getV5EnterprisesEnterpriseWeekReports, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v5/enterprises/{enterprise}/week_reports';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }
        // query params
        if ($username !== null) {
            $queryParams['username'] = ObjectSerializer::toQueryValue($username);
        }
        // query params
        if ($year !== null) {
            $queryParams['year'] = ObjectSerializer::toQueryValue($year);
        }
        // query params
        if ($weekIndex !== null) {
            $queryParams['week_index'] = ObjectSerializer::toQueryValue($weekIndex);
        }
        // query params
        if ($date !== null) {
            $queryParams['date'] = ObjectSerializer::toQueryValue($date);
        }

        // path params
        if ($enterprise !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise' . '}',
                ObjectSerializer::toPathValue($enterprise),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5EnterprisesEnterpriseWeekReportsId
     *
     * 周报详情
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  int $id 周报ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\WeekReport
     */
    public function getV5EnterprisesEnterpriseWeekReportsId($enterprise, $id, $accessToken = null)
    {
        list($response) = $this->getV5EnterprisesEnterpriseWeekReportsIdWithHttpInfo($enterprise, $id, $accessToken);
        return $response;
    }

    /**
     * Operation getV5EnterprisesEnterpriseWeekReportsIdWithHttpInfo
     *
     * 周报详情
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  int $id 周报ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\WeekReport, HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5EnterprisesEnterpriseWeekReportsIdWithHttpInfo($enterprise, $id, $accessToken = null)
    {
        $returnType = '\Gitee\Model\WeekReport';
        $request = $this->getV5EnterprisesEnterpriseWeekReportsIdRequest($enterprise, $id, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\WeekReport',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5EnterprisesEnterpriseWeekReportsIdAsync
     *
     * 周报详情
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  int $id 周报ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5EnterprisesEnterpriseWeekReportsIdAsync($enterprise, $id, $accessToken = null)
    {
        return $this->getV5EnterprisesEnterpriseWeekReportsIdAsyncWithHttpInfo($enterprise, $id, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5EnterprisesEnterpriseWeekReportsIdAsyncWithHttpInfo
     *
     * 周报详情
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  int $id 周报ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5EnterprisesEnterpriseWeekReportsIdAsyncWithHttpInfo($enterprise, $id, $accessToken = null)
    {
        $returnType = '\Gitee\Model\WeekReport';
        $request = $this->getV5EnterprisesEnterpriseWeekReportsIdRequest($enterprise, $id, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5EnterprisesEnterpriseWeekReportsId'
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  int $id 周报ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5EnterprisesEnterpriseWeekReportsIdRequest($enterprise, $id, $accessToken = null)
    {
        // verify the required parameter 'enterprise' is set
        if ($enterprise === null || (is_array($enterprise) && count($enterprise) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterprise when calling getV5EnterprisesEnterpriseWeekReportsId'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getV5EnterprisesEnterpriseWeekReportsId'
            );
        }

        $resourcePath = '/v5/enterprises/{enterprise}/week_reports/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($enterprise !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise' . '}',
                ObjectSerializer::toPathValue($enterprise),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5EnterprisesEnterpriseWeekReportsIdComments
     *
     * 某个周报评论列表
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  int $id 周报ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\Note[]
     */
    public function getV5EnterprisesEnterpriseWeekReportsIdComments($enterprise, $id, $accessToken = null, $page = '1', $perPage = '20')
    {
        list($response) = $this->getV5EnterprisesEnterpriseWeekReportsIdCommentsWithHttpInfo($enterprise, $id, $accessToken, $page, $perPage);
        return $response;
    }

    /**
     * Operation getV5EnterprisesEnterpriseWeekReportsIdCommentsWithHttpInfo
     *
     * 某个周报评论列表
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  int $id 周报ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\Note[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5EnterprisesEnterpriseWeekReportsIdCommentsWithHttpInfo($enterprise, $id, $accessToken = null, $page = '1', $perPage = '20')
    {
        $returnType = '\Gitee\Model\Note[]';
        $request = $this->getV5EnterprisesEnterpriseWeekReportsIdCommentsRequest($enterprise, $id, $accessToken, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\Note[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5EnterprisesEnterpriseWeekReportsIdCommentsAsync
     *
     * 某个周报评论列表
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  int $id 周报ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5EnterprisesEnterpriseWeekReportsIdCommentsAsync($enterprise, $id, $accessToken = null, $page = '1', $perPage = '20')
    {
        return $this->getV5EnterprisesEnterpriseWeekReportsIdCommentsAsyncWithHttpInfo($enterprise, $id, $accessToken, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5EnterprisesEnterpriseWeekReportsIdCommentsAsyncWithHttpInfo
     *
     * 某个周报评论列表
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  int $id 周报ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5EnterprisesEnterpriseWeekReportsIdCommentsAsyncWithHttpInfo($enterprise, $id, $accessToken = null, $page = '1', $perPage = '20')
    {
        $returnType = '\Gitee\Model\Note[]';
        $request = $this->getV5EnterprisesEnterpriseWeekReportsIdCommentsRequest($enterprise, $id, $accessToken, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5EnterprisesEnterpriseWeekReportsIdComments'
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  int $id 周报ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5EnterprisesEnterpriseWeekReportsIdCommentsRequest($enterprise, $id, $accessToken = null, $page = '1', $perPage = '20')
    {
        // verify the required parameter 'enterprise' is set
        if ($enterprise === null || (is_array($enterprise) && count($enterprise) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterprise when calling getV5EnterprisesEnterpriseWeekReportsIdComments'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getV5EnterprisesEnterpriseWeekReportsIdComments'
            );
        }
        if ($perPage !== null && $perPage > 100) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling EnterprisesApi.getV5EnterprisesEnterpriseWeekReportsIdComments, must be smaller than or equal to 100.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling EnterprisesApi.getV5EnterprisesEnterpriseWeekReportsIdComments, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v5/enterprises/{enterprise}/week_reports/{id}/comments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterprise !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise' . '}',
                ObjectSerializer::toPathValue($enterprise),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5UserEnterprises
     *
     * 列出授权用户所属的企业
     *
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  bool $admin 只列出授权用户管理的企业 (optional, default to true)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\EnterpriseBasic[]
     */
    public function getV5UserEnterprises($accessToken = null, $page = '1', $perPage = '20', $admin = 'true')
    {
        list($response) = $this->getV5UserEnterprisesWithHttpInfo($accessToken, $page, $perPage, $admin);
        return $response;
    }

    /**
     * Operation getV5UserEnterprisesWithHttpInfo
     *
     * 列出授权用户所属的企业
     *
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  bool $admin 只列出授权用户管理的企业 (optional, default to true)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\EnterpriseBasic[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5UserEnterprisesWithHttpInfo($accessToken = null, $page = '1', $perPage = '20', $admin = 'true')
    {
        $returnType = '\Gitee\Model\EnterpriseBasic[]';
        $request = $this->getV5UserEnterprisesRequest($accessToken, $page, $perPage, $admin);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\EnterpriseBasic[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5UserEnterprisesAsync
     *
     * 列出授权用户所属的企业
     *
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  bool $admin 只列出授权用户管理的企业 (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5UserEnterprisesAsync($accessToken = null, $page = '1', $perPage = '20', $admin = 'true')
    {
        return $this->getV5UserEnterprisesAsyncWithHttpInfo($accessToken, $page, $perPage, $admin)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5UserEnterprisesAsyncWithHttpInfo
     *
     * 列出授权用户所属的企业
     *
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  bool $admin 只列出授权用户管理的企业 (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5UserEnterprisesAsyncWithHttpInfo($accessToken = null, $page = '1', $perPage = '20', $admin = 'true')
    {
        $returnType = '\Gitee\Model\EnterpriseBasic[]';
        $request = $this->getV5UserEnterprisesRequest($accessToken, $page, $perPage, $admin);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5UserEnterprises'
     *
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  bool $admin 只列出授权用户管理的企业 (optional, default to true)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5UserEnterprisesRequest($accessToken = null, $page = '1', $perPage = '20', $admin = 'true')
    {
        if ($perPage !== null && $perPage > 100) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling EnterprisesApi.getV5UserEnterprises, must be smaller than or equal to 100.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling EnterprisesApi.getV5UserEnterprises, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v5/user/enterprises';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }
        // query params
        if ($admin !== null) {
            $queryParams['admin'] = ObjectSerializer::toQueryValue($admin);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchV5EnterprisesEnterpriseWeekReportId
     *
     * 编辑周报
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  int $id 周报ID (required)
     * @param  string $content 周报内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\WeekReport
     */
    public function patchV5EnterprisesEnterpriseWeekReportId($enterprise, $id, $content, $accessToken = null)
    {
        list($response) = $this->patchV5EnterprisesEnterpriseWeekReportIdWithHttpInfo($enterprise, $id, $content, $accessToken);
        return $response;
    }

    /**
     * Operation patchV5EnterprisesEnterpriseWeekReportIdWithHttpInfo
     *
     * 编辑周报
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  int $id 周报ID (required)
     * @param  string $content 周报内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\WeekReport, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchV5EnterprisesEnterpriseWeekReportIdWithHttpInfo($enterprise, $id, $content, $accessToken = null)
    {
        $returnType = '\Gitee\Model\WeekReport';
        $request = $this->patchV5EnterprisesEnterpriseWeekReportIdRequest($enterprise, $id, $content, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\WeekReport',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchV5EnterprisesEnterpriseWeekReportIdAsync
     *
     * 编辑周报
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  int $id 周报ID (required)
     * @param  string $content 周报内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchV5EnterprisesEnterpriseWeekReportIdAsync($enterprise, $id, $content, $accessToken = null)
    {
        return $this->patchV5EnterprisesEnterpriseWeekReportIdAsyncWithHttpInfo($enterprise, $id, $content, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchV5EnterprisesEnterpriseWeekReportIdAsyncWithHttpInfo
     *
     * 编辑周报
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  int $id 周报ID (required)
     * @param  string $content 周报内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchV5EnterprisesEnterpriseWeekReportIdAsyncWithHttpInfo($enterprise, $id, $content, $accessToken = null)
    {
        $returnType = '\Gitee\Model\WeekReport';
        $request = $this->patchV5EnterprisesEnterpriseWeekReportIdRequest($enterprise, $id, $content, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchV5EnterprisesEnterpriseWeekReportId'
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  int $id 周报ID (required)
     * @param  string $content 周报内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function patchV5EnterprisesEnterpriseWeekReportIdRequest($enterprise, $id, $content, $accessToken = null)
    {
        // verify the required parameter 'enterprise' is set
        if ($enterprise === null || (is_array($enterprise) && count($enterprise) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterprise when calling patchV5EnterprisesEnterpriseWeekReportId'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling patchV5EnterprisesEnterpriseWeekReportId'
            );
        }
        // verify the required parameter 'content' is set
        if ($content === null || (is_array($content) && count($content) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content when calling patchV5EnterprisesEnterpriseWeekReportId'
            );
        }

        $resourcePath = '/v5/enterprises/{enterprise}/week_report/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterprise !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise' . '}',
                ObjectSerializer::toPathValue($enterprise),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($content !== null) {
            $formParams['content'] = ObjectSerializer::toFormValue($content);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postV5EnterprisesEnterpriseMembers
     *
     * 添加或邀请企业成员
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $username 需要邀请的用户名(username/login)，username,email至少填写一个 (optional)
     * @param  string $email 要添加邮箱地址，若该邮箱未注册则自动创建帐号。username,email至少填写一个 (optional)
     * @param  string $role 企业角色：member &#x3D;&gt; 普通成员, outsourced &#x3D;&gt; 外包成员, admin &#x3D;&gt; 管理员 (optional, default to member)
     * @param  string $name 企业成员真实姓名（备注） (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postV5EnterprisesEnterpriseMembers($enterprise, $accessToken = null, $username = null, $email = null, $role = 'member', $name = null)
    {
        $this->postV5EnterprisesEnterpriseMembersWithHttpInfo($enterprise, $accessToken, $username, $email, $role, $name);
    }

    /**
     * Operation postV5EnterprisesEnterpriseMembersWithHttpInfo
     *
     * 添加或邀请企业成员
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $username 需要邀请的用户名(username/login)，username,email至少填写一个 (optional)
     * @param  string $email 要添加邮箱地址，若该邮箱未注册则自动创建帐号。username,email至少填写一个 (optional)
     * @param  string $role 企业角色：member &#x3D;&gt; 普通成员, outsourced &#x3D;&gt; 外包成员, admin &#x3D;&gt; 管理员 (optional, default to member)
     * @param  string $name 企业成员真实姓名（备注） (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postV5EnterprisesEnterpriseMembersWithHttpInfo($enterprise, $accessToken = null, $username = null, $email = null, $role = 'member', $name = null)
    {
        $returnType = '';
        $request = $this->postV5EnterprisesEnterpriseMembersRequest($enterprise, $accessToken, $username, $email, $role, $name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postV5EnterprisesEnterpriseMembersAsync
     *
     * 添加或邀请企业成员
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $username 需要邀请的用户名(username/login)，username,email至少填写一个 (optional)
     * @param  string $email 要添加邮箱地址，若该邮箱未注册则自动创建帐号。username,email至少填写一个 (optional)
     * @param  string $role 企业角色：member &#x3D;&gt; 普通成员, outsourced &#x3D;&gt; 外包成员, admin &#x3D;&gt; 管理员 (optional, default to member)
     * @param  string $name 企业成员真实姓名（备注） (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV5EnterprisesEnterpriseMembersAsync($enterprise, $accessToken = null, $username = null, $email = null, $role = 'member', $name = null)
    {
        return $this->postV5EnterprisesEnterpriseMembersAsyncWithHttpInfo($enterprise, $accessToken, $username, $email, $role, $name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postV5EnterprisesEnterpriseMembersAsyncWithHttpInfo
     *
     * 添加或邀请企业成员
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $username 需要邀请的用户名(username/login)，username,email至少填写一个 (optional)
     * @param  string $email 要添加邮箱地址，若该邮箱未注册则自动创建帐号。username,email至少填写一个 (optional)
     * @param  string $role 企业角色：member &#x3D;&gt; 普通成员, outsourced &#x3D;&gt; 外包成员, admin &#x3D;&gt; 管理员 (optional, default to member)
     * @param  string $name 企业成员真实姓名（备注） (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV5EnterprisesEnterpriseMembersAsyncWithHttpInfo($enterprise, $accessToken = null, $username = null, $email = null, $role = 'member', $name = null)
    {
        $returnType = '';
        $request = $this->postV5EnterprisesEnterpriseMembersRequest($enterprise, $accessToken, $username, $email, $role, $name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postV5EnterprisesEnterpriseMembers'
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $username 需要邀请的用户名(username/login)，username,email至少填写一个 (optional)
     * @param  string $email 要添加邮箱地址，若该邮箱未注册则自动创建帐号。username,email至少填写一个 (optional)
     * @param  string $role 企业角色：member &#x3D;&gt; 普通成员, outsourced &#x3D;&gt; 外包成员, admin &#x3D;&gt; 管理员 (optional, default to member)
     * @param  string $name 企业成员真实姓名（备注） (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postV5EnterprisesEnterpriseMembersRequest($enterprise, $accessToken = null, $username = null, $email = null, $role = 'member', $name = null)
    {
        // verify the required parameter 'enterprise' is set
        if ($enterprise === null || (is_array($enterprise) && count($enterprise) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterprise when calling postV5EnterprisesEnterpriseMembers'
            );
        }

        $resourcePath = '/v5/enterprises/{enterprise}/members';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterprise !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise' . '}',
                ObjectSerializer::toPathValue($enterprise),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($username !== null) {
            $formParams['username'] = ObjectSerializer::toFormValue($username);
        }
        // form params
        if ($email !== null) {
            $formParams['email'] = ObjectSerializer::toFormValue($email);
        }
        // form params
        if ($role !== null) {
            $formParams['role'] = ObjectSerializer::toFormValue($role);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postV5EnterprisesEnterpriseWeekReport
     *
     * 新建周报
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  int $year 周报所属年 (required)
     * @param  string $content 周报内容 (required)
     * @param  int $weekIndex 周报所属周 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $date 周报日期(格式：2019-03-25) (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\WeekReport
     */
    public function postV5EnterprisesEnterpriseWeekReport($enterprise, $year, $content, $weekIndex, $accessToken = null, $date = null)
    {
        list($response) = $this->postV5EnterprisesEnterpriseWeekReportWithHttpInfo($enterprise, $year, $content, $weekIndex, $accessToken, $date);
        return $response;
    }

    /**
     * Operation postV5EnterprisesEnterpriseWeekReportWithHttpInfo
     *
     * 新建周报
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  int $year 周报所属年 (required)
     * @param  string $content 周报内容 (required)
     * @param  int $weekIndex 周报所属周 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $date 周报日期(格式：2019-03-25) (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\WeekReport, HTTP status code, HTTP response headers (array of strings)
     */
    public function postV5EnterprisesEnterpriseWeekReportWithHttpInfo($enterprise, $year, $content, $weekIndex, $accessToken = null, $date = null)
    {
        $returnType = '\Gitee\Model\WeekReport';
        $request = $this->postV5EnterprisesEnterpriseWeekReportRequest($enterprise, $year, $content, $weekIndex, $accessToken, $date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\WeekReport',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postV5EnterprisesEnterpriseWeekReportAsync
     *
     * 新建周报
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  int $year 周报所属年 (required)
     * @param  string $content 周报内容 (required)
     * @param  int $weekIndex 周报所属周 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $date 周报日期(格式：2019-03-25) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV5EnterprisesEnterpriseWeekReportAsync($enterprise, $year, $content, $weekIndex, $accessToken = null, $date = null)
    {
        return $this->postV5EnterprisesEnterpriseWeekReportAsyncWithHttpInfo($enterprise, $year, $content, $weekIndex, $accessToken, $date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postV5EnterprisesEnterpriseWeekReportAsyncWithHttpInfo
     *
     * 新建周报
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  int $year 周报所属年 (required)
     * @param  string $content 周报内容 (required)
     * @param  int $weekIndex 周报所属周 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $date 周报日期(格式：2019-03-25) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV5EnterprisesEnterpriseWeekReportAsyncWithHttpInfo($enterprise, $year, $content, $weekIndex, $accessToken = null, $date = null)
    {
        $returnType = '\Gitee\Model\WeekReport';
        $request = $this->postV5EnterprisesEnterpriseWeekReportRequest($enterprise, $year, $content, $weekIndex, $accessToken, $date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postV5EnterprisesEnterpriseWeekReport'
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  int $year 周报所属年 (required)
     * @param  string $content 周报内容 (required)
     * @param  int $weekIndex 周报所属周 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $date 周报日期(格式：2019-03-25) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postV5EnterprisesEnterpriseWeekReportRequest($enterprise, $year, $content, $weekIndex, $accessToken = null, $date = null)
    {
        // verify the required parameter 'enterprise' is set
        if ($enterprise === null || (is_array($enterprise) && count($enterprise) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterprise when calling postV5EnterprisesEnterpriseWeekReport'
            );
        }
        // verify the required parameter 'year' is set
        if ($year === null || (is_array($year) && count($year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $year when calling postV5EnterprisesEnterpriseWeekReport'
            );
        }
        // verify the required parameter 'content' is set
        if ($content === null || (is_array($content) && count($content) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content when calling postV5EnterprisesEnterpriseWeekReport'
            );
        }
        // verify the required parameter 'weekIndex' is set
        if ($weekIndex === null || (is_array($weekIndex) && count($weekIndex) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $weekIndex when calling postV5EnterprisesEnterpriseWeekReport'
            );
        }

        $resourcePath = '/v5/enterprises/{enterprise}/week_report';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterprise !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise' . '}',
                ObjectSerializer::toPathValue($enterprise),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($year !== null) {
            $formParams['year'] = ObjectSerializer::toFormValue($year);
        }
        // form params
        if ($content !== null) {
            $formParams['content'] = ObjectSerializer::toFormValue($content);
        }
        // form params
        if ($weekIndex !== null) {
            $formParams['week_index'] = ObjectSerializer::toFormValue($weekIndex);
        }
        // form params
        if ($date !== null) {
            $formParams['date'] = ObjectSerializer::toFormValue($date);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postV5EnterprisesEnterpriseWeekReportsIdComment
     *
     * 评论周报
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  int $id 周报ID (required)
     * @param  string $body 评论的内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\Note
     */
    public function postV5EnterprisesEnterpriseWeekReportsIdComment($enterprise, $id, $body, $accessToken = null)
    {
        list($response) = $this->postV5EnterprisesEnterpriseWeekReportsIdCommentWithHttpInfo($enterprise, $id, $body, $accessToken);
        return $response;
    }

    /**
     * Operation postV5EnterprisesEnterpriseWeekReportsIdCommentWithHttpInfo
     *
     * 评论周报
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  int $id 周报ID (required)
     * @param  string $body 评论的内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\Note, HTTP status code, HTTP response headers (array of strings)
     */
    public function postV5EnterprisesEnterpriseWeekReportsIdCommentWithHttpInfo($enterprise, $id, $body, $accessToken = null)
    {
        $returnType = '\Gitee\Model\Note';
        $request = $this->postV5EnterprisesEnterpriseWeekReportsIdCommentRequest($enterprise, $id, $body, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\Note',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postV5EnterprisesEnterpriseWeekReportsIdCommentAsync
     *
     * 评论周报
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  int $id 周报ID (required)
     * @param  string $body 评论的内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV5EnterprisesEnterpriseWeekReportsIdCommentAsync($enterprise, $id, $body, $accessToken = null)
    {
        return $this->postV5EnterprisesEnterpriseWeekReportsIdCommentAsyncWithHttpInfo($enterprise, $id, $body, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postV5EnterprisesEnterpriseWeekReportsIdCommentAsyncWithHttpInfo
     *
     * 评论周报
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  int $id 周报ID (required)
     * @param  string $body 评论的内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV5EnterprisesEnterpriseWeekReportsIdCommentAsyncWithHttpInfo($enterprise, $id, $body, $accessToken = null)
    {
        $returnType = '\Gitee\Model\Note';
        $request = $this->postV5EnterprisesEnterpriseWeekReportsIdCommentRequest($enterprise, $id, $body, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postV5EnterprisesEnterpriseWeekReportsIdComment'
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  int $id 周报ID (required)
     * @param  string $body 评论的内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postV5EnterprisesEnterpriseWeekReportsIdCommentRequest($enterprise, $id, $body, $accessToken = null)
    {
        // verify the required parameter 'enterprise' is set
        if ($enterprise === null || (is_array($enterprise) && count($enterprise) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterprise when calling postV5EnterprisesEnterpriseWeekReportsIdComment'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling postV5EnterprisesEnterpriseWeekReportsIdComment'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postV5EnterprisesEnterpriseWeekReportsIdComment'
            );
        }

        $resourcePath = '/v5/enterprises/{enterprise}/week_reports/{id}/comment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterprise !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise' . '}',
                ObjectSerializer::toPathValue($enterprise),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($body !== null) {
            $formParams['body'] = ObjectSerializer::toFormValue($body);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putV5EnterprisesEnterpriseMembersUsername
     *
     * 修改企业成员权限或备注
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $role 企业角色：member &#x3D;&gt; 普通成员, outsourced &#x3D;&gt; 外包成员, admin &#x3D;&gt; 管理员 (optional, default to member)
     * @param  bool $active 是否可访问企业资源，默认:是。（若选否则禁止该用户访问企业资源） (optional, default to true)
     * @param  string $name 企业成员真实姓名（备注） (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\EnterpriseMember
     */
    public function putV5EnterprisesEnterpriseMembersUsername($enterprise, $username, $accessToken = null, $role = 'member', $active = 'true', $name = null)
    {
        list($response) = $this->putV5EnterprisesEnterpriseMembersUsernameWithHttpInfo($enterprise, $username, $accessToken, $role, $active, $name);
        return $response;
    }

    /**
     * Operation putV5EnterprisesEnterpriseMembersUsernameWithHttpInfo
     *
     * 修改企业成员权限或备注
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $role 企业角色：member &#x3D;&gt; 普通成员, outsourced &#x3D;&gt; 外包成员, admin &#x3D;&gt; 管理员 (optional, default to member)
     * @param  bool $active 是否可访问企业资源，默认:是。（若选否则禁止该用户访问企业资源） (optional, default to true)
     * @param  string $name 企业成员真实姓名（备注） (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\EnterpriseMember, HTTP status code, HTTP response headers (array of strings)
     */
    public function putV5EnterprisesEnterpriseMembersUsernameWithHttpInfo($enterprise, $username, $accessToken = null, $role = 'member', $active = 'true', $name = null)
    {
        $returnType = '\Gitee\Model\EnterpriseMember';
        $request = $this->putV5EnterprisesEnterpriseMembersUsernameRequest($enterprise, $username, $accessToken, $role, $active, $name);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\EnterpriseMember',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putV5EnterprisesEnterpriseMembersUsernameAsync
     *
     * 修改企业成员权限或备注
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $role 企业角色：member &#x3D;&gt; 普通成员, outsourced &#x3D;&gt; 外包成员, admin &#x3D;&gt; 管理员 (optional, default to member)
     * @param  bool $active 是否可访问企业资源，默认:是。（若选否则禁止该用户访问企业资源） (optional, default to true)
     * @param  string $name 企业成员真实姓名（备注） (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putV5EnterprisesEnterpriseMembersUsernameAsync($enterprise, $username, $accessToken = null, $role = 'member', $active = 'true', $name = null)
    {
        return $this->putV5EnterprisesEnterpriseMembersUsernameAsyncWithHttpInfo($enterprise, $username, $accessToken, $role, $active, $name)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putV5EnterprisesEnterpriseMembersUsernameAsyncWithHttpInfo
     *
     * 修改企业成员权限或备注
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $role 企业角色：member &#x3D;&gt; 普通成员, outsourced &#x3D;&gt; 外包成员, admin &#x3D;&gt; 管理员 (optional, default to member)
     * @param  bool $active 是否可访问企业资源，默认:是。（若选否则禁止该用户访问企业资源） (optional, default to true)
     * @param  string $name 企业成员真实姓名（备注） (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putV5EnterprisesEnterpriseMembersUsernameAsyncWithHttpInfo($enterprise, $username, $accessToken = null, $role = 'member', $active = 'true', $name = null)
    {
        $returnType = '\Gitee\Model\EnterpriseMember';
        $request = $this->putV5EnterprisesEnterpriseMembersUsernameRequest($enterprise, $username, $accessToken, $role, $active, $name);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putV5EnterprisesEnterpriseMembersUsername'
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $role 企业角色：member &#x3D;&gt; 普通成员, outsourced &#x3D;&gt; 外包成员, admin &#x3D;&gt; 管理员 (optional, default to member)
     * @param  bool $active 是否可访问企业资源，默认:是。（若选否则禁止该用户访问企业资源） (optional, default to true)
     * @param  string $name 企业成员真实姓名（备注） (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putV5EnterprisesEnterpriseMembersUsernameRequest($enterprise, $username, $accessToken = null, $role = 'member', $active = 'true', $name = null)
    {
        // verify the required parameter 'enterprise' is set
        if ($enterprise === null || (is_array($enterprise) && count($enterprise) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterprise when calling putV5EnterprisesEnterpriseMembersUsername'
            );
        }
        // verify the required parameter 'username' is set
        if ($username === null || (is_array($username) && count($username) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $username when calling putV5EnterprisesEnterpriseMembersUsername'
            );
        }

        $resourcePath = '/v5/enterprises/{enterprise}/members/{username}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterprise !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise' . '}',
                ObjectSerializer::toPathValue($enterprise),
                $resourcePath
            );
        }
        // path params
        if ($username !== null) {
            $resourcePath = str_replace(
                '{' . 'username' . '}',
                ObjectSerializer::toPathValue($username),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($role !== null) {
            $formParams['role'] = ObjectSerializer::toFormValue($role);
        }
        // form params
        if ($active !== null) {
            $formParams['active'] = ObjectSerializer::toFormValue($active);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
