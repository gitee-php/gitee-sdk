<?php
/**
 * IssuesApi
 * PHP version 5
 *
 * @category Class
 * @package  Gitee
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * Gitee SDK for PHP
 *
 * OpenAPI spec version: 5.4.85
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.42
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Gitee\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Gitee\ApiException;
use Gitee\Configuration;
use Gitee\HeaderSelector;
use Gitee\ObjectSerializer;

/**
 * IssuesApi Class Doc Comment
 *
 * @category Class
 * @package  Gitee
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IssuesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteV5ReposOwnerRepoIssuesCommentsId
     *
     * 删除Issue某条评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id 评论的ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteV5ReposOwnerRepoIssuesCommentsId($owner, $repo, $id, $accessToken = null)
    {
        $this->deleteV5ReposOwnerRepoIssuesCommentsIdWithHttpInfo($owner, $repo, $id, $accessToken);
    }

    /**
     * Operation deleteV5ReposOwnerRepoIssuesCommentsIdWithHttpInfo
     *
     * 删除Issue某条评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id 评论的ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteV5ReposOwnerRepoIssuesCommentsIdWithHttpInfo($owner, $repo, $id, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteV5ReposOwnerRepoIssuesCommentsIdRequest($owner, $repo, $id, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteV5ReposOwnerRepoIssuesCommentsIdAsync
     *
     * 删除Issue某条评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id 评论的ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteV5ReposOwnerRepoIssuesCommentsIdAsync($owner, $repo, $id, $accessToken = null)
    {
        return $this->deleteV5ReposOwnerRepoIssuesCommentsIdAsyncWithHttpInfo($owner, $repo, $id, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteV5ReposOwnerRepoIssuesCommentsIdAsyncWithHttpInfo
     *
     * 删除Issue某条评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id 评论的ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteV5ReposOwnerRepoIssuesCommentsIdAsyncWithHttpInfo($owner, $repo, $id, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteV5ReposOwnerRepoIssuesCommentsIdRequest($owner, $repo, $id, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteV5ReposOwnerRepoIssuesCommentsId'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id 评论的ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteV5ReposOwnerRepoIssuesCommentsIdRequest($owner, $repo, $id, $accessToken = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling deleteV5ReposOwnerRepoIssuesCommentsId'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling deleteV5ReposOwnerRepoIssuesCommentsId'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteV5ReposOwnerRepoIssuesCommentsId'
            );
        }

        $resourcePath = '/v5/repos/{owner}/{repo}/issues/comments/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5EnterprisesEnterpriseIssues
     *
     * 获取某个企业的所有Issues
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $state Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open (optional, default to open)
     * @param  string $labels 用逗号分开的标签。如: bug,performance (optional)
     * @param  string $sort 排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at (optional, default to created)
     * @param  string $direction 排序方式: 升序(asc)，降序(desc)。默认: desc (optional, default to desc)
     * @param  string $since 起始的更新时间，要求时间格式为 ISO 8601 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $schedule 计划开始日期，格式：20181006T173008+80-20181007T173008+80（区间），或者 -20181007T173008+80（小于20181007T173008+80），或者 20181006T173008+80-（大于20181006T173008+80），要求时间格式为20181006T173008+80 (optional)
     * @param  string $deadline 计划截止日期，格式同上 (optional)
     * @param  string $createdAt 任务创建时间，格式同上 (optional)
     * @param  string $finishedAt 任务完成时间，即任务最后一次转为已完成状态的时间点。格式同上 (optional)
     * @param  string $milestone 根据里程碑标题。none为没里程碑的，*为所有带里程碑的 (optional)
     * @param  string $assignee 用户的username。 none为没指派者, *为所有带有指派者的 (optional)
     * @param  string $creator 创建Issues的用户username (optional)
     * @param  string $program 所属项目名称。none为没所属有项目的，*为所有带所属项目的 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\Issue[]
     */
    public function getV5EnterprisesEnterpriseIssues($enterprise, $accessToken = null, $state = 'open', $labels = null, $sort = 'created', $direction = 'desc', $since = null, $page = '1', $perPage = '20', $schedule = null, $deadline = null, $createdAt = null, $finishedAt = null, $milestone = null, $assignee = null, $creator = null, $program = null)
    {
        list($response) = $this->getV5EnterprisesEnterpriseIssuesWithHttpInfo($enterprise, $accessToken, $state, $labels, $sort, $direction, $since, $page, $perPage, $schedule, $deadline, $createdAt, $finishedAt, $milestone, $assignee, $creator, $program);
        return $response;
    }

    /**
     * Operation getV5EnterprisesEnterpriseIssuesWithHttpInfo
     *
     * 获取某个企业的所有Issues
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $state Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open (optional, default to open)
     * @param  string $labels 用逗号分开的标签。如: bug,performance (optional)
     * @param  string $sort 排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at (optional, default to created)
     * @param  string $direction 排序方式: 升序(asc)，降序(desc)。默认: desc (optional, default to desc)
     * @param  string $since 起始的更新时间，要求时间格式为 ISO 8601 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $schedule 计划开始日期，格式：20181006T173008+80-20181007T173008+80（区间），或者 -20181007T173008+80（小于20181007T173008+80），或者 20181006T173008+80-（大于20181006T173008+80），要求时间格式为20181006T173008+80 (optional)
     * @param  string $deadline 计划截止日期，格式同上 (optional)
     * @param  string $createdAt 任务创建时间，格式同上 (optional)
     * @param  string $finishedAt 任务完成时间，即任务最后一次转为已完成状态的时间点。格式同上 (optional)
     * @param  string $milestone 根据里程碑标题。none为没里程碑的，*为所有带里程碑的 (optional)
     * @param  string $assignee 用户的username。 none为没指派者, *为所有带有指派者的 (optional)
     * @param  string $creator 创建Issues的用户username (optional)
     * @param  string $program 所属项目名称。none为没所属有项目的，*为所有带所属项目的 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\Issue[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5EnterprisesEnterpriseIssuesWithHttpInfo($enterprise, $accessToken = null, $state = 'open', $labels = null, $sort = 'created', $direction = 'desc', $since = null, $page = '1', $perPage = '20', $schedule = null, $deadline = null, $createdAt = null, $finishedAt = null, $milestone = null, $assignee = null, $creator = null, $program = null)
    {
        $returnType = '\Gitee\Model\Issue[]';
        $request = $this->getV5EnterprisesEnterpriseIssuesRequest($enterprise, $accessToken, $state, $labels, $sort, $direction, $since, $page, $perPage, $schedule, $deadline, $createdAt, $finishedAt, $milestone, $assignee, $creator, $program);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\Issue[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5EnterprisesEnterpriseIssuesAsync
     *
     * 获取某个企业的所有Issues
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $state Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open (optional, default to open)
     * @param  string $labels 用逗号分开的标签。如: bug,performance (optional)
     * @param  string $sort 排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at (optional, default to created)
     * @param  string $direction 排序方式: 升序(asc)，降序(desc)。默认: desc (optional, default to desc)
     * @param  string $since 起始的更新时间，要求时间格式为 ISO 8601 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $schedule 计划开始日期，格式：20181006T173008+80-20181007T173008+80（区间），或者 -20181007T173008+80（小于20181007T173008+80），或者 20181006T173008+80-（大于20181006T173008+80），要求时间格式为20181006T173008+80 (optional)
     * @param  string $deadline 计划截止日期，格式同上 (optional)
     * @param  string $createdAt 任务创建时间，格式同上 (optional)
     * @param  string $finishedAt 任务完成时间，即任务最后一次转为已完成状态的时间点。格式同上 (optional)
     * @param  string $milestone 根据里程碑标题。none为没里程碑的，*为所有带里程碑的 (optional)
     * @param  string $assignee 用户的username。 none为没指派者, *为所有带有指派者的 (optional)
     * @param  string $creator 创建Issues的用户username (optional)
     * @param  string $program 所属项目名称。none为没所属有项目的，*为所有带所属项目的 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5EnterprisesEnterpriseIssuesAsync($enterprise, $accessToken = null, $state = 'open', $labels = null, $sort = 'created', $direction = 'desc', $since = null, $page = '1', $perPage = '20', $schedule = null, $deadline = null, $createdAt = null, $finishedAt = null, $milestone = null, $assignee = null, $creator = null, $program = null)
    {
        return $this->getV5EnterprisesEnterpriseIssuesAsyncWithHttpInfo($enterprise, $accessToken, $state, $labels, $sort, $direction, $since, $page, $perPage, $schedule, $deadline, $createdAt, $finishedAt, $milestone, $assignee, $creator, $program)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5EnterprisesEnterpriseIssuesAsyncWithHttpInfo
     *
     * 获取某个企业的所有Issues
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $state Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open (optional, default to open)
     * @param  string $labels 用逗号分开的标签。如: bug,performance (optional)
     * @param  string $sort 排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at (optional, default to created)
     * @param  string $direction 排序方式: 升序(asc)，降序(desc)。默认: desc (optional, default to desc)
     * @param  string $since 起始的更新时间，要求时间格式为 ISO 8601 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $schedule 计划开始日期，格式：20181006T173008+80-20181007T173008+80（区间），或者 -20181007T173008+80（小于20181007T173008+80），或者 20181006T173008+80-（大于20181006T173008+80），要求时间格式为20181006T173008+80 (optional)
     * @param  string $deadline 计划截止日期，格式同上 (optional)
     * @param  string $createdAt 任务创建时间，格式同上 (optional)
     * @param  string $finishedAt 任务完成时间，即任务最后一次转为已完成状态的时间点。格式同上 (optional)
     * @param  string $milestone 根据里程碑标题。none为没里程碑的，*为所有带里程碑的 (optional)
     * @param  string $assignee 用户的username。 none为没指派者, *为所有带有指派者的 (optional)
     * @param  string $creator 创建Issues的用户username (optional)
     * @param  string $program 所属项目名称。none为没所属有项目的，*为所有带所属项目的 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5EnterprisesEnterpriseIssuesAsyncWithHttpInfo($enterprise, $accessToken = null, $state = 'open', $labels = null, $sort = 'created', $direction = 'desc', $since = null, $page = '1', $perPage = '20', $schedule = null, $deadline = null, $createdAt = null, $finishedAt = null, $milestone = null, $assignee = null, $creator = null, $program = null)
    {
        $returnType = '\Gitee\Model\Issue[]';
        $request = $this->getV5EnterprisesEnterpriseIssuesRequest($enterprise, $accessToken, $state, $labels, $sort, $direction, $since, $page, $perPage, $schedule, $deadline, $createdAt, $finishedAt, $milestone, $assignee, $creator, $program);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5EnterprisesEnterpriseIssues'
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $state Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open (optional, default to open)
     * @param  string $labels 用逗号分开的标签。如: bug,performance (optional)
     * @param  string $sort 排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at (optional, default to created)
     * @param  string $direction 排序方式: 升序(asc)，降序(desc)。默认: desc (optional, default to desc)
     * @param  string $since 起始的更新时间，要求时间格式为 ISO 8601 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $schedule 计划开始日期，格式：20181006T173008+80-20181007T173008+80（区间），或者 -20181007T173008+80（小于20181007T173008+80），或者 20181006T173008+80-（大于20181006T173008+80），要求时间格式为20181006T173008+80 (optional)
     * @param  string $deadline 计划截止日期，格式同上 (optional)
     * @param  string $createdAt 任务创建时间，格式同上 (optional)
     * @param  string $finishedAt 任务完成时间，即任务最后一次转为已完成状态的时间点。格式同上 (optional)
     * @param  string $milestone 根据里程碑标题。none为没里程碑的，*为所有带里程碑的 (optional)
     * @param  string $assignee 用户的username。 none为没指派者, *为所有带有指派者的 (optional)
     * @param  string $creator 创建Issues的用户username (optional)
     * @param  string $program 所属项目名称。none为没所属有项目的，*为所有带所属项目的 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5EnterprisesEnterpriseIssuesRequest($enterprise, $accessToken = null, $state = 'open', $labels = null, $sort = 'created', $direction = 'desc', $since = null, $page = '1', $perPage = '20', $schedule = null, $deadline = null, $createdAt = null, $finishedAt = null, $milestone = null, $assignee = null, $creator = null, $program = null)
    {
        // verify the required parameter 'enterprise' is set
        if ($enterprise === null || (is_array($enterprise) && count($enterprise) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterprise when calling getV5EnterprisesEnterpriseIssues'
            );
        }
        if ($perPage !== null && $perPage > 100) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling IssuesApi.getV5EnterprisesEnterpriseIssues, must be smaller than or equal to 100.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling IssuesApi.getV5EnterprisesEnterpriseIssues, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v5/enterprises/{enterprise}/issues';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state);
        }
        // query params
        if ($labels !== null) {
            $queryParams['labels'] = ObjectSerializer::toQueryValue($labels);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($since !== null) {
            $queryParams['since'] = ObjectSerializer::toQueryValue($since);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }
        // query params
        if ($schedule !== null) {
            $queryParams['schedule'] = ObjectSerializer::toQueryValue($schedule);
        }
        // query params
        if ($deadline !== null) {
            $queryParams['deadline'] = ObjectSerializer::toQueryValue($deadline);
        }
        // query params
        if ($createdAt !== null) {
            $queryParams['created_at'] = ObjectSerializer::toQueryValue($createdAt);
        }
        // query params
        if ($finishedAt !== null) {
            $queryParams['finished_at'] = ObjectSerializer::toQueryValue($finishedAt);
        }
        // query params
        if ($milestone !== null) {
            $queryParams['milestone'] = ObjectSerializer::toQueryValue($milestone);
        }
        // query params
        if ($assignee !== null) {
            $queryParams['assignee'] = ObjectSerializer::toQueryValue($assignee);
        }
        // query params
        if ($creator !== null) {
            $queryParams['creator'] = ObjectSerializer::toQueryValue($creator);
        }
        // query params
        if ($program !== null) {
            $queryParams['program'] = ObjectSerializer::toQueryValue($program);
        }

        // path params
        if ($enterprise !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise' . '}',
                ObjectSerializer::toPathValue($enterprise),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5EnterprisesEnterpriseIssuesNumber
     *
     * 获取企业的某个Issue
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\Issue
     */
    public function getV5EnterprisesEnterpriseIssuesNumber($enterprise, $number, $accessToken = null)
    {
        list($response) = $this->getV5EnterprisesEnterpriseIssuesNumberWithHttpInfo($enterprise, $number, $accessToken);
        return $response;
    }

    /**
     * Operation getV5EnterprisesEnterpriseIssuesNumberWithHttpInfo
     *
     * 获取企业的某个Issue
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\Issue, HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5EnterprisesEnterpriseIssuesNumberWithHttpInfo($enterprise, $number, $accessToken = null)
    {
        $returnType = '\Gitee\Model\Issue';
        $request = $this->getV5EnterprisesEnterpriseIssuesNumberRequest($enterprise, $number, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\Issue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5EnterprisesEnterpriseIssuesNumberAsync
     *
     * 获取企业的某个Issue
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5EnterprisesEnterpriseIssuesNumberAsync($enterprise, $number, $accessToken = null)
    {
        return $this->getV5EnterprisesEnterpriseIssuesNumberAsyncWithHttpInfo($enterprise, $number, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5EnterprisesEnterpriseIssuesNumberAsyncWithHttpInfo
     *
     * 获取企业的某个Issue
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5EnterprisesEnterpriseIssuesNumberAsyncWithHttpInfo($enterprise, $number, $accessToken = null)
    {
        $returnType = '\Gitee\Model\Issue';
        $request = $this->getV5EnterprisesEnterpriseIssuesNumberRequest($enterprise, $number, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5EnterprisesEnterpriseIssuesNumber'
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5EnterprisesEnterpriseIssuesNumberRequest($enterprise, $number, $accessToken = null)
    {
        // verify the required parameter 'enterprise' is set
        if ($enterprise === null || (is_array($enterprise) && count($enterprise) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterprise when calling getV5EnterprisesEnterpriseIssuesNumber'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling getV5EnterprisesEnterpriseIssuesNumber'
            );
        }

        $resourcePath = '/v5/enterprises/{enterprise}/issues/{number}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($enterprise !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise' . '}',
                ObjectSerializer::toPathValue($enterprise),
                $resourcePath
            );
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5EnterprisesEnterpriseIssuesNumberComments
     *
     * 获取企业某个Issue所有评论
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\Note[]
     */
    public function getV5EnterprisesEnterpriseIssuesNumberComments($enterprise, $number, $accessToken = null, $page = '1', $perPage = '20')
    {
        list($response) = $this->getV5EnterprisesEnterpriseIssuesNumberCommentsWithHttpInfo($enterprise, $number, $accessToken, $page, $perPage);
        return $response;
    }

    /**
     * Operation getV5EnterprisesEnterpriseIssuesNumberCommentsWithHttpInfo
     *
     * 获取企业某个Issue所有评论
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\Note[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5EnterprisesEnterpriseIssuesNumberCommentsWithHttpInfo($enterprise, $number, $accessToken = null, $page = '1', $perPage = '20')
    {
        $returnType = '\Gitee\Model\Note[]';
        $request = $this->getV5EnterprisesEnterpriseIssuesNumberCommentsRequest($enterprise, $number, $accessToken, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\Note[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5EnterprisesEnterpriseIssuesNumberCommentsAsync
     *
     * 获取企业某个Issue所有评论
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5EnterprisesEnterpriseIssuesNumberCommentsAsync($enterprise, $number, $accessToken = null, $page = '1', $perPage = '20')
    {
        return $this->getV5EnterprisesEnterpriseIssuesNumberCommentsAsyncWithHttpInfo($enterprise, $number, $accessToken, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5EnterprisesEnterpriseIssuesNumberCommentsAsyncWithHttpInfo
     *
     * 获取企业某个Issue所有评论
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5EnterprisesEnterpriseIssuesNumberCommentsAsyncWithHttpInfo($enterprise, $number, $accessToken = null, $page = '1', $perPage = '20')
    {
        $returnType = '\Gitee\Model\Note[]';
        $request = $this->getV5EnterprisesEnterpriseIssuesNumberCommentsRequest($enterprise, $number, $accessToken, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5EnterprisesEnterpriseIssuesNumberComments'
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5EnterprisesEnterpriseIssuesNumberCommentsRequest($enterprise, $number, $accessToken = null, $page = '1', $perPage = '20')
    {
        // verify the required parameter 'enterprise' is set
        if ($enterprise === null || (is_array($enterprise) && count($enterprise) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterprise when calling getV5EnterprisesEnterpriseIssuesNumberComments'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling getV5EnterprisesEnterpriseIssuesNumberComments'
            );
        }
        if ($perPage !== null && $perPage > 100) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling IssuesApi.getV5EnterprisesEnterpriseIssuesNumberComments, must be smaller than or equal to 100.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling IssuesApi.getV5EnterprisesEnterpriseIssuesNumberComments, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v5/enterprises/{enterprise}/issues/{number}/comments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterprise !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise' . '}',
                ObjectSerializer::toPathValue($enterprise),
                $resourcePath
            );
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5EnterprisesEnterpriseIssuesNumberLabels
     *
     * 获取企业某个Issue所有标签
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\Label[]
     */
    public function getV5EnterprisesEnterpriseIssuesNumberLabels($enterprise, $number, $accessToken = null, $page = '1', $perPage = '20')
    {
        list($response) = $this->getV5EnterprisesEnterpriseIssuesNumberLabelsWithHttpInfo($enterprise, $number, $accessToken, $page, $perPage);
        return $response;
    }

    /**
     * Operation getV5EnterprisesEnterpriseIssuesNumberLabelsWithHttpInfo
     *
     * 获取企业某个Issue所有标签
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\Label[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5EnterprisesEnterpriseIssuesNumberLabelsWithHttpInfo($enterprise, $number, $accessToken = null, $page = '1', $perPage = '20')
    {
        $returnType = '\Gitee\Model\Label[]';
        $request = $this->getV5EnterprisesEnterpriseIssuesNumberLabelsRequest($enterprise, $number, $accessToken, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\Label[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5EnterprisesEnterpriseIssuesNumberLabelsAsync
     *
     * 获取企业某个Issue所有标签
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5EnterprisesEnterpriseIssuesNumberLabelsAsync($enterprise, $number, $accessToken = null, $page = '1', $perPage = '20')
    {
        return $this->getV5EnterprisesEnterpriseIssuesNumberLabelsAsyncWithHttpInfo($enterprise, $number, $accessToken, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5EnterprisesEnterpriseIssuesNumberLabelsAsyncWithHttpInfo
     *
     * 获取企业某个Issue所有标签
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5EnterprisesEnterpriseIssuesNumberLabelsAsyncWithHttpInfo($enterprise, $number, $accessToken = null, $page = '1', $perPage = '20')
    {
        $returnType = '\Gitee\Model\Label[]';
        $request = $this->getV5EnterprisesEnterpriseIssuesNumberLabelsRequest($enterprise, $number, $accessToken, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5EnterprisesEnterpriseIssuesNumberLabels'
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5EnterprisesEnterpriseIssuesNumberLabelsRequest($enterprise, $number, $accessToken = null, $page = '1', $perPage = '20')
    {
        // verify the required parameter 'enterprise' is set
        if ($enterprise === null || (is_array($enterprise) && count($enterprise) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterprise when calling getV5EnterprisesEnterpriseIssuesNumberLabels'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling getV5EnterprisesEnterpriseIssuesNumberLabels'
            );
        }
        if ($perPage !== null && $perPage > 100) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling IssuesApi.getV5EnterprisesEnterpriseIssuesNumberLabels, must be smaller than or equal to 100.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling IssuesApi.getV5EnterprisesEnterpriseIssuesNumberLabels, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v5/enterprises/{enterprise}/issues/{number}/labels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($enterprise !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise' . '}',
                ObjectSerializer::toPathValue($enterprise),
                $resourcePath
            );
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5EnterprisesEnterpriseIssuesNumberPullRequests
     *
     * 获取企业 issue 关联的 Pull Requests
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\PullRequest[]
     */
    public function getV5EnterprisesEnterpriseIssuesNumberPullRequests($enterprise, $number, $accessToken = null)
    {
        list($response) = $this->getV5EnterprisesEnterpriseIssuesNumberPullRequestsWithHttpInfo($enterprise, $number, $accessToken);
        return $response;
    }

    /**
     * Operation getV5EnterprisesEnterpriseIssuesNumberPullRequestsWithHttpInfo
     *
     * 获取企业 issue 关联的 Pull Requests
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\PullRequest[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5EnterprisesEnterpriseIssuesNumberPullRequestsWithHttpInfo($enterprise, $number, $accessToken = null)
    {
        $returnType = '\Gitee\Model\PullRequest[]';
        $request = $this->getV5EnterprisesEnterpriseIssuesNumberPullRequestsRequest($enterprise, $number, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\PullRequest[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5EnterprisesEnterpriseIssuesNumberPullRequestsAsync
     *
     * 获取企业 issue 关联的 Pull Requests
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5EnterprisesEnterpriseIssuesNumberPullRequestsAsync($enterprise, $number, $accessToken = null)
    {
        return $this->getV5EnterprisesEnterpriseIssuesNumberPullRequestsAsyncWithHttpInfo($enterprise, $number, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5EnterprisesEnterpriseIssuesNumberPullRequestsAsyncWithHttpInfo
     *
     * 获取企业 issue 关联的 Pull Requests
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5EnterprisesEnterpriseIssuesNumberPullRequestsAsyncWithHttpInfo($enterprise, $number, $accessToken = null)
    {
        $returnType = '\Gitee\Model\PullRequest[]';
        $request = $this->getV5EnterprisesEnterpriseIssuesNumberPullRequestsRequest($enterprise, $number, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5EnterprisesEnterpriseIssuesNumberPullRequests'
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5EnterprisesEnterpriseIssuesNumberPullRequestsRequest($enterprise, $number, $accessToken = null)
    {
        // verify the required parameter 'enterprise' is set
        if ($enterprise === null || (is_array($enterprise) && count($enterprise) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterprise when calling getV5EnterprisesEnterpriseIssuesNumberPullRequests'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling getV5EnterprisesEnterpriseIssuesNumberPullRequests'
            );
        }

        $resourcePath = '/v5/enterprises/{enterprise}/issues/{number}/pull_requests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($enterprise !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise' . '}',
                ObjectSerializer::toPathValue($enterprise),
                $resourcePath
            );
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5Issues
     *
     * 获取当前授权用户的所有Issues
     *
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $filter 筛选参数: 授权用户负责的(assigned)，授权用户创建的(created)，包含前两者的(all)。默认: assigned (optional, default to assigned)
     * @param  string $state Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open (optional, default to open)
     * @param  string $labels 用逗号分开的标签。如: bug,performance (optional)
     * @param  string $sort 排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at (optional, default to created)
     * @param  string $direction 排序方式: 升序(asc)，降序(desc)。默认: desc (optional, default to desc)
     * @param  string $since 起始的更新时间，要求时间格式为 ISO 8601 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $schedule 计划开始日期，格式：20181006T173008+80-20181007T173008+80（区间），或者 -20181007T173008+80（小于20181007T173008+80），或者 20181006T173008+80-（大于20181006T173008+80），要求时间格式为20181006T173008+80 (optional)
     * @param  string $deadline 计划截止日期，格式同上 (optional)
     * @param  string $createdAt 任务创建时间，格式同上 (optional)
     * @param  string $finishedAt 任务完成时间，即任务最后一次转为已完成状态的时间点。格式同上 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\Issue[]
     */
    public function getV5Issues($accessToken = null, $filter = 'assigned', $state = 'open', $labels = null, $sort = 'created', $direction = 'desc', $since = null, $page = '1', $perPage = '20', $schedule = null, $deadline = null, $createdAt = null, $finishedAt = null)
    {
        list($response) = $this->getV5IssuesWithHttpInfo($accessToken, $filter, $state, $labels, $sort, $direction, $since, $page, $perPage, $schedule, $deadline, $createdAt, $finishedAt);
        return $response;
    }

    /**
     * Operation getV5IssuesWithHttpInfo
     *
     * 获取当前授权用户的所有Issues
     *
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $filter 筛选参数: 授权用户负责的(assigned)，授权用户创建的(created)，包含前两者的(all)。默认: assigned (optional, default to assigned)
     * @param  string $state Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open (optional, default to open)
     * @param  string $labels 用逗号分开的标签。如: bug,performance (optional)
     * @param  string $sort 排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at (optional, default to created)
     * @param  string $direction 排序方式: 升序(asc)，降序(desc)。默认: desc (optional, default to desc)
     * @param  string $since 起始的更新时间，要求时间格式为 ISO 8601 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $schedule 计划开始日期，格式：20181006T173008+80-20181007T173008+80（区间），或者 -20181007T173008+80（小于20181007T173008+80），或者 20181006T173008+80-（大于20181006T173008+80），要求时间格式为20181006T173008+80 (optional)
     * @param  string $deadline 计划截止日期，格式同上 (optional)
     * @param  string $createdAt 任务创建时间，格式同上 (optional)
     * @param  string $finishedAt 任务完成时间，即任务最后一次转为已完成状态的时间点。格式同上 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\Issue[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5IssuesWithHttpInfo($accessToken = null, $filter = 'assigned', $state = 'open', $labels = null, $sort = 'created', $direction = 'desc', $since = null, $page = '1', $perPage = '20', $schedule = null, $deadline = null, $createdAt = null, $finishedAt = null)
    {
        $returnType = '\Gitee\Model\Issue[]';
        $request = $this->getV5IssuesRequest($accessToken, $filter, $state, $labels, $sort, $direction, $since, $page, $perPage, $schedule, $deadline, $createdAt, $finishedAt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\Issue[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5IssuesAsync
     *
     * 获取当前授权用户的所有Issues
     *
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $filter 筛选参数: 授权用户负责的(assigned)，授权用户创建的(created)，包含前两者的(all)。默认: assigned (optional, default to assigned)
     * @param  string $state Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open (optional, default to open)
     * @param  string $labels 用逗号分开的标签。如: bug,performance (optional)
     * @param  string $sort 排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at (optional, default to created)
     * @param  string $direction 排序方式: 升序(asc)，降序(desc)。默认: desc (optional, default to desc)
     * @param  string $since 起始的更新时间，要求时间格式为 ISO 8601 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $schedule 计划开始日期，格式：20181006T173008+80-20181007T173008+80（区间），或者 -20181007T173008+80（小于20181007T173008+80），或者 20181006T173008+80-（大于20181006T173008+80），要求时间格式为20181006T173008+80 (optional)
     * @param  string $deadline 计划截止日期，格式同上 (optional)
     * @param  string $createdAt 任务创建时间，格式同上 (optional)
     * @param  string $finishedAt 任务完成时间，即任务最后一次转为已完成状态的时间点。格式同上 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5IssuesAsync($accessToken = null, $filter = 'assigned', $state = 'open', $labels = null, $sort = 'created', $direction = 'desc', $since = null, $page = '1', $perPage = '20', $schedule = null, $deadline = null, $createdAt = null, $finishedAt = null)
    {
        return $this->getV5IssuesAsyncWithHttpInfo($accessToken, $filter, $state, $labels, $sort, $direction, $since, $page, $perPage, $schedule, $deadline, $createdAt, $finishedAt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5IssuesAsyncWithHttpInfo
     *
     * 获取当前授权用户的所有Issues
     *
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $filter 筛选参数: 授权用户负责的(assigned)，授权用户创建的(created)，包含前两者的(all)。默认: assigned (optional, default to assigned)
     * @param  string $state Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open (optional, default to open)
     * @param  string $labels 用逗号分开的标签。如: bug,performance (optional)
     * @param  string $sort 排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at (optional, default to created)
     * @param  string $direction 排序方式: 升序(asc)，降序(desc)。默认: desc (optional, default to desc)
     * @param  string $since 起始的更新时间，要求时间格式为 ISO 8601 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $schedule 计划开始日期，格式：20181006T173008+80-20181007T173008+80（区间），或者 -20181007T173008+80（小于20181007T173008+80），或者 20181006T173008+80-（大于20181006T173008+80），要求时间格式为20181006T173008+80 (optional)
     * @param  string $deadline 计划截止日期，格式同上 (optional)
     * @param  string $createdAt 任务创建时间，格式同上 (optional)
     * @param  string $finishedAt 任务完成时间，即任务最后一次转为已完成状态的时间点。格式同上 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5IssuesAsyncWithHttpInfo($accessToken = null, $filter = 'assigned', $state = 'open', $labels = null, $sort = 'created', $direction = 'desc', $since = null, $page = '1', $perPage = '20', $schedule = null, $deadline = null, $createdAt = null, $finishedAt = null)
    {
        $returnType = '\Gitee\Model\Issue[]';
        $request = $this->getV5IssuesRequest($accessToken, $filter, $state, $labels, $sort, $direction, $since, $page, $perPage, $schedule, $deadline, $createdAt, $finishedAt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5Issues'
     *
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $filter 筛选参数: 授权用户负责的(assigned)，授权用户创建的(created)，包含前两者的(all)。默认: assigned (optional, default to assigned)
     * @param  string $state Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open (optional, default to open)
     * @param  string $labels 用逗号分开的标签。如: bug,performance (optional)
     * @param  string $sort 排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at (optional, default to created)
     * @param  string $direction 排序方式: 升序(asc)，降序(desc)。默认: desc (optional, default to desc)
     * @param  string $since 起始的更新时间，要求时间格式为 ISO 8601 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $schedule 计划开始日期，格式：20181006T173008+80-20181007T173008+80（区间），或者 -20181007T173008+80（小于20181007T173008+80），或者 20181006T173008+80-（大于20181006T173008+80），要求时间格式为20181006T173008+80 (optional)
     * @param  string $deadline 计划截止日期，格式同上 (optional)
     * @param  string $createdAt 任务创建时间，格式同上 (optional)
     * @param  string $finishedAt 任务完成时间，即任务最后一次转为已完成状态的时间点。格式同上 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5IssuesRequest($accessToken = null, $filter = 'assigned', $state = 'open', $labels = null, $sort = 'created', $direction = 'desc', $since = null, $page = '1', $perPage = '20', $schedule = null, $deadline = null, $createdAt = null, $finishedAt = null)
    {
        if ($perPage !== null && $perPage > 100) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling IssuesApi.getV5Issues, must be smaller than or equal to 100.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling IssuesApi.getV5Issues, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v5/issues';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state);
        }
        // query params
        if ($labels !== null) {
            $queryParams['labels'] = ObjectSerializer::toQueryValue($labels);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($since !== null) {
            $queryParams['since'] = ObjectSerializer::toQueryValue($since);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }
        // query params
        if ($schedule !== null) {
            $queryParams['schedule'] = ObjectSerializer::toQueryValue($schedule);
        }
        // query params
        if ($deadline !== null) {
            $queryParams['deadline'] = ObjectSerializer::toQueryValue($deadline);
        }
        // query params
        if ($createdAt !== null) {
            $queryParams['created_at'] = ObjectSerializer::toQueryValue($createdAt);
        }
        // query params
        if ($finishedAt !== null) {
            $queryParams['finished_at'] = ObjectSerializer::toQueryValue($finishedAt);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5OrgsOrgIssues
     *
     * 获取当前用户某个组织的Issues
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $filter 筛选参数: 授权用户负责的(assigned)，授权用户创建的(created)，包含前两者的(all)。默认: assigned (optional, default to assigned)
     * @param  string $state Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open (optional, default to open)
     * @param  string $labels 用逗号分开的标签。如: bug,performance (optional)
     * @param  string $sort 排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at (optional, default to created)
     * @param  string $direction 排序方式: 升序(asc)，降序(desc)。默认: desc (optional, default to desc)
     * @param  string $since 起始的更新时间，要求时间格式为 ISO 8601 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $schedule 计划开始日期，格式：20181006T173008+80-20181007T173008+80（区间），或者 -20181007T173008+80（小于20181007T173008+80），或者 20181006T173008+80-（大于20181006T173008+80），要求时间格式为20181006T173008+80 (optional)
     * @param  string $deadline 计划截止日期，格式同上 (optional)
     * @param  string $createdAt 任务创建时间，格式同上 (optional)
     * @param  string $finishedAt 任务完成时间，即任务最后一次转为已完成状态的时间点。格式同上 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\Issue[]
     */
    public function getV5OrgsOrgIssues($org, $accessToken = null, $filter = 'assigned', $state = 'open', $labels = null, $sort = 'created', $direction = 'desc', $since = null, $page = '1', $perPage = '20', $schedule = null, $deadline = null, $createdAt = null, $finishedAt = null)
    {
        list($response) = $this->getV5OrgsOrgIssuesWithHttpInfo($org, $accessToken, $filter, $state, $labels, $sort, $direction, $since, $page, $perPage, $schedule, $deadline, $createdAt, $finishedAt);
        return $response;
    }

    /**
     * Operation getV5OrgsOrgIssuesWithHttpInfo
     *
     * 获取当前用户某个组织的Issues
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $filter 筛选参数: 授权用户负责的(assigned)，授权用户创建的(created)，包含前两者的(all)。默认: assigned (optional, default to assigned)
     * @param  string $state Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open (optional, default to open)
     * @param  string $labels 用逗号分开的标签。如: bug,performance (optional)
     * @param  string $sort 排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at (optional, default to created)
     * @param  string $direction 排序方式: 升序(asc)，降序(desc)。默认: desc (optional, default to desc)
     * @param  string $since 起始的更新时间，要求时间格式为 ISO 8601 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $schedule 计划开始日期，格式：20181006T173008+80-20181007T173008+80（区间），或者 -20181007T173008+80（小于20181007T173008+80），或者 20181006T173008+80-（大于20181006T173008+80），要求时间格式为20181006T173008+80 (optional)
     * @param  string $deadline 计划截止日期，格式同上 (optional)
     * @param  string $createdAt 任务创建时间，格式同上 (optional)
     * @param  string $finishedAt 任务完成时间，即任务最后一次转为已完成状态的时间点。格式同上 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\Issue[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5OrgsOrgIssuesWithHttpInfo($org, $accessToken = null, $filter = 'assigned', $state = 'open', $labels = null, $sort = 'created', $direction = 'desc', $since = null, $page = '1', $perPage = '20', $schedule = null, $deadline = null, $createdAt = null, $finishedAt = null)
    {
        $returnType = '\Gitee\Model\Issue[]';
        $request = $this->getV5OrgsOrgIssuesRequest($org, $accessToken, $filter, $state, $labels, $sort, $direction, $since, $page, $perPage, $schedule, $deadline, $createdAt, $finishedAt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\Issue[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5OrgsOrgIssuesAsync
     *
     * 获取当前用户某个组织的Issues
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $filter 筛选参数: 授权用户负责的(assigned)，授权用户创建的(created)，包含前两者的(all)。默认: assigned (optional, default to assigned)
     * @param  string $state Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open (optional, default to open)
     * @param  string $labels 用逗号分开的标签。如: bug,performance (optional)
     * @param  string $sort 排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at (optional, default to created)
     * @param  string $direction 排序方式: 升序(asc)，降序(desc)。默认: desc (optional, default to desc)
     * @param  string $since 起始的更新时间，要求时间格式为 ISO 8601 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $schedule 计划开始日期，格式：20181006T173008+80-20181007T173008+80（区间），或者 -20181007T173008+80（小于20181007T173008+80），或者 20181006T173008+80-（大于20181006T173008+80），要求时间格式为20181006T173008+80 (optional)
     * @param  string $deadline 计划截止日期，格式同上 (optional)
     * @param  string $createdAt 任务创建时间，格式同上 (optional)
     * @param  string $finishedAt 任务完成时间，即任务最后一次转为已完成状态的时间点。格式同上 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5OrgsOrgIssuesAsync($org, $accessToken = null, $filter = 'assigned', $state = 'open', $labels = null, $sort = 'created', $direction = 'desc', $since = null, $page = '1', $perPage = '20', $schedule = null, $deadline = null, $createdAt = null, $finishedAt = null)
    {
        return $this->getV5OrgsOrgIssuesAsyncWithHttpInfo($org, $accessToken, $filter, $state, $labels, $sort, $direction, $since, $page, $perPage, $schedule, $deadline, $createdAt, $finishedAt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5OrgsOrgIssuesAsyncWithHttpInfo
     *
     * 获取当前用户某个组织的Issues
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $filter 筛选参数: 授权用户负责的(assigned)，授权用户创建的(created)，包含前两者的(all)。默认: assigned (optional, default to assigned)
     * @param  string $state Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open (optional, default to open)
     * @param  string $labels 用逗号分开的标签。如: bug,performance (optional)
     * @param  string $sort 排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at (optional, default to created)
     * @param  string $direction 排序方式: 升序(asc)，降序(desc)。默认: desc (optional, default to desc)
     * @param  string $since 起始的更新时间，要求时间格式为 ISO 8601 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $schedule 计划开始日期，格式：20181006T173008+80-20181007T173008+80（区间），或者 -20181007T173008+80（小于20181007T173008+80），或者 20181006T173008+80-（大于20181006T173008+80），要求时间格式为20181006T173008+80 (optional)
     * @param  string $deadline 计划截止日期，格式同上 (optional)
     * @param  string $createdAt 任务创建时间，格式同上 (optional)
     * @param  string $finishedAt 任务完成时间，即任务最后一次转为已完成状态的时间点。格式同上 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5OrgsOrgIssuesAsyncWithHttpInfo($org, $accessToken = null, $filter = 'assigned', $state = 'open', $labels = null, $sort = 'created', $direction = 'desc', $since = null, $page = '1', $perPage = '20', $schedule = null, $deadline = null, $createdAt = null, $finishedAt = null)
    {
        $returnType = '\Gitee\Model\Issue[]';
        $request = $this->getV5OrgsOrgIssuesRequest($org, $accessToken, $filter, $state, $labels, $sort, $direction, $since, $page, $perPage, $schedule, $deadline, $createdAt, $finishedAt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5OrgsOrgIssues'
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $filter 筛选参数: 授权用户负责的(assigned)，授权用户创建的(created)，包含前两者的(all)。默认: assigned (optional, default to assigned)
     * @param  string $state Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open (optional, default to open)
     * @param  string $labels 用逗号分开的标签。如: bug,performance (optional)
     * @param  string $sort 排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at (optional, default to created)
     * @param  string $direction 排序方式: 升序(asc)，降序(desc)。默认: desc (optional, default to desc)
     * @param  string $since 起始的更新时间，要求时间格式为 ISO 8601 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $schedule 计划开始日期，格式：20181006T173008+80-20181007T173008+80（区间），或者 -20181007T173008+80（小于20181007T173008+80），或者 20181006T173008+80-（大于20181006T173008+80），要求时间格式为20181006T173008+80 (optional)
     * @param  string $deadline 计划截止日期，格式同上 (optional)
     * @param  string $createdAt 任务创建时间，格式同上 (optional)
     * @param  string $finishedAt 任务完成时间，即任务最后一次转为已完成状态的时间点。格式同上 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5OrgsOrgIssuesRequest($org, $accessToken = null, $filter = 'assigned', $state = 'open', $labels = null, $sort = 'created', $direction = 'desc', $since = null, $page = '1', $perPage = '20', $schedule = null, $deadline = null, $createdAt = null, $finishedAt = null)
    {
        // verify the required parameter 'org' is set
        if ($org === null || (is_array($org) && count($org) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org when calling getV5OrgsOrgIssues'
            );
        }
        if ($perPage !== null && $perPage > 100) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling IssuesApi.getV5OrgsOrgIssues, must be smaller than or equal to 100.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling IssuesApi.getV5OrgsOrgIssues, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v5/orgs/{org}/issues';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state);
        }
        // query params
        if ($labels !== null) {
            $queryParams['labels'] = ObjectSerializer::toQueryValue($labels);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($since !== null) {
            $queryParams['since'] = ObjectSerializer::toQueryValue($since);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }
        // query params
        if ($schedule !== null) {
            $queryParams['schedule'] = ObjectSerializer::toQueryValue($schedule);
        }
        // query params
        if ($deadline !== null) {
            $queryParams['deadline'] = ObjectSerializer::toQueryValue($deadline);
        }
        // query params
        if ($createdAt !== null) {
            $queryParams['created_at'] = ObjectSerializer::toQueryValue($createdAt);
        }
        // query params
        if ($finishedAt !== null) {
            $queryParams['finished_at'] = ObjectSerializer::toQueryValue($finishedAt);
        }

        // path params
        if ($org !== null) {
            $resourcePath = str_replace(
                '{' . 'org' . '}',
                ObjectSerializer::toPathValue($org),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5ReposOwnerIssuesNumberOperateLogs
     *
     * 获取某个Issue下的操作日志
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $repo 仓库路径(path) (optional)
     * @param  string $sort 按递增(asc)或递减(desc)排序，默认：递减 (optional, default to desc)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\OperateLog[]
     */
    public function getV5ReposOwnerIssuesNumberOperateLogs($owner, $number, $accessToken = null, $repo = null, $sort = 'desc')
    {
        list($response) = $this->getV5ReposOwnerIssuesNumberOperateLogsWithHttpInfo($owner, $number, $accessToken, $repo, $sort);
        return $response;
    }

    /**
     * Operation getV5ReposOwnerIssuesNumberOperateLogsWithHttpInfo
     *
     * 获取某个Issue下的操作日志
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $repo 仓库路径(path) (optional)
     * @param  string $sort 按递增(asc)或递减(desc)排序，默认：递减 (optional, default to desc)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\OperateLog[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5ReposOwnerIssuesNumberOperateLogsWithHttpInfo($owner, $number, $accessToken = null, $repo = null, $sort = 'desc')
    {
        $returnType = '\Gitee\Model\OperateLog[]';
        $request = $this->getV5ReposOwnerIssuesNumberOperateLogsRequest($owner, $number, $accessToken, $repo, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\OperateLog[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5ReposOwnerIssuesNumberOperateLogsAsync
     *
     * 获取某个Issue下的操作日志
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $repo 仓库路径(path) (optional)
     * @param  string $sort 按递增(asc)或递减(desc)排序，默认：递减 (optional, default to desc)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerIssuesNumberOperateLogsAsync($owner, $number, $accessToken = null, $repo = null, $sort = 'desc')
    {
        return $this->getV5ReposOwnerIssuesNumberOperateLogsAsyncWithHttpInfo($owner, $number, $accessToken, $repo, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5ReposOwnerIssuesNumberOperateLogsAsyncWithHttpInfo
     *
     * 获取某个Issue下的操作日志
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $repo 仓库路径(path) (optional)
     * @param  string $sort 按递增(asc)或递减(desc)排序，默认：递减 (optional, default to desc)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerIssuesNumberOperateLogsAsyncWithHttpInfo($owner, $number, $accessToken = null, $repo = null, $sort = 'desc')
    {
        $returnType = '\Gitee\Model\OperateLog[]';
        $request = $this->getV5ReposOwnerIssuesNumberOperateLogsRequest($owner, $number, $accessToken, $repo, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5ReposOwnerIssuesNumberOperateLogs'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $repo 仓库路径(path) (optional)
     * @param  string $sort 按递增(asc)或递减(desc)排序，默认：递减 (optional, default to desc)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5ReposOwnerIssuesNumberOperateLogsRequest($owner, $number, $accessToken = null, $repo = null, $sort = 'desc')
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling getV5ReposOwnerIssuesNumberOperateLogs'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling getV5ReposOwnerIssuesNumberOperateLogs'
            );
        }

        $resourcePath = '/v5/repos/{owner}/issues/{number}/operate_logs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($repo !== null) {
            $queryParams['repo'] = ObjectSerializer::toQueryValue($repo);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }

        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5ReposOwnerIssuesNumberPullRequests
     *
     * 获取 issue 关联的 Pull Requests
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $repo 仓库路径(path) (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\PullRequest[]
     */
    public function getV5ReposOwnerIssuesNumberPullRequests($owner, $number, $accessToken = null, $repo = null)
    {
        list($response) = $this->getV5ReposOwnerIssuesNumberPullRequestsWithHttpInfo($owner, $number, $accessToken, $repo);
        return $response;
    }

    /**
     * Operation getV5ReposOwnerIssuesNumberPullRequestsWithHttpInfo
     *
     * 获取 issue 关联的 Pull Requests
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $repo 仓库路径(path) (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\PullRequest[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5ReposOwnerIssuesNumberPullRequestsWithHttpInfo($owner, $number, $accessToken = null, $repo = null)
    {
        $returnType = '\Gitee\Model\PullRequest[]';
        $request = $this->getV5ReposOwnerIssuesNumberPullRequestsRequest($owner, $number, $accessToken, $repo);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\PullRequest[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5ReposOwnerIssuesNumberPullRequestsAsync
     *
     * 获取 issue 关联的 Pull Requests
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $repo 仓库路径(path) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerIssuesNumberPullRequestsAsync($owner, $number, $accessToken = null, $repo = null)
    {
        return $this->getV5ReposOwnerIssuesNumberPullRequestsAsyncWithHttpInfo($owner, $number, $accessToken, $repo)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5ReposOwnerIssuesNumberPullRequestsAsyncWithHttpInfo
     *
     * 获取 issue 关联的 Pull Requests
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $repo 仓库路径(path) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerIssuesNumberPullRequestsAsyncWithHttpInfo($owner, $number, $accessToken = null, $repo = null)
    {
        $returnType = '\Gitee\Model\PullRequest[]';
        $request = $this->getV5ReposOwnerIssuesNumberPullRequestsRequest($owner, $number, $accessToken, $repo);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5ReposOwnerIssuesNumberPullRequests'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $repo 仓库路径(path) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5ReposOwnerIssuesNumberPullRequestsRequest($owner, $number, $accessToken = null, $repo = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling getV5ReposOwnerIssuesNumberPullRequests'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling getV5ReposOwnerIssuesNumberPullRequests'
            );
        }

        $resourcePath = '/v5/repos/{owner}/issues/{number}/pull_requests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($repo !== null) {
            $queryParams['repo'] = ObjectSerializer::toQueryValue($repo);
        }

        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5ReposOwnerRepoIssues
     *
     * 仓库的所有Issues
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $state Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open (optional, default to open)
     * @param  string $labels 用逗号分开的标签。如: bug,performance (optional)
     * @param  string $sort 排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at (optional, default to created)
     * @param  string $direction 排序方式: 升序(asc)，降序(desc)。默认: desc (optional, default to desc)
     * @param  string $since 起始的更新时间，要求时间格式为 ISO 8601 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $schedule 计划开始日期，格式：20181006T173008+80-20181007T173008+80（区间），或者 -20181007T173008+80（小于20181007T173008+80），或者 20181006T173008+80-（大于20181006T173008+80），要求时间格式为20181006T173008+80 (optional)
     * @param  string $deadline 计划截止日期，格式同上 (optional)
     * @param  string $createdAt 任务创建时间，格式同上 (optional)
     * @param  string $finishedAt 任务完成时间，即任务最后一次转为已完成状态的时间点。格式同上 (optional)
     * @param  string $milestone 根据里程碑标题。none为没里程碑的，*为所有带里程碑的 (optional)
     * @param  string $assignee 用户的username。 none为没指派者, *为所有带有指派者的 (optional)
     * @param  string $creator 创建Issues的用户username (optional)
     * @param  string $program 所属项目名称。none为没有所属项目，*为所有带所属项目的 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\Issue[]
     */
    public function getV5ReposOwnerRepoIssues($owner, $repo, $accessToken = null, $state = 'open', $labels = null, $sort = 'created', $direction = 'desc', $since = null, $page = '1', $perPage = '20', $schedule = null, $deadline = null, $createdAt = null, $finishedAt = null, $milestone = null, $assignee = null, $creator = null, $program = null)
    {
        list($response) = $this->getV5ReposOwnerRepoIssuesWithHttpInfo($owner, $repo, $accessToken, $state, $labels, $sort, $direction, $since, $page, $perPage, $schedule, $deadline, $createdAt, $finishedAt, $milestone, $assignee, $creator, $program);
        return $response;
    }

    /**
     * Operation getV5ReposOwnerRepoIssuesWithHttpInfo
     *
     * 仓库的所有Issues
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $state Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open (optional, default to open)
     * @param  string $labels 用逗号分开的标签。如: bug,performance (optional)
     * @param  string $sort 排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at (optional, default to created)
     * @param  string $direction 排序方式: 升序(asc)，降序(desc)。默认: desc (optional, default to desc)
     * @param  string $since 起始的更新时间，要求时间格式为 ISO 8601 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $schedule 计划开始日期，格式：20181006T173008+80-20181007T173008+80（区间），或者 -20181007T173008+80（小于20181007T173008+80），或者 20181006T173008+80-（大于20181006T173008+80），要求时间格式为20181006T173008+80 (optional)
     * @param  string $deadline 计划截止日期，格式同上 (optional)
     * @param  string $createdAt 任务创建时间，格式同上 (optional)
     * @param  string $finishedAt 任务完成时间，即任务最后一次转为已完成状态的时间点。格式同上 (optional)
     * @param  string $milestone 根据里程碑标题。none为没里程碑的，*为所有带里程碑的 (optional)
     * @param  string $assignee 用户的username。 none为没指派者, *为所有带有指派者的 (optional)
     * @param  string $creator 创建Issues的用户username (optional)
     * @param  string $program 所属项目名称。none为没有所属项目，*为所有带所属项目的 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\Issue[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5ReposOwnerRepoIssuesWithHttpInfo($owner, $repo, $accessToken = null, $state = 'open', $labels = null, $sort = 'created', $direction = 'desc', $since = null, $page = '1', $perPage = '20', $schedule = null, $deadline = null, $createdAt = null, $finishedAt = null, $milestone = null, $assignee = null, $creator = null, $program = null)
    {
        $returnType = '\Gitee\Model\Issue[]';
        $request = $this->getV5ReposOwnerRepoIssuesRequest($owner, $repo, $accessToken, $state, $labels, $sort, $direction, $since, $page, $perPage, $schedule, $deadline, $createdAt, $finishedAt, $milestone, $assignee, $creator, $program);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\Issue[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5ReposOwnerRepoIssuesAsync
     *
     * 仓库的所有Issues
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $state Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open (optional, default to open)
     * @param  string $labels 用逗号分开的标签。如: bug,performance (optional)
     * @param  string $sort 排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at (optional, default to created)
     * @param  string $direction 排序方式: 升序(asc)，降序(desc)。默认: desc (optional, default to desc)
     * @param  string $since 起始的更新时间，要求时间格式为 ISO 8601 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $schedule 计划开始日期，格式：20181006T173008+80-20181007T173008+80（区间），或者 -20181007T173008+80（小于20181007T173008+80），或者 20181006T173008+80-（大于20181006T173008+80），要求时间格式为20181006T173008+80 (optional)
     * @param  string $deadline 计划截止日期，格式同上 (optional)
     * @param  string $createdAt 任务创建时间，格式同上 (optional)
     * @param  string $finishedAt 任务完成时间，即任务最后一次转为已完成状态的时间点。格式同上 (optional)
     * @param  string $milestone 根据里程碑标题。none为没里程碑的，*为所有带里程碑的 (optional)
     * @param  string $assignee 用户的username。 none为没指派者, *为所有带有指派者的 (optional)
     * @param  string $creator 创建Issues的用户username (optional)
     * @param  string $program 所属项目名称。none为没有所属项目，*为所有带所属项目的 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoIssuesAsync($owner, $repo, $accessToken = null, $state = 'open', $labels = null, $sort = 'created', $direction = 'desc', $since = null, $page = '1', $perPage = '20', $schedule = null, $deadline = null, $createdAt = null, $finishedAt = null, $milestone = null, $assignee = null, $creator = null, $program = null)
    {
        return $this->getV5ReposOwnerRepoIssuesAsyncWithHttpInfo($owner, $repo, $accessToken, $state, $labels, $sort, $direction, $since, $page, $perPage, $schedule, $deadline, $createdAt, $finishedAt, $milestone, $assignee, $creator, $program)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5ReposOwnerRepoIssuesAsyncWithHttpInfo
     *
     * 仓库的所有Issues
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $state Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open (optional, default to open)
     * @param  string $labels 用逗号分开的标签。如: bug,performance (optional)
     * @param  string $sort 排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at (optional, default to created)
     * @param  string $direction 排序方式: 升序(asc)，降序(desc)。默认: desc (optional, default to desc)
     * @param  string $since 起始的更新时间，要求时间格式为 ISO 8601 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $schedule 计划开始日期，格式：20181006T173008+80-20181007T173008+80（区间），或者 -20181007T173008+80（小于20181007T173008+80），或者 20181006T173008+80-（大于20181006T173008+80），要求时间格式为20181006T173008+80 (optional)
     * @param  string $deadline 计划截止日期，格式同上 (optional)
     * @param  string $createdAt 任务创建时间，格式同上 (optional)
     * @param  string $finishedAt 任务完成时间，即任务最后一次转为已完成状态的时间点。格式同上 (optional)
     * @param  string $milestone 根据里程碑标题。none为没里程碑的，*为所有带里程碑的 (optional)
     * @param  string $assignee 用户的username。 none为没指派者, *为所有带有指派者的 (optional)
     * @param  string $creator 创建Issues的用户username (optional)
     * @param  string $program 所属项目名称。none为没有所属项目，*为所有带所属项目的 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoIssuesAsyncWithHttpInfo($owner, $repo, $accessToken = null, $state = 'open', $labels = null, $sort = 'created', $direction = 'desc', $since = null, $page = '1', $perPage = '20', $schedule = null, $deadline = null, $createdAt = null, $finishedAt = null, $milestone = null, $assignee = null, $creator = null, $program = null)
    {
        $returnType = '\Gitee\Model\Issue[]';
        $request = $this->getV5ReposOwnerRepoIssuesRequest($owner, $repo, $accessToken, $state, $labels, $sort, $direction, $since, $page, $perPage, $schedule, $deadline, $createdAt, $finishedAt, $milestone, $assignee, $creator, $program);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5ReposOwnerRepoIssues'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $state Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open (optional, default to open)
     * @param  string $labels 用逗号分开的标签。如: bug,performance (optional)
     * @param  string $sort 排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at (optional, default to created)
     * @param  string $direction 排序方式: 升序(asc)，降序(desc)。默认: desc (optional, default to desc)
     * @param  string $since 起始的更新时间，要求时间格式为 ISO 8601 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $schedule 计划开始日期，格式：20181006T173008+80-20181007T173008+80（区间），或者 -20181007T173008+80（小于20181007T173008+80），或者 20181006T173008+80-（大于20181006T173008+80），要求时间格式为20181006T173008+80 (optional)
     * @param  string $deadline 计划截止日期，格式同上 (optional)
     * @param  string $createdAt 任务创建时间，格式同上 (optional)
     * @param  string $finishedAt 任务完成时间，即任务最后一次转为已完成状态的时间点。格式同上 (optional)
     * @param  string $milestone 根据里程碑标题。none为没里程碑的，*为所有带里程碑的 (optional)
     * @param  string $assignee 用户的username。 none为没指派者, *为所有带有指派者的 (optional)
     * @param  string $creator 创建Issues的用户username (optional)
     * @param  string $program 所属项目名称。none为没有所属项目，*为所有带所属项目的 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5ReposOwnerRepoIssuesRequest($owner, $repo, $accessToken = null, $state = 'open', $labels = null, $sort = 'created', $direction = 'desc', $since = null, $page = '1', $perPage = '20', $schedule = null, $deadline = null, $createdAt = null, $finishedAt = null, $milestone = null, $assignee = null, $creator = null, $program = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling getV5ReposOwnerRepoIssues'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling getV5ReposOwnerRepoIssues'
            );
        }
        if ($perPage !== null && $perPage > 100) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling IssuesApi.getV5ReposOwnerRepoIssues, must be smaller than or equal to 100.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling IssuesApi.getV5ReposOwnerRepoIssues, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v5/repos/{owner}/{repo}/issues';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state);
        }
        // query params
        if ($labels !== null) {
            $queryParams['labels'] = ObjectSerializer::toQueryValue($labels);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($since !== null) {
            $queryParams['since'] = ObjectSerializer::toQueryValue($since);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }
        // query params
        if ($schedule !== null) {
            $queryParams['schedule'] = ObjectSerializer::toQueryValue($schedule);
        }
        // query params
        if ($deadline !== null) {
            $queryParams['deadline'] = ObjectSerializer::toQueryValue($deadline);
        }
        // query params
        if ($createdAt !== null) {
            $queryParams['created_at'] = ObjectSerializer::toQueryValue($createdAt);
        }
        // query params
        if ($finishedAt !== null) {
            $queryParams['finished_at'] = ObjectSerializer::toQueryValue($finishedAt);
        }
        // query params
        if ($milestone !== null) {
            $queryParams['milestone'] = ObjectSerializer::toQueryValue($milestone);
        }
        // query params
        if ($assignee !== null) {
            $queryParams['assignee'] = ObjectSerializer::toQueryValue($assignee);
        }
        // query params
        if ($creator !== null) {
            $queryParams['creator'] = ObjectSerializer::toQueryValue($creator);
        }
        // query params
        if ($program !== null) {
            $queryParams['program'] = ObjectSerializer::toQueryValue($program);
        }

        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5ReposOwnerRepoIssuesComments
     *
     * 获取仓库所有Issue的评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort Either created or updated. Default: created (optional, default to created)
     * @param  string $direction Either asc or desc. Ignored without the sort parameter. (optional, default to asc)
     * @param  string $since Only comments updated at or after this time are returned.                                               This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\Note[]
     */
    public function getV5ReposOwnerRepoIssuesComments($owner, $repo, $accessToken = null, $sort = 'created', $direction = 'asc', $since = null, $page = '1', $perPage = '20')
    {
        list($response) = $this->getV5ReposOwnerRepoIssuesCommentsWithHttpInfo($owner, $repo, $accessToken, $sort, $direction, $since, $page, $perPage);
        return $response;
    }

    /**
     * Operation getV5ReposOwnerRepoIssuesCommentsWithHttpInfo
     *
     * 获取仓库所有Issue的评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort Either created or updated. Default: created (optional, default to created)
     * @param  string $direction Either asc or desc. Ignored without the sort parameter. (optional, default to asc)
     * @param  string $since Only comments updated at or after this time are returned.                                               This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\Note[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5ReposOwnerRepoIssuesCommentsWithHttpInfo($owner, $repo, $accessToken = null, $sort = 'created', $direction = 'asc', $since = null, $page = '1', $perPage = '20')
    {
        $returnType = '\Gitee\Model\Note[]';
        $request = $this->getV5ReposOwnerRepoIssuesCommentsRequest($owner, $repo, $accessToken, $sort, $direction, $since, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\Note[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5ReposOwnerRepoIssuesCommentsAsync
     *
     * 获取仓库所有Issue的评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort Either created or updated. Default: created (optional, default to created)
     * @param  string $direction Either asc or desc. Ignored without the sort parameter. (optional, default to asc)
     * @param  string $since Only comments updated at or after this time are returned.                                               This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoIssuesCommentsAsync($owner, $repo, $accessToken = null, $sort = 'created', $direction = 'asc', $since = null, $page = '1', $perPage = '20')
    {
        return $this->getV5ReposOwnerRepoIssuesCommentsAsyncWithHttpInfo($owner, $repo, $accessToken, $sort, $direction, $since, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5ReposOwnerRepoIssuesCommentsAsyncWithHttpInfo
     *
     * 获取仓库所有Issue的评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort Either created or updated. Default: created (optional, default to created)
     * @param  string $direction Either asc or desc. Ignored without the sort parameter. (optional, default to asc)
     * @param  string $since Only comments updated at or after this time are returned.                                               This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoIssuesCommentsAsyncWithHttpInfo($owner, $repo, $accessToken = null, $sort = 'created', $direction = 'asc', $since = null, $page = '1', $perPage = '20')
    {
        $returnType = '\Gitee\Model\Note[]';
        $request = $this->getV5ReposOwnerRepoIssuesCommentsRequest($owner, $repo, $accessToken, $sort, $direction, $since, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5ReposOwnerRepoIssuesComments'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort Either created or updated. Default: created (optional, default to created)
     * @param  string $direction Either asc or desc. Ignored without the sort parameter. (optional, default to asc)
     * @param  string $since Only comments updated at or after this time are returned.                                               This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5ReposOwnerRepoIssuesCommentsRequest($owner, $repo, $accessToken = null, $sort = 'created', $direction = 'asc', $since = null, $page = '1', $perPage = '20')
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling getV5ReposOwnerRepoIssuesComments'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling getV5ReposOwnerRepoIssuesComments'
            );
        }
        if ($perPage !== null && $perPage > 100) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling IssuesApi.getV5ReposOwnerRepoIssuesComments, must be smaller than or equal to 100.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling IssuesApi.getV5ReposOwnerRepoIssuesComments, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v5/repos/{owner}/{repo}/issues/comments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($since !== null) {
            $queryParams['since'] = ObjectSerializer::toQueryValue($since);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5ReposOwnerRepoIssuesCommentsId
     *
     * 获取仓库Issue某条评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id 评论的ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\Note
     */
    public function getV5ReposOwnerRepoIssuesCommentsId($owner, $repo, $id, $accessToken = null)
    {
        list($response) = $this->getV5ReposOwnerRepoIssuesCommentsIdWithHttpInfo($owner, $repo, $id, $accessToken);
        return $response;
    }

    /**
     * Operation getV5ReposOwnerRepoIssuesCommentsIdWithHttpInfo
     *
     * 获取仓库Issue某条评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id 评论的ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\Note, HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5ReposOwnerRepoIssuesCommentsIdWithHttpInfo($owner, $repo, $id, $accessToken = null)
    {
        $returnType = '\Gitee\Model\Note';
        $request = $this->getV5ReposOwnerRepoIssuesCommentsIdRequest($owner, $repo, $id, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\Note',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5ReposOwnerRepoIssuesCommentsIdAsync
     *
     * 获取仓库Issue某条评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id 评论的ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoIssuesCommentsIdAsync($owner, $repo, $id, $accessToken = null)
    {
        return $this->getV5ReposOwnerRepoIssuesCommentsIdAsyncWithHttpInfo($owner, $repo, $id, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5ReposOwnerRepoIssuesCommentsIdAsyncWithHttpInfo
     *
     * 获取仓库Issue某条评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id 评论的ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoIssuesCommentsIdAsyncWithHttpInfo($owner, $repo, $id, $accessToken = null)
    {
        $returnType = '\Gitee\Model\Note';
        $request = $this->getV5ReposOwnerRepoIssuesCommentsIdRequest($owner, $repo, $id, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5ReposOwnerRepoIssuesCommentsId'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id 评论的ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5ReposOwnerRepoIssuesCommentsIdRequest($owner, $repo, $id, $accessToken = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling getV5ReposOwnerRepoIssuesCommentsId'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling getV5ReposOwnerRepoIssuesCommentsId'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getV5ReposOwnerRepoIssuesCommentsId'
            );
        }

        $resourcePath = '/v5/repos/{owner}/{repo}/issues/comments/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5ReposOwnerRepoIssuesNumber
     *
     * 仓库的某个Issue
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\Issue
     */
    public function getV5ReposOwnerRepoIssuesNumber($owner, $repo, $number, $accessToken = null)
    {
        list($response) = $this->getV5ReposOwnerRepoIssuesNumberWithHttpInfo($owner, $repo, $number, $accessToken);
        return $response;
    }

    /**
     * Operation getV5ReposOwnerRepoIssuesNumberWithHttpInfo
     *
     * 仓库的某个Issue
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\Issue, HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5ReposOwnerRepoIssuesNumberWithHttpInfo($owner, $repo, $number, $accessToken = null)
    {
        $returnType = '\Gitee\Model\Issue';
        $request = $this->getV5ReposOwnerRepoIssuesNumberRequest($owner, $repo, $number, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\Issue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5ReposOwnerRepoIssuesNumberAsync
     *
     * 仓库的某个Issue
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoIssuesNumberAsync($owner, $repo, $number, $accessToken = null)
    {
        return $this->getV5ReposOwnerRepoIssuesNumberAsyncWithHttpInfo($owner, $repo, $number, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5ReposOwnerRepoIssuesNumberAsyncWithHttpInfo
     *
     * 仓库的某个Issue
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoIssuesNumberAsyncWithHttpInfo($owner, $repo, $number, $accessToken = null)
    {
        $returnType = '\Gitee\Model\Issue';
        $request = $this->getV5ReposOwnerRepoIssuesNumberRequest($owner, $repo, $number, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5ReposOwnerRepoIssuesNumber'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5ReposOwnerRepoIssuesNumberRequest($owner, $repo, $number, $accessToken = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling getV5ReposOwnerRepoIssuesNumber'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling getV5ReposOwnerRepoIssuesNumber'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling getV5ReposOwnerRepoIssuesNumber'
            );
        }

        $resourcePath = '/v5/repos/{owner}/{repo}/issues/{number}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5ReposOwnerRepoIssuesNumberComments
     *
     * 获取仓库某个Issue所有的评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $since Only comments updated at or after this time are returned.                                               This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $order 排序顺序: asc(default),desc (optional, default to asc)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\Note[]
     */
    public function getV5ReposOwnerRepoIssuesNumberComments($owner, $repo, $number, $accessToken = null, $since = null, $page = '1', $perPage = '20', $order = 'asc')
    {
        list($response) = $this->getV5ReposOwnerRepoIssuesNumberCommentsWithHttpInfo($owner, $repo, $number, $accessToken, $since, $page, $perPage, $order);
        return $response;
    }

    /**
     * Operation getV5ReposOwnerRepoIssuesNumberCommentsWithHttpInfo
     *
     * 获取仓库某个Issue所有的评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $since Only comments updated at or after this time are returned.                                               This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $order 排序顺序: asc(default),desc (optional, default to asc)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\Note[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5ReposOwnerRepoIssuesNumberCommentsWithHttpInfo($owner, $repo, $number, $accessToken = null, $since = null, $page = '1', $perPage = '20', $order = 'asc')
    {
        $returnType = '\Gitee\Model\Note[]';
        $request = $this->getV5ReposOwnerRepoIssuesNumberCommentsRequest($owner, $repo, $number, $accessToken, $since, $page, $perPage, $order);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\Note[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5ReposOwnerRepoIssuesNumberCommentsAsync
     *
     * 获取仓库某个Issue所有的评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $since Only comments updated at or after this time are returned.                                               This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $order 排序顺序: asc(default),desc (optional, default to asc)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoIssuesNumberCommentsAsync($owner, $repo, $number, $accessToken = null, $since = null, $page = '1', $perPage = '20', $order = 'asc')
    {
        return $this->getV5ReposOwnerRepoIssuesNumberCommentsAsyncWithHttpInfo($owner, $repo, $number, $accessToken, $since, $page, $perPage, $order)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5ReposOwnerRepoIssuesNumberCommentsAsyncWithHttpInfo
     *
     * 获取仓库某个Issue所有的评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $since Only comments updated at or after this time are returned.                                               This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $order 排序顺序: asc(default),desc (optional, default to asc)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoIssuesNumberCommentsAsyncWithHttpInfo($owner, $repo, $number, $accessToken = null, $since = null, $page = '1', $perPage = '20', $order = 'asc')
    {
        $returnType = '\Gitee\Model\Note[]';
        $request = $this->getV5ReposOwnerRepoIssuesNumberCommentsRequest($owner, $repo, $number, $accessToken, $since, $page, $perPage, $order);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5ReposOwnerRepoIssuesNumberComments'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $since Only comments updated at or after this time are returned.                                               This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $order 排序顺序: asc(default),desc (optional, default to asc)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5ReposOwnerRepoIssuesNumberCommentsRequest($owner, $repo, $number, $accessToken = null, $since = null, $page = '1', $perPage = '20', $order = 'asc')
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling getV5ReposOwnerRepoIssuesNumberComments'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling getV5ReposOwnerRepoIssuesNumberComments'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling getV5ReposOwnerRepoIssuesNumberComments'
            );
        }
        if ($perPage !== null && $perPage > 100) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling IssuesApi.getV5ReposOwnerRepoIssuesNumberComments, must be smaller than or equal to 100.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling IssuesApi.getV5ReposOwnerRepoIssuesNumberComments, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v5/repos/{owner}/{repo}/issues/{number}/comments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($since !== null) {
            $queryParams['since'] = ObjectSerializer::toQueryValue($since);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }

        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5UserIssues
     *
     * 获取授权用户的所有Issues
     *
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $filter 筛选参数: 授权用户负责的(assigned)，授权用户创建的(created)，包含前两者的(all)。默认: assigned (optional, default to assigned)
     * @param  string $state Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open (optional, default to open)
     * @param  string $labels 用逗号分开的标签。如: bug,performance (optional)
     * @param  string $sort 排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at (optional, default to created)
     * @param  string $direction 排序方式: 升序(asc)，降序(desc)。默认: desc (optional, default to desc)
     * @param  string $since 起始的更新时间，要求时间格式为 ISO 8601 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $schedule 计划开始日期，格式：20181006T173008+80-20181007T173008+80（区间），或者 -20181007T173008+80（小于20181007T173008+80），或者 20181006T173008+80-（大于20181006T173008+80），要求时间格式为20181006T173008+80 (optional)
     * @param  string $deadline 计划截止日期，格式同上 (optional)
     * @param  string $createdAt 任务创建时间，格式同上 (optional)
     * @param  string $finishedAt 任务完成时间，即任务最后一次转为已完成状态的时间点。格式同上 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\Issue[]
     */
    public function getV5UserIssues($accessToken = null, $filter = 'assigned', $state = 'open', $labels = null, $sort = 'created', $direction = 'desc', $since = null, $page = '1', $perPage = '20', $schedule = null, $deadline = null, $createdAt = null, $finishedAt = null)
    {
        list($response) = $this->getV5UserIssuesWithHttpInfo($accessToken, $filter, $state, $labels, $sort, $direction, $since, $page, $perPage, $schedule, $deadline, $createdAt, $finishedAt);
        return $response;
    }

    /**
     * Operation getV5UserIssuesWithHttpInfo
     *
     * 获取授权用户的所有Issues
     *
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $filter 筛选参数: 授权用户负责的(assigned)，授权用户创建的(created)，包含前两者的(all)。默认: assigned (optional, default to assigned)
     * @param  string $state Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open (optional, default to open)
     * @param  string $labels 用逗号分开的标签。如: bug,performance (optional)
     * @param  string $sort 排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at (optional, default to created)
     * @param  string $direction 排序方式: 升序(asc)，降序(desc)。默认: desc (optional, default to desc)
     * @param  string $since 起始的更新时间，要求时间格式为 ISO 8601 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $schedule 计划开始日期，格式：20181006T173008+80-20181007T173008+80（区间），或者 -20181007T173008+80（小于20181007T173008+80），或者 20181006T173008+80-（大于20181006T173008+80），要求时间格式为20181006T173008+80 (optional)
     * @param  string $deadline 计划截止日期，格式同上 (optional)
     * @param  string $createdAt 任务创建时间，格式同上 (optional)
     * @param  string $finishedAt 任务完成时间，即任务最后一次转为已完成状态的时间点。格式同上 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\Issue[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5UserIssuesWithHttpInfo($accessToken = null, $filter = 'assigned', $state = 'open', $labels = null, $sort = 'created', $direction = 'desc', $since = null, $page = '1', $perPage = '20', $schedule = null, $deadline = null, $createdAt = null, $finishedAt = null)
    {
        $returnType = '\Gitee\Model\Issue[]';
        $request = $this->getV5UserIssuesRequest($accessToken, $filter, $state, $labels, $sort, $direction, $since, $page, $perPage, $schedule, $deadline, $createdAt, $finishedAt);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\Issue[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5UserIssuesAsync
     *
     * 获取授权用户的所有Issues
     *
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $filter 筛选参数: 授权用户负责的(assigned)，授权用户创建的(created)，包含前两者的(all)。默认: assigned (optional, default to assigned)
     * @param  string $state Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open (optional, default to open)
     * @param  string $labels 用逗号分开的标签。如: bug,performance (optional)
     * @param  string $sort 排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at (optional, default to created)
     * @param  string $direction 排序方式: 升序(asc)，降序(desc)。默认: desc (optional, default to desc)
     * @param  string $since 起始的更新时间，要求时间格式为 ISO 8601 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $schedule 计划开始日期，格式：20181006T173008+80-20181007T173008+80（区间），或者 -20181007T173008+80（小于20181007T173008+80），或者 20181006T173008+80-（大于20181006T173008+80），要求时间格式为20181006T173008+80 (optional)
     * @param  string $deadline 计划截止日期，格式同上 (optional)
     * @param  string $createdAt 任务创建时间，格式同上 (optional)
     * @param  string $finishedAt 任务完成时间，即任务最后一次转为已完成状态的时间点。格式同上 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5UserIssuesAsync($accessToken = null, $filter = 'assigned', $state = 'open', $labels = null, $sort = 'created', $direction = 'desc', $since = null, $page = '1', $perPage = '20', $schedule = null, $deadline = null, $createdAt = null, $finishedAt = null)
    {
        return $this->getV5UserIssuesAsyncWithHttpInfo($accessToken, $filter, $state, $labels, $sort, $direction, $since, $page, $perPage, $schedule, $deadline, $createdAt, $finishedAt)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5UserIssuesAsyncWithHttpInfo
     *
     * 获取授权用户的所有Issues
     *
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $filter 筛选参数: 授权用户负责的(assigned)，授权用户创建的(created)，包含前两者的(all)。默认: assigned (optional, default to assigned)
     * @param  string $state Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open (optional, default to open)
     * @param  string $labels 用逗号分开的标签。如: bug,performance (optional)
     * @param  string $sort 排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at (optional, default to created)
     * @param  string $direction 排序方式: 升序(asc)，降序(desc)。默认: desc (optional, default to desc)
     * @param  string $since 起始的更新时间，要求时间格式为 ISO 8601 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $schedule 计划开始日期，格式：20181006T173008+80-20181007T173008+80（区间），或者 -20181007T173008+80（小于20181007T173008+80），或者 20181006T173008+80-（大于20181006T173008+80），要求时间格式为20181006T173008+80 (optional)
     * @param  string $deadline 计划截止日期，格式同上 (optional)
     * @param  string $createdAt 任务创建时间，格式同上 (optional)
     * @param  string $finishedAt 任务完成时间，即任务最后一次转为已完成状态的时间点。格式同上 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5UserIssuesAsyncWithHttpInfo($accessToken = null, $filter = 'assigned', $state = 'open', $labels = null, $sort = 'created', $direction = 'desc', $since = null, $page = '1', $perPage = '20', $schedule = null, $deadline = null, $createdAt = null, $finishedAt = null)
    {
        $returnType = '\Gitee\Model\Issue[]';
        $request = $this->getV5UserIssuesRequest($accessToken, $filter, $state, $labels, $sort, $direction, $since, $page, $perPage, $schedule, $deadline, $createdAt, $finishedAt);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5UserIssues'
     *
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $filter 筛选参数: 授权用户负责的(assigned)，授权用户创建的(created)，包含前两者的(all)。默认: assigned (optional, default to assigned)
     * @param  string $state Issue的状态: open（开启的）, progressing(进行中), closed（关闭的）, rejected（拒绝的）。 默认: open (optional, default to open)
     * @param  string $labels 用逗号分开的标签。如: bug,performance (optional)
     * @param  string $sort 排序依据: 创建时间(created)，更新时间(updated_at)。默认: created_at (optional, default to created)
     * @param  string $direction 排序方式: 升序(asc)，降序(desc)。默认: desc (optional, default to desc)
     * @param  string $since 起始的更新时间，要求时间格式为 ISO 8601 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $schedule 计划开始日期，格式：20181006T173008+80-20181007T173008+80（区间），或者 -20181007T173008+80（小于20181007T173008+80），或者 20181006T173008+80-（大于20181006T173008+80），要求时间格式为20181006T173008+80 (optional)
     * @param  string $deadline 计划截止日期，格式同上 (optional)
     * @param  string $createdAt 任务创建时间，格式同上 (optional)
     * @param  string $finishedAt 任务完成时间，即任务最后一次转为已完成状态的时间点。格式同上 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5UserIssuesRequest($accessToken = null, $filter = 'assigned', $state = 'open', $labels = null, $sort = 'created', $direction = 'desc', $since = null, $page = '1', $perPage = '20', $schedule = null, $deadline = null, $createdAt = null, $finishedAt = null)
    {
        if ($perPage !== null && $perPage > 100) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling IssuesApi.getV5UserIssues, must be smaller than or equal to 100.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling IssuesApi.getV5UserIssues, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v5/user/issues';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state);
        }
        // query params
        if ($labels !== null) {
            $queryParams['labels'] = ObjectSerializer::toQueryValue($labels);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($since !== null) {
            $queryParams['since'] = ObjectSerializer::toQueryValue($since);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }
        // query params
        if ($schedule !== null) {
            $queryParams['schedule'] = ObjectSerializer::toQueryValue($schedule);
        }
        // query params
        if ($deadline !== null) {
            $queryParams['deadline'] = ObjectSerializer::toQueryValue($deadline);
        }
        // query params
        if ($createdAt !== null) {
            $queryParams['created_at'] = ObjectSerializer::toQueryValue($createdAt);
        }
        // query params
        if ($finishedAt !== null) {
            $queryParams['finished_at'] = ObjectSerializer::toQueryValue($finishedAt);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchV5EnterprisesEnterpriseIssuesNumber
     *
     * 更新企业的某个Issue
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $title Issue标题 (optional)
     * @param  string $state Issue 状态，open（开启的）、progressing（进行中）、closed（关闭的） (optional)
     * @param  string $body Issue描述 (optional)
     * @param  string $assignee Issue负责人的个人空间地址 (optional)
     * @param  string $collaborators Issue协助者的个人空间地址, 以 , 分隔 (optional)
     * @param  int $milestone 里程碑序号 (optional)
     * @param  string $labels 用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance (optional)
     * @param  string $program 项目ID (optional)
     * @param  bool $securityHole 是否是私有issue(默认为false) (optional)
     * @param  string $branch 分支名称，传空串表示取消关联分支 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\Issue
     */
    public function patchV5EnterprisesEnterpriseIssuesNumber($enterprise, $number, $accessToken = null, $title = null, $state = null, $body = null, $assignee = null, $collaborators = null, $milestone = null, $labels = null, $program = null, $securityHole = null, $branch = null)
    {
        list($response) = $this->patchV5EnterprisesEnterpriseIssuesNumberWithHttpInfo($enterprise, $number, $accessToken, $title, $state, $body, $assignee, $collaborators, $milestone, $labels, $program, $securityHole, $branch);
        return $response;
    }

    /**
     * Operation patchV5EnterprisesEnterpriseIssuesNumberWithHttpInfo
     *
     * 更新企业的某个Issue
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $title Issue标题 (optional)
     * @param  string $state Issue 状态，open（开启的）、progressing（进行中）、closed（关闭的） (optional)
     * @param  string $body Issue描述 (optional)
     * @param  string $assignee Issue负责人的个人空间地址 (optional)
     * @param  string $collaborators Issue协助者的个人空间地址, 以 , 分隔 (optional)
     * @param  int $milestone 里程碑序号 (optional)
     * @param  string $labels 用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance (optional)
     * @param  string $program 项目ID (optional)
     * @param  bool $securityHole 是否是私有issue(默认为false) (optional)
     * @param  string $branch 分支名称，传空串表示取消关联分支 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\Issue, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchV5EnterprisesEnterpriseIssuesNumberWithHttpInfo($enterprise, $number, $accessToken = null, $title = null, $state = null, $body = null, $assignee = null, $collaborators = null, $milestone = null, $labels = null, $program = null, $securityHole = null, $branch = null)
    {
        $returnType = '\Gitee\Model\Issue';
        $request = $this->patchV5EnterprisesEnterpriseIssuesNumberRequest($enterprise, $number, $accessToken, $title, $state, $body, $assignee, $collaborators, $milestone, $labels, $program, $securityHole, $branch);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\Issue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchV5EnterprisesEnterpriseIssuesNumberAsync
     *
     * 更新企业的某个Issue
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $title Issue标题 (optional)
     * @param  string $state Issue 状态，open（开启的）、progressing（进行中）、closed（关闭的） (optional)
     * @param  string $body Issue描述 (optional)
     * @param  string $assignee Issue负责人的个人空间地址 (optional)
     * @param  string $collaborators Issue协助者的个人空间地址, 以 , 分隔 (optional)
     * @param  int $milestone 里程碑序号 (optional)
     * @param  string $labels 用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance (optional)
     * @param  string $program 项目ID (optional)
     * @param  bool $securityHole 是否是私有issue(默认为false) (optional)
     * @param  string $branch 分支名称，传空串表示取消关联分支 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchV5EnterprisesEnterpriseIssuesNumberAsync($enterprise, $number, $accessToken = null, $title = null, $state = null, $body = null, $assignee = null, $collaborators = null, $milestone = null, $labels = null, $program = null, $securityHole = null, $branch = null)
    {
        return $this->patchV5EnterprisesEnterpriseIssuesNumberAsyncWithHttpInfo($enterprise, $number, $accessToken, $title, $state, $body, $assignee, $collaborators, $milestone, $labels, $program, $securityHole, $branch)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchV5EnterprisesEnterpriseIssuesNumberAsyncWithHttpInfo
     *
     * 更新企业的某个Issue
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $title Issue标题 (optional)
     * @param  string $state Issue 状态，open（开启的）、progressing（进行中）、closed（关闭的） (optional)
     * @param  string $body Issue描述 (optional)
     * @param  string $assignee Issue负责人的个人空间地址 (optional)
     * @param  string $collaborators Issue协助者的个人空间地址, 以 , 分隔 (optional)
     * @param  int $milestone 里程碑序号 (optional)
     * @param  string $labels 用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance (optional)
     * @param  string $program 项目ID (optional)
     * @param  bool $securityHole 是否是私有issue(默认为false) (optional)
     * @param  string $branch 分支名称，传空串表示取消关联分支 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchV5EnterprisesEnterpriseIssuesNumberAsyncWithHttpInfo($enterprise, $number, $accessToken = null, $title = null, $state = null, $body = null, $assignee = null, $collaborators = null, $milestone = null, $labels = null, $program = null, $securityHole = null, $branch = null)
    {
        $returnType = '\Gitee\Model\Issue';
        $request = $this->patchV5EnterprisesEnterpriseIssuesNumberRequest($enterprise, $number, $accessToken, $title, $state, $body, $assignee, $collaborators, $milestone, $labels, $program, $securityHole, $branch);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchV5EnterprisesEnterpriseIssuesNumber'
     *
     * @param  string $enterprise 企业的路径(path/login) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $title Issue标题 (optional)
     * @param  string $state Issue 状态，open（开启的）、progressing（进行中）、closed（关闭的） (optional)
     * @param  string $body Issue描述 (optional)
     * @param  string $assignee Issue负责人的个人空间地址 (optional)
     * @param  string $collaborators Issue协助者的个人空间地址, 以 , 分隔 (optional)
     * @param  int $milestone 里程碑序号 (optional)
     * @param  string $labels 用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance (optional)
     * @param  string $program 项目ID (optional)
     * @param  bool $securityHole 是否是私有issue(默认为false) (optional)
     * @param  string $branch 分支名称，传空串表示取消关联分支 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function patchV5EnterprisesEnterpriseIssuesNumberRequest($enterprise, $number, $accessToken = null, $title = null, $state = null, $body = null, $assignee = null, $collaborators = null, $milestone = null, $labels = null, $program = null, $securityHole = null, $branch = null)
    {
        // verify the required parameter 'enterprise' is set
        if ($enterprise === null || (is_array($enterprise) && count($enterprise) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $enterprise when calling patchV5EnterprisesEnterpriseIssuesNumber'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling patchV5EnterprisesEnterpriseIssuesNumber'
            );
        }

        $resourcePath = '/v5/enterprises/{enterprise}/issues/{number}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($enterprise !== null) {
            $resourcePath = str_replace(
                '{' . 'enterprise' . '}',
                ObjectSerializer::toPathValue($enterprise),
                $resourcePath
            );
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($title !== null) {
            $formParams['title'] = ObjectSerializer::toFormValue($title);
        }
        // form params
        if ($state !== null) {
            $formParams['state'] = ObjectSerializer::toFormValue($state);
        }
        // form params
        if ($body !== null) {
            $formParams['body'] = ObjectSerializer::toFormValue($body);
        }
        // form params
        if ($assignee !== null) {
            $formParams['assignee'] = ObjectSerializer::toFormValue($assignee);
        }
        // form params
        if ($collaborators !== null) {
            $formParams['collaborators'] = ObjectSerializer::toFormValue($collaborators);
        }
        // form params
        if ($milestone !== null) {
            $formParams['milestone'] = ObjectSerializer::toFormValue($milestone);
        }
        // form params
        if ($labels !== null) {
            $formParams['labels'] = ObjectSerializer::toFormValue($labels);
        }
        // form params
        if ($program !== null) {
            $formParams['program'] = ObjectSerializer::toFormValue($program);
        }
        // form params
        if ($securityHole !== null) {
            $formParams['security_hole'] = ObjectSerializer::toFormValue($securityHole);
        }
        // form params
        if ($branch !== null) {
            $formParams['branch'] = ObjectSerializer::toFormValue($branch);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchV5ReposOwnerIssuesNumber
     *
     * 更新Issue
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $repo 仓库路径(path) (optional)
     * @param  string $title Issue标题 (optional)
     * @param  string $state Issue 状态，open（开启的）、progressing（进行中）、closed（关闭的） (optional)
     * @param  string $body Issue描述 (optional)
     * @param  string $assignee Issue负责人的个人空间地址 (optional)
     * @param  string $collaborators Issue协助者的个人空间地址, 以 , 分隔 (optional)
     * @param  int $milestone 里程碑序号 (optional)
     * @param  string $labels 用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance (optional)
     * @param  string $program 项目ID (optional)
     * @param  bool $securityHole 是否是私有issue(默认为false) (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\Issue
     */
    public function patchV5ReposOwnerIssuesNumber($owner, $number, $accessToken = null, $repo = null, $title = null, $state = null, $body = null, $assignee = null, $collaborators = null, $milestone = null, $labels = null, $program = null, $securityHole = null)
    {
        list($response) = $this->patchV5ReposOwnerIssuesNumberWithHttpInfo($owner, $number, $accessToken, $repo, $title, $state, $body, $assignee, $collaborators, $milestone, $labels, $program, $securityHole);
        return $response;
    }

    /**
     * Operation patchV5ReposOwnerIssuesNumberWithHttpInfo
     *
     * 更新Issue
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $repo 仓库路径(path) (optional)
     * @param  string $title Issue标题 (optional)
     * @param  string $state Issue 状态，open（开启的）、progressing（进行中）、closed（关闭的） (optional)
     * @param  string $body Issue描述 (optional)
     * @param  string $assignee Issue负责人的个人空间地址 (optional)
     * @param  string $collaborators Issue协助者的个人空间地址, 以 , 分隔 (optional)
     * @param  int $milestone 里程碑序号 (optional)
     * @param  string $labels 用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance (optional)
     * @param  string $program 项目ID (optional)
     * @param  bool $securityHole 是否是私有issue(默认为false) (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\Issue, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchV5ReposOwnerIssuesNumberWithHttpInfo($owner, $number, $accessToken = null, $repo = null, $title = null, $state = null, $body = null, $assignee = null, $collaborators = null, $milestone = null, $labels = null, $program = null, $securityHole = null)
    {
        $returnType = '\Gitee\Model\Issue';
        $request = $this->patchV5ReposOwnerIssuesNumberRequest($owner, $number, $accessToken, $repo, $title, $state, $body, $assignee, $collaborators, $milestone, $labels, $program, $securityHole);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\Issue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchV5ReposOwnerIssuesNumberAsync
     *
     * 更新Issue
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $repo 仓库路径(path) (optional)
     * @param  string $title Issue标题 (optional)
     * @param  string $state Issue 状态，open（开启的）、progressing（进行中）、closed（关闭的） (optional)
     * @param  string $body Issue描述 (optional)
     * @param  string $assignee Issue负责人的个人空间地址 (optional)
     * @param  string $collaborators Issue协助者的个人空间地址, 以 , 分隔 (optional)
     * @param  int $milestone 里程碑序号 (optional)
     * @param  string $labels 用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance (optional)
     * @param  string $program 项目ID (optional)
     * @param  bool $securityHole 是否是私有issue(默认为false) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchV5ReposOwnerIssuesNumberAsync($owner, $number, $accessToken = null, $repo = null, $title = null, $state = null, $body = null, $assignee = null, $collaborators = null, $milestone = null, $labels = null, $program = null, $securityHole = null)
    {
        return $this->patchV5ReposOwnerIssuesNumberAsyncWithHttpInfo($owner, $number, $accessToken, $repo, $title, $state, $body, $assignee, $collaborators, $milestone, $labels, $program, $securityHole)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchV5ReposOwnerIssuesNumberAsyncWithHttpInfo
     *
     * 更新Issue
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $repo 仓库路径(path) (optional)
     * @param  string $title Issue标题 (optional)
     * @param  string $state Issue 状态，open（开启的）、progressing（进行中）、closed（关闭的） (optional)
     * @param  string $body Issue描述 (optional)
     * @param  string $assignee Issue负责人的个人空间地址 (optional)
     * @param  string $collaborators Issue协助者的个人空间地址, 以 , 分隔 (optional)
     * @param  int $milestone 里程碑序号 (optional)
     * @param  string $labels 用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance (optional)
     * @param  string $program 项目ID (optional)
     * @param  bool $securityHole 是否是私有issue(默认为false) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchV5ReposOwnerIssuesNumberAsyncWithHttpInfo($owner, $number, $accessToken = null, $repo = null, $title = null, $state = null, $body = null, $assignee = null, $collaborators = null, $milestone = null, $labels = null, $program = null, $securityHole = null)
    {
        $returnType = '\Gitee\Model\Issue';
        $request = $this->patchV5ReposOwnerIssuesNumberRequest($owner, $number, $accessToken, $repo, $title, $state, $body, $assignee, $collaborators, $milestone, $labels, $program, $securityHole);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchV5ReposOwnerIssuesNumber'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $repo 仓库路径(path) (optional)
     * @param  string $title Issue标题 (optional)
     * @param  string $state Issue 状态，open（开启的）、progressing（进行中）、closed（关闭的） (optional)
     * @param  string $body Issue描述 (optional)
     * @param  string $assignee Issue负责人的个人空间地址 (optional)
     * @param  string $collaborators Issue协助者的个人空间地址, 以 , 分隔 (optional)
     * @param  int $milestone 里程碑序号 (optional)
     * @param  string $labels 用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance (optional)
     * @param  string $program 项目ID (optional)
     * @param  bool $securityHole 是否是私有issue(默认为false) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function patchV5ReposOwnerIssuesNumberRequest($owner, $number, $accessToken = null, $repo = null, $title = null, $state = null, $body = null, $assignee = null, $collaborators = null, $milestone = null, $labels = null, $program = null, $securityHole = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling patchV5ReposOwnerIssuesNumber'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling patchV5ReposOwnerIssuesNumber'
            );
        }

        $resourcePath = '/v5/repos/{owner}/issues/{number}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($repo !== null) {
            $formParams['repo'] = ObjectSerializer::toFormValue($repo);
        }
        // form params
        if ($title !== null) {
            $formParams['title'] = ObjectSerializer::toFormValue($title);
        }
        // form params
        if ($state !== null) {
            $formParams['state'] = ObjectSerializer::toFormValue($state);
        }
        // form params
        if ($body !== null) {
            $formParams['body'] = ObjectSerializer::toFormValue($body);
        }
        // form params
        if ($assignee !== null) {
            $formParams['assignee'] = ObjectSerializer::toFormValue($assignee);
        }
        // form params
        if ($collaborators !== null) {
            $formParams['collaborators'] = ObjectSerializer::toFormValue($collaborators);
        }
        // form params
        if ($milestone !== null) {
            $formParams['milestone'] = ObjectSerializer::toFormValue($milestone);
        }
        // form params
        if ($labels !== null) {
            $formParams['labels'] = ObjectSerializer::toFormValue($labels);
        }
        // form params
        if ($program !== null) {
            $formParams['program'] = ObjectSerializer::toFormValue($program);
        }
        // form params
        if ($securityHole !== null) {
            $formParams['security_hole'] = ObjectSerializer::toFormValue($securityHole);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchV5ReposOwnerRepoIssuesCommentsId
     *
     * 更新Issue某条评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id 评论的ID (required)
     * @param  string $body The contents of the comment. (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\Note
     */
    public function patchV5ReposOwnerRepoIssuesCommentsId($owner, $repo, $id, $body, $accessToken = null)
    {
        list($response) = $this->patchV5ReposOwnerRepoIssuesCommentsIdWithHttpInfo($owner, $repo, $id, $body, $accessToken);
        return $response;
    }

    /**
     * Operation patchV5ReposOwnerRepoIssuesCommentsIdWithHttpInfo
     *
     * 更新Issue某条评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id 评论的ID (required)
     * @param  string $body The contents of the comment. (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\Note, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchV5ReposOwnerRepoIssuesCommentsIdWithHttpInfo($owner, $repo, $id, $body, $accessToken = null)
    {
        $returnType = '\Gitee\Model\Note';
        $request = $this->patchV5ReposOwnerRepoIssuesCommentsIdRequest($owner, $repo, $id, $body, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\Note',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchV5ReposOwnerRepoIssuesCommentsIdAsync
     *
     * 更新Issue某条评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id 评论的ID (required)
     * @param  string $body The contents of the comment. (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchV5ReposOwnerRepoIssuesCommentsIdAsync($owner, $repo, $id, $body, $accessToken = null)
    {
        return $this->patchV5ReposOwnerRepoIssuesCommentsIdAsyncWithHttpInfo($owner, $repo, $id, $body, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchV5ReposOwnerRepoIssuesCommentsIdAsyncWithHttpInfo
     *
     * 更新Issue某条评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id 评论的ID (required)
     * @param  string $body The contents of the comment. (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchV5ReposOwnerRepoIssuesCommentsIdAsyncWithHttpInfo($owner, $repo, $id, $body, $accessToken = null)
    {
        $returnType = '\Gitee\Model\Note';
        $request = $this->patchV5ReposOwnerRepoIssuesCommentsIdRequest($owner, $repo, $id, $body, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchV5ReposOwnerRepoIssuesCommentsId'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id 评论的ID (required)
     * @param  string $body The contents of the comment. (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function patchV5ReposOwnerRepoIssuesCommentsIdRequest($owner, $repo, $id, $body, $accessToken = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling patchV5ReposOwnerRepoIssuesCommentsId'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling patchV5ReposOwnerRepoIssuesCommentsId'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling patchV5ReposOwnerRepoIssuesCommentsId'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling patchV5ReposOwnerRepoIssuesCommentsId'
            );
        }

        $resourcePath = '/v5/repos/{owner}/{repo}/issues/comments/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($body !== null) {
            $formParams['body'] = ObjectSerializer::toFormValue($body);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postV5ReposOwnerIssues
     *
     * 创建Issue
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $title Issue标题 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $repo 仓库路径(path) (optional)
     * @param  string $issueType 企业自定义任务类型，非企业默认任务类型为“任务” (optional)
     * @param  string $body Issue描述 (optional)
     * @param  string $assignee Issue负责人的个人空间地址 (optional)
     * @param  string $collaborators Issue协助者的个人空间地址, 以 , 分隔 (optional)
     * @param  int $milestone 里程碑序号 (optional)
     * @param  string $labels 用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance (optional)
     * @param  string $program 项目ID (optional)
     * @param  bool $securityHole 是否是私有issue(默认为false) (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\Issue
     */
    public function postV5ReposOwnerIssues($owner, $title, $accessToken = null, $repo = null, $issueType = null, $body = null, $assignee = null, $collaborators = null, $milestone = null, $labels = null, $program = null, $securityHole = null)
    {
        list($response) = $this->postV5ReposOwnerIssuesWithHttpInfo($owner, $title, $accessToken, $repo, $issueType, $body, $assignee, $collaborators, $milestone, $labels, $program, $securityHole);
        return $response;
    }

    /**
     * Operation postV5ReposOwnerIssuesWithHttpInfo
     *
     * 创建Issue
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $title Issue标题 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $repo 仓库路径(path) (optional)
     * @param  string $issueType 企业自定义任务类型，非企业默认任务类型为“任务” (optional)
     * @param  string $body Issue描述 (optional)
     * @param  string $assignee Issue负责人的个人空间地址 (optional)
     * @param  string $collaborators Issue协助者的个人空间地址, 以 , 分隔 (optional)
     * @param  int $milestone 里程碑序号 (optional)
     * @param  string $labels 用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance (optional)
     * @param  string $program 项目ID (optional)
     * @param  bool $securityHole 是否是私有issue(默认为false) (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\Issue, HTTP status code, HTTP response headers (array of strings)
     */
    public function postV5ReposOwnerIssuesWithHttpInfo($owner, $title, $accessToken = null, $repo = null, $issueType = null, $body = null, $assignee = null, $collaborators = null, $milestone = null, $labels = null, $program = null, $securityHole = null)
    {
        $returnType = '\Gitee\Model\Issue';
        $request = $this->postV5ReposOwnerIssuesRequest($owner, $title, $accessToken, $repo, $issueType, $body, $assignee, $collaborators, $milestone, $labels, $program, $securityHole);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\Issue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postV5ReposOwnerIssuesAsync
     *
     * 创建Issue
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $title Issue标题 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $repo 仓库路径(path) (optional)
     * @param  string $issueType 企业自定义任务类型，非企业默认任务类型为“任务” (optional)
     * @param  string $body Issue描述 (optional)
     * @param  string $assignee Issue负责人的个人空间地址 (optional)
     * @param  string $collaborators Issue协助者的个人空间地址, 以 , 分隔 (optional)
     * @param  int $milestone 里程碑序号 (optional)
     * @param  string $labels 用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance (optional)
     * @param  string $program 项目ID (optional)
     * @param  bool $securityHole 是否是私有issue(默认为false) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV5ReposOwnerIssuesAsync($owner, $title, $accessToken = null, $repo = null, $issueType = null, $body = null, $assignee = null, $collaborators = null, $milestone = null, $labels = null, $program = null, $securityHole = null)
    {
        return $this->postV5ReposOwnerIssuesAsyncWithHttpInfo($owner, $title, $accessToken, $repo, $issueType, $body, $assignee, $collaborators, $milestone, $labels, $program, $securityHole)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postV5ReposOwnerIssuesAsyncWithHttpInfo
     *
     * 创建Issue
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $title Issue标题 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $repo 仓库路径(path) (optional)
     * @param  string $issueType 企业自定义任务类型，非企业默认任务类型为“任务” (optional)
     * @param  string $body Issue描述 (optional)
     * @param  string $assignee Issue负责人的个人空间地址 (optional)
     * @param  string $collaborators Issue协助者的个人空间地址, 以 , 分隔 (optional)
     * @param  int $milestone 里程碑序号 (optional)
     * @param  string $labels 用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance (optional)
     * @param  string $program 项目ID (optional)
     * @param  bool $securityHole 是否是私有issue(默认为false) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV5ReposOwnerIssuesAsyncWithHttpInfo($owner, $title, $accessToken = null, $repo = null, $issueType = null, $body = null, $assignee = null, $collaborators = null, $milestone = null, $labels = null, $program = null, $securityHole = null)
    {
        $returnType = '\Gitee\Model\Issue';
        $request = $this->postV5ReposOwnerIssuesRequest($owner, $title, $accessToken, $repo, $issueType, $body, $assignee, $collaborators, $milestone, $labels, $program, $securityHole);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postV5ReposOwnerIssues'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $title Issue标题 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $repo 仓库路径(path) (optional)
     * @param  string $issueType 企业自定义任务类型，非企业默认任务类型为“任务” (optional)
     * @param  string $body Issue描述 (optional)
     * @param  string $assignee Issue负责人的个人空间地址 (optional)
     * @param  string $collaborators Issue协助者的个人空间地址, 以 , 分隔 (optional)
     * @param  int $milestone 里程碑序号 (optional)
     * @param  string $labels 用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance (optional)
     * @param  string $program 项目ID (optional)
     * @param  bool $securityHole 是否是私有issue(默认为false) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postV5ReposOwnerIssuesRequest($owner, $title, $accessToken = null, $repo = null, $issueType = null, $body = null, $assignee = null, $collaborators = null, $milestone = null, $labels = null, $program = null, $securityHole = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling postV5ReposOwnerIssues'
            );
        }
        // verify the required parameter 'title' is set
        if ($title === null || (is_array($title) && count($title) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $title when calling postV5ReposOwnerIssues'
            );
        }

        $resourcePath = '/v5/repos/{owner}/issues';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($repo !== null) {
            $formParams['repo'] = ObjectSerializer::toFormValue($repo);
        }
        // form params
        if ($title !== null) {
            $formParams['title'] = ObjectSerializer::toFormValue($title);
        }
        // form params
        if ($issueType !== null) {
            $formParams['issue_type'] = ObjectSerializer::toFormValue($issueType);
        }
        // form params
        if ($body !== null) {
            $formParams['body'] = ObjectSerializer::toFormValue($body);
        }
        // form params
        if ($assignee !== null) {
            $formParams['assignee'] = ObjectSerializer::toFormValue($assignee);
        }
        // form params
        if ($collaborators !== null) {
            $formParams['collaborators'] = ObjectSerializer::toFormValue($collaborators);
        }
        // form params
        if ($milestone !== null) {
            $formParams['milestone'] = ObjectSerializer::toFormValue($milestone);
        }
        // form params
        if ($labels !== null) {
            $formParams['labels'] = ObjectSerializer::toFormValue($labels);
        }
        // form params
        if ($program !== null) {
            $formParams['program'] = ObjectSerializer::toFormValue($program);
        }
        // form params
        if ($securityHole !== null) {
            $formParams['security_hole'] = ObjectSerializer::toFormValue($securityHole);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postV5ReposOwnerRepoIssuesNumberComments
     *
     * 创建某个Issue评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $body The contents of the comment. (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\Note
     */
    public function postV5ReposOwnerRepoIssuesNumberComments($owner, $repo, $number, $body, $accessToken = null)
    {
        list($response) = $this->postV5ReposOwnerRepoIssuesNumberCommentsWithHttpInfo($owner, $repo, $number, $body, $accessToken);
        return $response;
    }

    /**
     * Operation postV5ReposOwnerRepoIssuesNumberCommentsWithHttpInfo
     *
     * 创建某个Issue评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $body The contents of the comment. (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\Note, HTTP status code, HTTP response headers (array of strings)
     */
    public function postV5ReposOwnerRepoIssuesNumberCommentsWithHttpInfo($owner, $repo, $number, $body, $accessToken = null)
    {
        $returnType = '\Gitee\Model\Note';
        $request = $this->postV5ReposOwnerRepoIssuesNumberCommentsRequest($owner, $repo, $number, $body, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\Note',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postV5ReposOwnerRepoIssuesNumberCommentsAsync
     *
     * 创建某个Issue评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $body The contents of the comment. (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV5ReposOwnerRepoIssuesNumberCommentsAsync($owner, $repo, $number, $body, $accessToken = null)
    {
        return $this->postV5ReposOwnerRepoIssuesNumberCommentsAsyncWithHttpInfo($owner, $repo, $number, $body, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postV5ReposOwnerRepoIssuesNumberCommentsAsyncWithHttpInfo
     *
     * 创建某个Issue评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $body The contents of the comment. (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV5ReposOwnerRepoIssuesNumberCommentsAsyncWithHttpInfo($owner, $repo, $number, $body, $accessToken = null)
    {
        $returnType = '\Gitee\Model\Note';
        $request = $this->postV5ReposOwnerRepoIssuesNumberCommentsRequest($owner, $repo, $number, $body, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postV5ReposOwnerRepoIssuesNumberComments'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $number Issue 编号(区分大小写，无需添加 # 号) (required)
     * @param  string $body The contents of the comment. (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postV5ReposOwnerRepoIssuesNumberCommentsRequest($owner, $repo, $number, $body, $accessToken = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling postV5ReposOwnerRepoIssuesNumberComments'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling postV5ReposOwnerRepoIssuesNumberComments'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling postV5ReposOwnerRepoIssuesNumberComments'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postV5ReposOwnerRepoIssuesNumberComments'
            );
        }

        $resourcePath = '/v5/repos/{owner}/{repo}/issues/{number}/comments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($body !== null) {
            $formParams['body'] = ObjectSerializer::toFormValue($body);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
