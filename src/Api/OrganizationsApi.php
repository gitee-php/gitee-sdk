<?php
/**
 * OrganizationsApi
 * PHP version 5
 *
 * @category Class
 * @package  Gitee
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * Gitee SDK for PHP
 *
 * OpenAPI spec version: 5.4.85
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.42
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Gitee\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Gitee\ApiException;
use Gitee\Configuration;
use Gitee\HeaderSelector;
use Gitee\ObjectSerializer;

/**
 * OrganizationsApi Class Doc Comment
 *
 * @category Class
 * @package  Gitee
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrganizationsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteV5OrgsOrgMembershipsUsername
     *
     * 移除授权用户所管理组织中的成员
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteV5OrgsOrgMembershipsUsername($org, $username, $accessToken = null)
    {
        $this->deleteV5OrgsOrgMembershipsUsernameWithHttpInfo($org, $username, $accessToken);
    }

    /**
     * Operation deleteV5OrgsOrgMembershipsUsernameWithHttpInfo
     *
     * 移除授权用户所管理组织中的成员
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteV5OrgsOrgMembershipsUsernameWithHttpInfo($org, $username, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteV5OrgsOrgMembershipsUsernameRequest($org, $username, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteV5OrgsOrgMembershipsUsernameAsync
     *
     * 移除授权用户所管理组织中的成员
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteV5OrgsOrgMembershipsUsernameAsync($org, $username, $accessToken = null)
    {
        return $this->deleteV5OrgsOrgMembershipsUsernameAsyncWithHttpInfo($org, $username, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteV5OrgsOrgMembershipsUsernameAsyncWithHttpInfo
     *
     * 移除授权用户所管理组织中的成员
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteV5OrgsOrgMembershipsUsernameAsyncWithHttpInfo($org, $username, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteV5OrgsOrgMembershipsUsernameRequest($org, $username, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteV5OrgsOrgMembershipsUsername'
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteV5OrgsOrgMembershipsUsernameRequest($org, $username, $accessToken = null)
    {
        // verify the required parameter 'org' is set
        if ($org === null || (is_array($org) && count($org) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org when calling deleteV5OrgsOrgMembershipsUsername'
            );
        }
        // verify the required parameter 'username' is set
        if ($username === null || (is_array($username) && count($username) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $username when calling deleteV5OrgsOrgMembershipsUsername'
            );
        }

        $resourcePath = '/v5/orgs/{org}/memberships/{username}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($org !== null) {
            $resourcePath = str_replace(
                '{' . 'org' . '}',
                ObjectSerializer::toPathValue($org),
                $resourcePath
            );
        }
        // path params
        if ($username !== null) {
            $resourcePath = str_replace(
                '{' . 'username' . '}',
                ObjectSerializer::toPathValue($username),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteV5UserMembershipsOrgsOrg
     *
     * 退出一个组织
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteV5UserMembershipsOrgsOrg($org, $accessToken = null)
    {
        $this->deleteV5UserMembershipsOrgsOrgWithHttpInfo($org, $accessToken);
    }

    /**
     * Operation deleteV5UserMembershipsOrgsOrgWithHttpInfo
     *
     * 退出一个组织
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteV5UserMembershipsOrgsOrgWithHttpInfo($org, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteV5UserMembershipsOrgsOrgRequest($org, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteV5UserMembershipsOrgsOrgAsync
     *
     * 退出一个组织
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteV5UserMembershipsOrgsOrgAsync($org, $accessToken = null)
    {
        return $this->deleteV5UserMembershipsOrgsOrgAsyncWithHttpInfo($org, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteV5UserMembershipsOrgsOrgAsyncWithHttpInfo
     *
     * 退出一个组织
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteV5UserMembershipsOrgsOrgAsyncWithHttpInfo($org, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteV5UserMembershipsOrgsOrgRequest($org, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteV5UserMembershipsOrgsOrg'
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteV5UserMembershipsOrgsOrgRequest($org, $accessToken = null)
    {
        // verify the required parameter 'org' is set
        if ($org === null || (is_array($org) && count($org) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org when calling deleteV5UserMembershipsOrgsOrg'
            );
        }

        $resourcePath = '/v5/user/memberships/orgs/{org}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($org !== null) {
            $resourcePath = str_replace(
                '{' . 'org' . '}',
                ObjectSerializer::toPathValue($org),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5OrgsOrg
     *
     * 获取一个组织
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\GroupDetail
     */
    public function getV5OrgsOrg($org, $accessToken = null)
    {
        list($response) = $this->getV5OrgsOrgWithHttpInfo($org, $accessToken);
        return $response;
    }

    /**
     * Operation getV5OrgsOrgWithHttpInfo
     *
     * 获取一个组织
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\GroupDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5OrgsOrgWithHttpInfo($org, $accessToken = null)
    {
        $returnType = '\Gitee\Model\GroupDetail';
        $request = $this->getV5OrgsOrgRequest($org, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\GroupDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5OrgsOrgAsync
     *
     * 获取一个组织
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5OrgsOrgAsync($org, $accessToken = null)
    {
        return $this->getV5OrgsOrgAsyncWithHttpInfo($org, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5OrgsOrgAsyncWithHttpInfo
     *
     * 获取一个组织
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5OrgsOrgAsyncWithHttpInfo($org, $accessToken = null)
    {
        $returnType = '\Gitee\Model\GroupDetail';
        $request = $this->getV5OrgsOrgRequest($org, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5OrgsOrg'
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5OrgsOrgRequest($org, $accessToken = null)
    {
        // verify the required parameter 'org' is set
        if ($org === null || (is_array($org) && count($org) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org when calling getV5OrgsOrg'
            );
        }

        $resourcePath = '/v5/orgs/{org}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($org !== null) {
            $resourcePath = str_replace(
                '{' . 'org' . '}',
                ObjectSerializer::toPathValue($org),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5OrgsOrgFollowers
     *
     * 列出指定组织的所有关注者
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\GroupFollowers[]
     */
    public function getV5OrgsOrgFollowers($org, $accessToken = null, $page = '1', $perPage = '20')
    {
        list($response) = $this->getV5OrgsOrgFollowersWithHttpInfo($org, $accessToken, $page, $perPage);
        return $response;
    }

    /**
     * Operation getV5OrgsOrgFollowersWithHttpInfo
     *
     * 列出指定组织的所有关注者
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\GroupFollowers[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5OrgsOrgFollowersWithHttpInfo($org, $accessToken = null, $page = '1', $perPage = '20')
    {
        $returnType = '\Gitee\Model\GroupFollowers[]';
        $request = $this->getV5OrgsOrgFollowersRequest($org, $accessToken, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\GroupFollowers[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5OrgsOrgFollowersAsync
     *
     * 列出指定组织的所有关注者
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5OrgsOrgFollowersAsync($org, $accessToken = null, $page = '1', $perPage = '20')
    {
        return $this->getV5OrgsOrgFollowersAsyncWithHttpInfo($org, $accessToken, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5OrgsOrgFollowersAsyncWithHttpInfo
     *
     * 列出指定组织的所有关注者
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5OrgsOrgFollowersAsyncWithHttpInfo($org, $accessToken = null, $page = '1', $perPage = '20')
    {
        $returnType = '\Gitee\Model\GroupFollowers[]';
        $request = $this->getV5OrgsOrgFollowersRequest($org, $accessToken, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5OrgsOrgFollowers'
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5OrgsOrgFollowersRequest($org, $accessToken = null, $page = '1', $perPage = '20')
    {
        // verify the required parameter 'org' is set
        if ($org === null || (is_array($org) && count($org) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org when calling getV5OrgsOrgFollowers'
            );
        }
        if ($perPage !== null && $perPage > 100) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling OrganizationsApi.getV5OrgsOrgFollowers, must be smaller than or equal to 100.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling OrganizationsApi.getV5OrgsOrgFollowers, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v5/orgs/{org}/followers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($org !== null) {
            $resourcePath = str_replace(
                '{' . 'org' . '}',
                ObjectSerializer::toPathValue($org),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5OrgsOrgMembers
     *
     * 列出一个组织的所有成员
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $role 根据角色筛选成员 (optional, default to all)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\UserBasic[]
     */
    public function getV5OrgsOrgMembers($org, $accessToken = null, $page = '1', $perPage = '20', $role = 'all')
    {
        list($response) = $this->getV5OrgsOrgMembersWithHttpInfo($org, $accessToken, $page, $perPage, $role);
        return $response;
    }

    /**
     * Operation getV5OrgsOrgMembersWithHttpInfo
     *
     * 列出一个组织的所有成员
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $role 根据角色筛选成员 (optional, default to all)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\UserBasic[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5OrgsOrgMembersWithHttpInfo($org, $accessToken = null, $page = '1', $perPage = '20', $role = 'all')
    {
        $returnType = '\Gitee\Model\UserBasic[]';
        $request = $this->getV5OrgsOrgMembersRequest($org, $accessToken, $page, $perPage, $role);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\UserBasic[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5OrgsOrgMembersAsync
     *
     * 列出一个组织的所有成员
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $role 根据角色筛选成员 (optional, default to all)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5OrgsOrgMembersAsync($org, $accessToken = null, $page = '1', $perPage = '20', $role = 'all')
    {
        return $this->getV5OrgsOrgMembersAsyncWithHttpInfo($org, $accessToken, $page, $perPage, $role)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5OrgsOrgMembersAsyncWithHttpInfo
     *
     * 列出一个组织的所有成员
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $role 根据角色筛选成员 (optional, default to all)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5OrgsOrgMembersAsyncWithHttpInfo($org, $accessToken = null, $page = '1', $perPage = '20', $role = 'all')
    {
        $returnType = '\Gitee\Model\UserBasic[]';
        $request = $this->getV5OrgsOrgMembersRequest($org, $accessToken, $page, $perPage, $role);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5OrgsOrgMembers'
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $role 根据角色筛选成员 (optional, default to all)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5OrgsOrgMembersRequest($org, $accessToken = null, $page = '1', $perPage = '20', $role = 'all')
    {
        // verify the required parameter 'org' is set
        if ($org === null || (is_array($org) && count($org) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org when calling getV5OrgsOrgMembers'
            );
        }
        if ($perPage !== null && $perPage > 100) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling OrganizationsApi.getV5OrgsOrgMembers, must be smaller than or equal to 100.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling OrganizationsApi.getV5OrgsOrgMembers, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v5/orgs/{org}/members';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }
        // query params
        if ($role !== null) {
            $queryParams['role'] = ObjectSerializer::toQueryValue($role);
        }

        // path params
        if ($org !== null) {
            $resourcePath = str_replace(
                '{' . 'org' . '}',
                ObjectSerializer::toPathValue($org),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5OrgsOrgMembershipsUsername
     *
     * 获取授权用户所属组织的一个成员
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\GroupMember
     */
    public function getV5OrgsOrgMembershipsUsername($org, $username, $accessToken = null)
    {
        list($response) = $this->getV5OrgsOrgMembershipsUsernameWithHttpInfo($org, $username, $accessToken);
        return $response;
    }

    /**
     * Operation getV5OrgsOrgMembershipsUsernameWithHttpInfo
     *
     * 获取授权用户所属组织的一个成员
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\GroupMember, HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5OrgsOrgMembershipsUsernameWithHttpInfo($org, $username, $accessToken = null)
    {
        $returnType = '\Gitee\Model\GroupMember';
        $request = $this->getV5OrgsOrgMembershipsUsernameRequest($org, $username, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\GroupMember',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5OrgsOrgMembershipsUsernameAsync
     *
     * 获取授权用户所属组织的一个成员
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5OrgsOrgMembershipsUsernameAsync($org, $username, $accessToken = null)
    {
        return $this->getV5OrgsOrgMembershipsUsernameAsyncWithHttpInfo($org, $username, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5OrgsOrgMembershipsUsernameAsyncWithHttpInfo
     *
     * 获取授权用户所属组织的一个成员
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5OrgsOrgMembershipsUsernameAsyncWithHttpInfo($org, $username, $accessToken = null)
    {
        $returnType = '\Gitee\Model\GroupMember';
        $request = $this->getV5OrgsOrgMembershipsUsernameRequest($org, $username, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5OrgsOrgMembershipsUsername'
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5OrgsOrgMembershipsUsernameRequest($org, $username, $accessToken = null)
    {
        // verify the required parameter 'org' is set
        if ($org === null || (is_array($org) && count($org) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org when calling getV5OrgsOrgMembershipsUsername'
            );
        }
        // verify the required parameter 'username' is set
        if ($username === null || (is_array($username) && count($username) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $username when calling getV5OrgsOrgMembershipsUsername'
            );
        }

        $resourcePath = '/v5/orgs/{org}/memberships/{username}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($org !== null) {
            $resourcePath = str_replace(
                '{' . 'org' . '}',
                ObjectSerializer::toPathValue($org),
                $resourcePath
            );
        }
        // path params
        if ($username !== null) {
            $resourcePath = str_replace(
                '{' . 'username' . '}',
                ObjectSerializer::toPathValue($username),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5UserMembershipsOrgs
     *
     * 列出授权用户在所属组织的成员资料
     *
     * @param  string $accessToken 用户授权码 (optional)
     * @param  bool $active 根据成员是否已激活进行筛选资料，缺省返回所有资料 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\GroupMember[]
     */
    public function getV5UserMembershipsOrgs($accessToken = null, $active = null, $page = '1', $perPage = '20')
    {
        list($response) = $this->getV5UserMembershipsOrgsWithHttpInfo($accessToken, $active, $page, $perPage);
        return $response;
    }

    /**
     * Operation getV5UserMembershipsOrgsWithHttpInfo
     *
     * 列出授权用户在所属组织的成员资料
     *
     * @param  string $accessToken 用户授权码 (optional)
     * @param  bool $active 根据成员是否已激活进行筛选资料，缺省返回所有资料 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\GroupMember[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5UserMembershipsOrgsWithHttpInfo($accessToken = null, $active = null, $page = '1', $perPage = '20')
    {
        $returnType = '\Gitee\Model\GroupMember[]';
        $request = $this->getV5UserMembershipsOrgsRequest($accessToken, $active, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\GroupMember[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5UserMembershipsOrgsAsync
     *
     * 列出授权用户在所属组织的成员资料
     *
     * @param  string $accessToken 用户授权码 (optional)
     * @param  bool $active 根据成员是否已激活进行筛选资料，缺省返回所有资料 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5UserMembershipsOrgsAsync($accessToken = null, $active = null, $page = '1', $perPage = '20')
    {
        return $this->getV5UserMembershipsOrgsAsyncWithHttpInfo($accessToken, $active, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5UserMembershipsOrgsAsyncWithHttpInfo
     *
     * 列出授权用户在所属组织的成员资料
     *
     * @param  string $accessToken 用户授权码 (optional)
     * @param  bool $active 根据成员是否已激活进行筛选资料，缺省返回所有资料 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5UserMembershipsOrgsAsyncWithHttpInfo($accessToken = null, $active = null, $page = '1', $perPage = '20')
    {
        $returnType = '\Gitee\Model\GroupMember[]';
        $request = $this->getV5UserMembershipsOrgsRequest($accessToken, $active, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5UserMembershipsOrgs'
     *
     * @param  string $accessToken 用户授权码 (optional)
     * @param  bool $active 根据成员是否已激活进行筛选资料，缺省返回所有资料 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5UserMembershipsOrgsRequest($accessToken = null, $active = null, $page = '1', $perPage = '20')
    {
        if ($perPage !== null && $perPage > 100) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling OrganizationsApi.getV5UserMembershipsOrgs, must be smaller than or equal to 100.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling OrganizationsApi.getV5UserMembershipsOrgs, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v5/user/memberships/orgs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($active !== null) {
            $queryParams['active'] = ObjectSerializer::toQueryValue($active);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5UserMembershipsOrgsOrg
     *
     * 获取授权用户在一个组织的成员资料
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\GroupMember
     */
    public function getV5UserMembershipsOrgsOrg($org, $accessToken = null)
    {
        list($response) = $this->getV5UserMembershipsOrgsOrgWithHttpInfo($org, $accessToken);
        return $response;
    }

    /**
     * Operation getV5UserMembershipsOrgsOrgWithHttpInfo
     *
     * 获取授权用户在一个组织的成员资料
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\GroupMember, HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5UserMembershipsOrgsOrgWithHttpInfo($org, $accessToken = null)
    {
        $returnType = '\Gitee\Model\GroupMember';
        $request = $this->getV5UserMembershipsOrgsOrgRequest($org, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\GroupMember',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5UserMembershipsOrgsOrgAsync
     *
     * 获取授权用户在一个组织的成员资料
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5UserMembershipsOrgsOrgAsync($org, $accessToken = null)
    {
        return $this->getV5UserMembershipsOrgsOrgAsyncWithHttpInfo($org, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5UserMembershipsOrgsOrgAsyncWithHttpInfo
     *
     * 获取授权用户在一个组织的成员资料
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5UserMembershipsOrgsOrgAsyncWithHttpInfo($org, $accessToken = null)
    {
        $returnType = '\Gitee\Model\GroupMember';
        $request = $this->getV5UserMembershipsOrgsOrgRequest($org, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5UserMembershipsOrgsOrg'
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5UserMembershipsOrgsOrgRequest($org, $accessToken = null)
    {
        // verify the required parameter 'org' is set
        if ($org === null || (is_array($org) && count($org) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org when calling getV5UserMembershipsOrgsOrg'
            );
        }

        $resourcePath = '/v5/user/memberships/orgs/{org}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($org !== null) {
            $resourcePath = str_replace(
                '{' . 'org' . '}',
                ObjectSerializer::toPathValue($org),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5UserOrgs
     *
     * 列出授权用户所属的组织
     *
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  bool $admin 只列出授权用户管理的组织 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\Group[]
     */
    public function getV5UserOrgs($accessToken = null, $page = '1', $perPage = '20', $admin = null)
    {
        list($response) = $this->getV5UserOrgsWithHttpInfo($accessToken, $page, $perPage, $admin);
        return $response;
    }

    /**
     * Operation getV5UserOrgsWithHttpInfo
     *
     * 列出授权用户所属的组织
     *
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  bool $admin 只列出授权用户管理的组织 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\Group[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5UserOrgsWithHttpInfo($accessToken = null, $page = '1', $perPage = '20', $admin = null)
    {
        $returnType = '\Gitee\Model\Group[]';
        $request = $this->getV5UserOrgsRequest($accessToken, $page, $perPage, $admin);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\Group[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5UserOrgsAsync
     *
     * 列出授权用户所属的组织
     *
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  bool $admin 只列出授权用户管理的组织 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5UserOrgsAsync($accessToken = null, $page = '1', $perPage = '20', $admin = null)
    {
        return $this->getV5UserOrgsAsyncWithHttpInfo($accessToken, $page, $perPage, $admin)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5UserOrgsAsyncWithHttpInfo
     *
     * 列出授权用户所属的组织
     *
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  bool $admin 只列出授权用户管理的组织 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5UserOrgsAsyncWithHttpInfo($accessToken = null, $page = '1', $perPage = '20', $admin = null)
    {
        $returnType = '\Gitee\Model\Group[]';
        $request = $this->getV5UserOrgsRequest($accessToken, $page, $perPage, $admin);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5UserOrgs'
     *
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  bool $admin 只列出授权用户管理的组织 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5UserOrgsRequest($accessToken = null, $page = '1', $perPage = '20', $admin = null)
    {
        if ($perPage !== null && $perPage > 100) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling OrganizationsApi.getV5UserOrgs, must be smaller than or equal to 100.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling OrganizationsApi.getV5UserOrgs, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v5/user/orgs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }
        // query params
        if ($admin !== null) {
            $queryParams['admin'] = ObjectSerializer::toQueryValue($admin);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5UsersUsernameOrgs
     *
     * 列出用户所属的组织
     *
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\Group[]
     */
    public function getV5UsersUsernameOrgs($username, $accessToken = null, $page = '1', $perPage = '20')
    {
        list($response) = $this->getV5UsersUsernameOrgsWithHttpInfo($username, $accessToken, $page, $perPage);
        return $response;
    }

    /**
     * Operation getV5UsersUsernameOrgsWithHttpInfo
     *
     * 列出用户所属的组织
     *
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\Group[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5UsersUsernameOrgsWithHttpInfo($username, $accessToken = null, $page = '1', $perPage = '20')
    {
        $returnType = '\Gitee\Model\Group[]';
        $request = $this->getV5UsersUsernameOrgsRequest($username, $accessToken, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\Group[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5UsersUsernameOrgsAsync
     *
     * 列出用户所属的组织
     *
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5UsersUsernameOrgsAsync($username, $accessToken = null, $page = '1', $perPage = '20')
    {
        return $this->getV5UsersUsernameOrgsAsyncWithHttpInfo($username, $accessToken, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5UsersUsernameOrgsAsyncWithHttpInfo
     *
     * 列出用户所属的组织
     *
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5UsersUsernameOrgsAsyncWithHttpInfo($username, $accessToken = null, $page = '1', $perPage = '20')
    {
        $returnType = '\Gitee\Model\Group[]';
        $request = $this->getV5UsersUsernameOrgsRequest($username, $accessToken, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5UsersUsernameOrgs'
     *
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5UsersUsernameOrgsRequest($username, $accessToken = null, $page = '1', $perPage = '20')
    {
        // verify the required parameter 'username' is set
        if ($username === null || (is_array($username) && count($username) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $username when calling getV5UsersUsernameOrgs'
            );
        }
        if ($perPage !== null && $perPage > 100) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling OrganizationsApi.getV5UsersUsernameOrgs, must be smaller than or equal to 100.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling OrganizationsApi.getV5UsersUsernameOrgs, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v5/users/{username}/orgs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($username !== null) {
            $resourcePath = str_replace(
                '{' . 'username' . '}',
                ObjectSerializer::toPathValue($username),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchV5OrgsOrg
     *
     * 更新授权用户所管理的组织资料
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $email 组织公开的邮箱地址 (optional)
     * @param  string $location 组织所在地 (optional)
     * @param  string $name 组织名称 (optional)
     * @param  string $description 组织简介 (optional)
     * @param  string $htmlUrl 组织站点 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\GroupDetail
     */
    public function patchV5OrgsOrg($org, $accessToken = null, $email = null, $location = null, $name = null, $description = null, $htmlUrl = null)
    {
        list($response) = $this->patchV5OrgsOrgWithHttpInfo($org, $accessToken, $email, $location, $name, $description, $htmlUrl);
        return $response;
    }

    /**
     * Operation patchV5OrgsOrgWithHttpInfo
     *
     * 更新授权用户所管理的组织资料
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $email 组织公开的邮箱地址 (optional)
     * @param  string $location 组织所在地 (optional)
     * @param  string $name 组织名称 (optional)
     * @param  string $description 组织简介 (optional)
     * @param  string $htmlUrl 组织站点 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\GroupDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchV5OrgsOrgWithHttpInfo($org, $accessToken = null, $email = null, $location = null, $name = null, $description = null, $htmlUrl = null)
    {
        $returnType = '\Gitee\Model\GroupDetail';
        $request = $this->patchV5OrgsOrgRequest($org, $accessToken, $email, $location, $name, $description, $htmlUrl);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\GroupDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchV5OrgsOrgAsync
     *
     * 更新授权用户所管理的组织资料
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $email 组织公开的邮箱地址 (optional)
     * @param  string $location 组织所在地 (optional)
     * @param  string $name 组织名称 (optional)
     * @param  string $description 组织简介 (optional)
     * @param  string $htmlUrl 组织站点 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchV5OrgsOrgAsync($org, $accessToken = null, $email = null, $location = null, $name = null, $description = null, $htmlUrl = null)
    {
        return $this->patchV5OrgsOrgAsyncWithHttpInfo($org, $accessToken, $email, $location, $name, $description, $htmlUrl)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchV5OrgsOrgAsyncWithHttpInfo
     *
     * 更新授权用户所管理的组织资料
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $email 组织公开的邮箱地址 (optional)
     * @param  string $location 组织所在地 (optional)
     * @param  string $name 组织名称 (optional)
     * @param  string $description 组织简介 (optional)
     * @param  string $htmlUrl 组织站点 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchV5OrgsOrgAsyncWithHttpInfo($org, $accessToken = null, $email = null, $location = null, $name = null, $description = null, $htmlUrl = null)
    {
        $returnType = '\Gitee\Model\GroupDetail';
        $request = $this->patchV5OrgsOrgRequest($org, $accessToken, $email, $location, $name, $description, $htmlUrl);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchV5OrgsOrg'
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $email 组织公开的邮箱地址 (optional)
     * @param  string $location 组织所在地 (optional)
     * @param  string $name 组织名称 (optional)
     * @param  string $description 组织简介 (optional)
     * @param  string $htmlUrl 组织站点 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function patchV5OrgsOrgRequest($org, $accessToken = null, $email = null, $location = null, $name = null, $description = null, $htmlUrl = null)
    {
        // verify the required parameter 'org' is set
        if ($org === null || (is_array($org) && count($org) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org when calling patchV5OrgsOrg'
            );
        }

        $resourcePath = '/v5/orgs/{org}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($org !== null) {
            $resourcePath = str_replace(
                '{' . 'org' . '}',
                ObjectSerializer::toPathValue($org),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($email !== null) {
            $formParams['email'] = ObjectSerializer::toFormValue($email);
        }
        // form params
        if ($location !== null) {
            $formParams['location'] = ObjectSerializer::toFormValue($location);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // form params
        if ($htmlUrl !== null) {
            $formParams['html_url'] = ObjectSerializer::toFormValue($htmlUrl);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchV5UserMembershipsOrgsOrg
     *
     * 更新授权用户在一个组织的成员资料
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $remark 在组织中的备注信息 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\GroupMember
     */
    public function patchV5UserMembershipsOrgsOrg($org, $accessToken = null, $remark = null)
    {
        list($response) = $this->patchV5UserMembershipsOrgsOrgWithHttpInfo($org, $accessToken, $remark);
        return $response;
    }

    /**
     * Operation patchV5UserMembershipsOrgsOrgWithHttpInfo
     *
     * 更新授权用户在一个组织的成员资料
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $remark 在组织中的备注信息 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\GroupMember, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchV5UserMembershipsOrgsOrgWithHttpInfo($org, $accessToken = null, $remark = null)
    {
        $returnType = '\Gitee\Model\GroupMember';
        $request = $this->patchV5UserMembershipsOrgsOrgRequest($org, $accessToken, $remark);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\GroupMember',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchV5UserMembershipsOrgsOrgAsync
     *
     * 更新授权用户在一个组织的成员资料
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $remark 在组织中的备注信息 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchV5UserMembershipsOrgsOrgAsync($org, $accessToken = null, $remark = null)
    {
        return $this->patchV5UserMembershipsOrgsOrgAsyncWithHttpInfo($org, $accessToken, $remark)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchV5UserMembershipsOrgsOrgAsyncWithHttpInfo
     *
     * 更新授权用户在一个组织的成员资料
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $remark 在组织中的备注信息 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchV5UserMembershipsOrgsOrgAsyncWithHttpInfo($org, $accessToken = null, $remark = null)
    {
        $returnType = '\Gitee\Model\GroupMember';
        $request = $this->patchV5UserMembershipsOrgsOrgRequest($org, $accessToken, $remark);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchV5UserMembershipsOrgsOrg'
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $remark 在组织中的备注信息 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function patchV5UserMembershipsOrgsOrgRequest($org, $accessToken = null, $remark = null)
    {
        // verify the required parameter 'org' is set
        if ($org === null || (is_array($org) && count($org) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org when calling patchV5UserMembershipsOrgsOrg'
            );
        }

        $resourcePath = '/v5/user/memberships/orgs/{org}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($org !== null) {
            $resourcePath = str_replace(
                '{' . 'org' . '}',
                ObjectSerializer::toPathValue($org),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($remark !== null) {
            $formParams['remark'] = ObjectSerializer::toFormValue($remark);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postV5UsersOrganization
     *
     * 创建组织
     *
     * @param  string $name 组织名称 (required)
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $description 组织描述 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\Group
     */
    public function postV5UsersOrganization($name, $org, $accessToken = null, $description = null)
    {
        list($response) = $this->postV5UsersOrganizationWithHttpInfo($name, $org, $accessToken, $description);
        return $response;
    }

    /**
     * Operation postV5UsersOrganizationWithHttpInfo
     *
     * 创建组织
     *
     * @param  string $name 组织名称 (required)
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $description 组织描述 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\Group, HTTP status code, HTTP response headers (array of strings)
     */
    public function postV5UsersOrganizationWithHttpInfo($name, $org, $accessToken = null, $description = null)
    {
        $returnType = '\Gitee\Model\Group';
        $request = $this->postV5UsersOrganizationRequest($name, $org, $accessToken, $description);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\Group',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postV5UsersOrganizationAsync
     *
     * 创建组织
     *
     * @param  string $name 组织名称 (required)
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $description 组织描述 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV5UsersOrganizationAsync($name, $org, $accessToken = null, $description = null)
    {
        return $this->postV5UsersOrganizationAsyncWithHttpInfo($name, $org, $accessToken, $description)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postV5UsersOrganizationAsyncWithHttpInfo
     *
     * 创建组织
     *
     * @param  string $name 组织名称 (required)
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $description 组织描述 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV5UsersOrganizationAsyncWithHttpInfo($name, $org, $accessToken = null, $description = null)
    {
        $returnType = '\Gitee\Model\Group';
        $request = $this->postV5UsersOrganizationRequest($name, $org, $accessToken, $description);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postV5UsersOrganization'
     *
     * @param  string $name 组织名称 (required)
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $description 组织描述 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postV5UsersOrganizationRequest($name, $org, $accessToken = null, $description = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling postV5UsersOrganization'
            );
        }
        // verify the required parameter 'org' is set
        if ($org === null || (is_array($org) && count($org) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org when calling postV5UsersOrganization'
            );
        }

        $resourcePath = '/v5/users/organization';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($name !== null) {
            $formParams['name'] = ObjectSerializer::toFormValue($name);
        }
        // form params
        if ($org !== null) {
            $formParams['org'] = ObjectSerializer::toFormValue($org);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putV5OrgsOrgMembershipsUsername
     *
     * 增加或更新授权用户所管理组织的成员
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $role 设置用户在组织的角色 (optional, default to member)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\GroupMember
     */
    public function putV5OrgsOrgMembershipsUsername($org, $username, $accessToken = null, $role = 'member')
    {
        list($response) = $this->putV5OrgsOrgMembershipsUsernameWithHttpInfo($org, $username, $accessToken, $role);
        return $response;
    }

    /**
     * Operation putV5OrgsOrgMembershipsUsernameWithHttpInfo
     *
     * 增加或更新授权用户所管理组织的成员
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $role 设置用户在组织的角色 (optional, default to member)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\GroupMember, HTTP status code, HTTP response headers (array of strings)
     */
    public function putV5OrgsOrgMembershipsUsernameWithHttpInfo($org, $username, $accessToken = null, $role = 'member')
    {
        $returnType = '\Gitee\Model\GroupMember';
        $request = $this->putV5OrgsOrgMembershipsUsernameRequest($org, $username, $accessToken, $role);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\GroupMember',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putV5OrgsOrgMembershipsUsernameAsync
     *
     * 增加或更新授权用户所管理组织的成员
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $role 设置用户在组织的角色 (optional, default to member)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putV5OrgsOrgMembershipsUsernameAsync($org, $username, $accessToken = null, $role = 'member')
    {
        return $this->putV5OrgsOrgMembershipsUsernameAsyncWithHttpInfo($org, $username, $accessToken, $role)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putV5OrgsOrgMembershipsUsernameAsyncWithHttpInfo
     *
     * 增加或更新授权用户所管理组织的成员
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $role 设置用户在组织的角色 (optional, default to member)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putV5OrgsOrgMembershipsUsernameAsyncWithHttpInfo($org, $username, $accessToken = null, $role = 'member')
    {
        $returnType = '\Gitee\Model\GroupMember';
        $request = $this->putV5OrgsOrgMembershipsUsernameRequest($org, $username, $accessToken, $role);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putV5OrgsOrgMembershipsUsername'
     *
     * @param  string $org 组织的路径(path/login) (required)
     * @param  string $username 用户名(username/login) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $role 设置用户在组织的角色 (optional, default to member)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putV5OrgsOrgMembershipsUsernameRequest($org, $username, $accessToken = null, $role = 'member')
    {
        // verify the required parameter 'org' is set
        if ($org === null || (is_array($org) && count($org) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $org when calling putV5OrgsOrgMembershipsUsername'
            );
        }
        // verify the required parameter 'username' is set
        if ($username === null || (is_array($username) && count($username) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $username when calling putV5OrgsOrgMembershipsUsername'
            );
        }

        $resourcePath = '/v5/orgs/{org}/memberships/{username}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($org !== null) {
            $resourcePath = str_replace(
                '{' . 'org' . '}',
                ObjectSerializer::toPathValue($org),
                $resourcePath
            );
        }
        // path params
        if ($username !== null) {
            $resourcePath = str_replace(
                '{' . 'username' . '}',
                ObjectSerializer::toPathValue($username),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($role !== null) {
            $formParams['role'] = ObjectSerializer::toFormValue($role);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
