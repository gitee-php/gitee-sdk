<?php
/**
 * PullRequestsApi
 * PHP version 5
 *
 * @category Class
 * @package  Gitee
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * Gitee SDK for PHP
 *
 * OpenAPI spec version: 5.4.85
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.42
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Gitee\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Gitee\ApiException;
use Gitee\Configuration;
use Gitee\HeaderSelector;
use Gitee\ObjectSerializer;

/**
 * PullRequestsApi Class Doc Comment
 *
 * @category Class
 * @package  Gitee
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PullRequestsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteV5ReposOwnerRepoPullsCommentsId
     *
     * 删除评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id 评论的ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteV5ReposOwnerRepoPullsCommentsId($owner, $repo, $id, $accessToken = null)
    {
        $this->deleteV5ReposOwnerRepoPullsCommentsIdWithHttpInfo($owner, $repo, $id, $accessToken);
    }

    /**
     * Operation deleteV5ReposOwnerRepoPullsCommentsIdWithHttpInfo
     *
     * 删除评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id 评论的ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteV5ReposOwnerRepoPullsCommentsIdWithHttpInfo($owner, $repo, $id, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteV5ReposOwnerRepoPullsCommentsIdRequest($owner, $repo, $id, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteV5ReposOwnerRepoPullsCommentsIdAsync
     *
     * 删除评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id 评论的ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteV5ReposOwnerRepoPullsCommentsIdAsync($owner, $repo, $id, $accessToken = null)
    {
        return $this->deleteV5ReposOwnerRepoPullsCommentsIdAsyncWithHttpInfo($owner, $repo, $id, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteV5ReposOwnerRepoPullsCommentsIdAsyncWithHttpInfo
     *
     * 删除评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id 评论的ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteV5ReposOwnerRepoPullsCommentsIdAsyncWithHttpInfo($owner, $repo, $id, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteV5ReposOwnerRepoPullsCommentsIdRequest($owner, $repo, $id, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteV5ReposOwnerRepoPullsCommentsId'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id 评论的ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteV5ReposOwnerRepoPullsCommentsIdRequest($owner, $repo, $id, $accessToken = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling deleteV5ReposOwnerRepoPullsCommentsId'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling deleteV5ReposOwnerRepoPullsCommentsId'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteV5ReposOwnerRepoPullsCommentsId'
            );
        }

        $resourcePath = '/v5/repos/{owner}/{repo}/pulls/comments/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteV5ReposOwnerRepoPullsNumberAssignees
     *
     * 取消用户审查 Pull Request
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $assignees 用户的个人空间地址, 以 , 分隔 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\PullRequest
     */
    public function deleteV5ReposOwnerRepoPullsNumberAssignees($owner, $repo, $number, $assignees, $accessToken = null)
    {
        list($response) = $this->deleteV5ReposOwnerRepoPullsNumberAssigneesWithHttpInfo($owner, $repo, $number, $assignees, $accessToken);
        return $response;
    }

    /**
     * Operation deleteV5ReposOwnerRepoPullsNumberAssigneesWithHttpInfo
     *
     * 取消用户审查 Pull Request
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $assignees 用户的个人空间地址, 以 , 分隔 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\PullRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteV5ReposOwnerRepoPullsNumberAssigneesWithHttpInfo($owner, $repo, $number, $assignees, $accessToken = null)
    {
        $returnType = '\Gitee\Model\PullRequest';
        $request = $this->deleteV5ReposOwnerRepoPullsNumberAssigneesRequest($owner, $repo, $number, $assignees, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\PullRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteV5ReposOwnerRepoPullsNumberAssigneesAsync
     *
     * 取消用户审查 Pull Request
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $assignees 用户的个人空间地址, 以 , 分隔 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteV5ReposOwnerRepoPullsNumberAssigneesAsync($owner, $repo, $number, $assignees, $accessToken = null)
    {
        return $this->deleteV5ReposOwnerRepoPullsNumberAssigneesAsyncWithHttpInfo($owner, $repo, $number, $assignees, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteV5ReposOwnerRepoPullsNumberAssigneesAsyncWithHttpInfo
     *
     * 取消用户审查 Pull Request
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $assignees 用户的个人空间地址, 以 , 分隔 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteV5ReposOwnerRepoPullsNumberAssigneesAsyncWithHttpInfo($owner, $repo, $number, $assignees, $accessToken = null)
    {
        $returnType = '\Gitee\Model\PullRequest';
        $request = $this->deleteV5ReposOwnerRepoPullsNumberAssigneesRequest($owner, $repo, $number, $assignees, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteV5ReposOwnerRepoPullsNumberAssignees'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $assignees 用户的个人空间地址, 以 , 分隔 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteV5ReposOwnerRepoPullsNumberAssigneesRequest($owner, $repo, $number, $assignees, $accessToken = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling deleteV5ReposOwnerRepoPullsNumberAssignees'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling deleteV5ReposOwnerRepoPullsNumberAssignees'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling deleteV5ReposOwnerRepoPullsNumberAssignees'
            );
        }
        // verify the required parameter 'assignees' is set
        if ($assignees === null || (is_array($assignees) && count($assignees) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $assignees when calling deleteV5ReposOwnerRepoPullsNumberAssignees'
            );
        }

        $resourcePath = '/v5/repos/{owner}/{repo}/pulls/{number}/assignees';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($assignees !== null) {
            $queryParams['assignees'] = ObjectSerializer::toQueryValue($assignees);
        }

        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteV5ReposOwnerRepoPullsNumberLabelsName
     *
     * 删除 Pull Request 标签
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $name 标签名称(批量删除用英文逗号分隔，如: bug,feature) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteV5ReposOwnerRepoPullsNumberLabelsName($owner, $repo, $number, $name, $accessToken = null)
    {
        $this->deleteV5ReposOwnerRepoPullsNumberLabelsNameWithHttpInfo($owner, $repo, $number, $name, $accessToken);
    }

    /**
     * Operation deleteV5ReposOwnerRepoPullsNumberLabelsNameWithHttpInfo
     *
     * 删除 Pull Request 标签
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $name 标签名称(批量删除用英文逗号分隔，如: bug,feature) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteV5ReposOwnerRepoPullsNumberLabelsNameWithHttpInfo($owner, $repo, $number, $name, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteV5ReposOwnerRepoPullsNumberLabelsNameRequest($owner, $repo, $number, $name, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteV5ReposOwnerRepoPullsNumberLabelsNameAsync
     *
     * 删除 Pull Request 标签
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $name 标签名称(批量删除用英文逗号分隔，如: bug,feature) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteV5ReposOwnerRepoPullsNumberLabelsNameAsync($owner, $repo, $number, $name, $accessToken = null)
    {
        return $this->deleteV5ReposOwnerRepoPullsNumberLabelsNameAsyncWithHttpInfo($owner, $repo, $number, $name, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteV5ReposOwnerRepoPullsNumberLabelsNameAsyncWithHttpInfo
     *
     * 删除 Pull Request 标签
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $name 标签名称(批量删除用英文逗号分隔，如: bug,feature) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteV5ReposOwnerRepoPullsNumberLabelsNameAsyncWithHttpInfo($owner, $repo, $number, $name, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteV5ReposOwnerRepoPullsNumberLabelsNameRequest($owner, $repo, $number, $name, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteV5ReposOwnerRepoPullsNumberLabelsName'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $name 标签名称(批量删除用英文逗号分隔，如: bug,feature) (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteV5ReposOwnerRepoPullsNumberLabelsNameRequest($owner, $repo, $number, $name, $accessToken = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling deleteV5ReposOwnerRepoPullsNumberLabelsName'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling deleteV5ReposOwnerRepoPullsNumberLabelsName'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling deleteV5ReposOwnerRepoPullsNumberLabelsName'
            );
        }
        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling deleteV5ReposOwnerRepoPullsNumberLabelsName'
            );
        }

        $resourcePath = '/v5/repos/{owner}/{repo}/pulls/{number}/labels/{name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                '{' . 'name' . '}',
                ObjectSerializer::toPathValue($name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteV5ReposOwnerRepoPullsNumberTesters
     *
     * 取消用户测试 Pull Request
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $testers 用户的个人空间地址, 以 , 分隔 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\PullRequest
     */
    public function deleteV5ReposOwnerRepoPullsNumberTesters($owner, $repo, $number, $testers, $accessToken = null)
    {
        list($response) = $this->deleteV5ReposOwnerRepoPullsNumberTestersWithHttpInfo($owner, $repo, $number, $testers, $accessToken);
        return $response;
    }

    /**
     * Operation deleteV5ReposOwnerRepoPullsNumberTestersWithHttpInfo
     *
     * 取消用户测试 Pull Request
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $testers 用户的个人空间地址, 以 , 分隔 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\PullRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteV5ReposOwnerRepoPullsNumberTestersWithHttpInfo($owner, $repo, $number, $testers, $accessToken = null)
    {
        $returnType = '\Gitee\Model\PullRequest';
        $request = $this->deleteV5ReposOwnerRepoPullsNumberTestersRequest($owner, $repo, $number, $testers, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\PullRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteV5ReposOwnerRepoPullsNumberTestersAsync
     *
     * 取消用户测试 Pull Request
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $testers 用户的个人空间地址, 以 , 分隔 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteV5ReposOwnerRepoPullsNumberTestersAsync($owner, $repo, $number, $testers, $accessToken = null)
    {
        return $this->deleteV5ReposOwnerRepoPullsNumberTestersAsyncWithHttpInfo($owner, $repo, $number, $testers, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteV5ReposOwnerRepoPullsNumberTestersAsyncWithHttpInfo
     *
     * 取消用户测试 Pull Request
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $testers 用户的个人空间地址, 以 , 分隔 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteV5ReposOwnerRepoPullsNumberTestersAsyncWithHttpInfo($owner, $repo, $number, $testers, $accessToken = null)
    {
        $returnType = '\Gitee\Model\PullRequest';
        $request = $this->deleteV5ReposOwnerRepoPullsNumberTestersRequest($owner, $repo, $number, $testers, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteV5ReposOwnerRepoPullsNumberTesters'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $testers 用户的个人空间地址, 以 , 分隔 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteV5ReposOwnerRepoPullsNumberTestersRequest($owner, $repo, $number, $testers, $accessToken = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling deleteV5ReposOwnerRepoPullsNumberTesters'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling deleteV5ReposOwnerRepoPullsNumberTesters'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling deleteV5ReposOwnerRepoPullsNumberTesters'
            );
        }
        // verify the required parameter 'testers' is set
        if ($testers === null || (is_array($testers) && count($testers) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $testers when calling deleteV5ReposOwnerRepoPullsNumberTesters'
            );
        }

        $resourcePath = '/v5/repos/{owner}/{repo}/pulls/{number}/testers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($testers !== null) {
            $queryParams['testers'] = ObjectSerializer::toQueryValue($testers);
        }

        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5ReposOwnerRepoPulls
     *
     * 获取Pull Request列表
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $state 可选。Pull Request 状态 (optional, default to open)
     * @param  string $head 可选。Pull Request 提交的源分支。格式：branch 或者：username:branch (optional)
     * @param  string $base 可选。Pull Request 提交目标分支的名称。 (optional)
     * @param  string $sort 可选。排序字段，默认按创建时间 (optional, default to created)
     * @param  string $since 可选。起始的更新时间，要求时间格式为 ISO 8601 (optional)
     * @param  string $direction 可选。升序/降序 (optional, default to desc)
     * @param  int $milestoneNumber 可选。里程碑序号(id) (optional)
     * @param  string $labels 用逗号分开的标签。如: bug,performance (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $author 可选。PR 创建者用户名 (optional)
     * @param  string $assignee 可选。评审者用户名 (optional)
     * @param  string $tester 可选。测试者用户名 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\PullRequest[]
     */
    public function getV5ReposOwnerRepoPulls($owner, $repo, $accessToken = null, $state = 'open', $head = null, $base = null, $sort = 'created', $since = null, $direction = 'desc', $milestoneNumber = null, $labels = null, $page = '1', $perPage = '20', $author = null, $assignee = null, $tester = null)
    {
        list($response) = $this->getV5ReposOwnerRepoPullsWithHttpInfo($owner, $repo, $accessToken, $state, $head, $base, $sort, $since, $direction, $milestoneNumber, $labels, $page, $perPage, $author, $assignee, $tester);
        return $response;
    }

    /**
     * Operation getV5ReposOwnerRepoPullsWithHttpInfo
     *
     * 获取Pull Request列表
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $state 可选。Pull Request 状态 (optional, default to open)
     * @param  string $head 可选。Pull Request 提交的源分支。格式：branch 或者：username:branch (optional)
     * @param  string $base 可选。Pull Request 提交目标分支的名称。 (optional)
     * @param  string $sort 可选。排序字段，默认按创建时间 (optional, default to created)
     * @param  string $since 可选。起始的更新时间，要求时间格式为 ISO 8601 (optional)
     * @param  string $direction 可选。升序/降序 (optional, default to desc)
     * @param  int $milestoneNumber 可选。里程碑序号(id) (optional)
     * @param  string $labels 用逗号分开的标签。如: bug,performance (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $author 可选。PR 创建者用户名 (optional)
     * @param  string $assignee 可选。评审者用户名 (optional)
     * @param  string $tester 可选。测试者用户名 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\PullRequest[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5ReposOwnerRepoPullsWithHttpInfo($owner, $repo, $accessToken = null, $state = 'open', $head = null, $base = null, $sort = 'created', $since = null, $direction = 'desc', $milestoneNumber = null, $labels = null, $page = '1', $perPage = '20', $author = null, $assignee = null, $tester = null)
    {
        $returnType = '\Gitee\Model\PullRequest[]';
        $request = $this->getV5ReposOwnerRepoPullsRequest($owner, $repo, $accessToken, $state, $head, $base, $sort, $since, $direction, $milestoneNumber, $labels, $page, $perPage, $author, $assignee, $tester);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\PullRequest[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5ReposOwnerRepoPullsAsync
     *
     * 获取Pull Request列表
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $state 可选。Pull Request 状态 (optional, default to open)
     * @param  string $head 可选。Pull Request 提交的源分支。格式：branch 或者：username:branch (optional)
     * @param  string $base 可选。Pull Request 提交目标分支的名称。 (optional)
     * @param  string $sort 可选。排序字段，默认按创建时间 (optional, default to created)
     * @param  string $since 可选。起始的更新时间，要求时间格式为 ISO 8601 (optional)
     * @param  string $direction 可选。升序/降序 (optional, default to desc)
     * @param  int $milestoneNumber 可选。里程碑序号(id) (optional)
     * @param  string $labels 用逗号分开的标签。如: bug,performance (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $author 可选。PR 创建者用户名 (optional)
     * @param  string $assignee 可选。评审者用户名 (optional)
     * @param  string $tester 可选。测试者用户名 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoPullsAsync($owner, $repo, $accessToken = null, $state = 'open', $head = null, $base = null, $sort = 'created', $since = null, $direction = 'desc', $milestoneNumber = null, $labels = null, $page = '1', $perPage = '20', $author = null, $assignee = null, $tester = null)
    {
        return $this->getV5ReposOwnerRepoPullsAsyncWithHttpInfo($owner, $repo, $accessToken, $state, $head, $base, $sort, $since, $direction, $milestoneNumber, $labels, $page, $perPage, $author, $assignee, $tester)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5ReposOwnerRepoPullsAsyncWithHttpInfo
     *
     * 获取Pull Request列表
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $state 可选。Pull Request 状态 (optional, default to open)
     * @param  string $head 可选。Pull Request 提交的源分支。格式：branch 或者：username:branch (optional)
     * @param  string $base 可选。Pull Request 提交目标分支的名称。 (optional)
     * @param  string $sort 可选。排序字段，默认按创建时间 (optional, default to created)
     * @param  string $since 可选。起始的更新时间，要求时间格式为 ISO 8601 (optional)
     * @param  string $direction 可选。升序/降序 (optional, default to desc)
     * @param  int $milestoneNumber 可选。里程碑序号(id) (optional)
     * @param  string $labels 用逗号分开的标签。如: bug,performance (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $author 可选。PR 创建者用户名 (optional)
     * @param  string $assignee 可选。评审者用户名 (optional)
     * @param  string $tester 可选。测试者用户名 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoPullsAsyncWithHttpInfo($owner, $repo, $accessToken = null, $state = 'open', $head = null, $base = null, $sort = 'created', $since = null, $direction = 'desc', $milestoneNumber = null, $labels = null, $page = '1', $perPage = '20', $author = null, $assignee = null, $tester = null)
    {
        $returnType = '\Gitee\Model\PullRequest[]';
        $request = $this->getV5ReposOwnerRepoPullsRequest($owner, $repo, $accessToken, $state, $head, $base, $sort, $since, $direction, $milestoneNumber, $labels, $page, $perPage, $author, $assignee, $tester);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5ReposOwnerRepoPulls'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $state 可选。Pull Request 状态 (optional, default to open)
     * @param  string $head 可选。Pull Request 提交的源分支。格式：branch 或者：username:branch (optional)
     * @param  string $base 可选。Pull Request 提交目标分支的名称。 (optional)
     * @param  string $sort 可选。排序字段，默认按创建时间 (optional, default to created)
     * @param  string $since 可选。起始的更新时间，要求时间格式为 ISO 8601 (optional)
     * @param  string $direction 可选。升序/降序 (optional, default to desc)
     * @param  int $milestoneNumber 可选。里程碑序号(id) (optional)
     * @param  string $labels 用逗号分开的标签。如: bug,performance (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $author 可选。PR 创建者用户名 (optional)
     * @param  string $assignee 可选。评审者用户名 (optional)
     * @param  string $tester 可选。测试者用户名 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5ReposOwnerRepoPullsRequest($owner, $repo, $accessToken = null, $state = 'open', $head = null, $base = null, $sort = 'created', $since = null, $direction = 'desc', $milestoneNumber = null, $labels = null, $page = '1', $perPage = '20', $author = null, $assignee = null, $tester = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling getV5ReposOwnerRepoPulls'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling getV5ReposOwnerRepoPulls'
            );
        }
        if ($perPage !== null && $perPage > 100) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling PullRequestsApi.getV5ReposOwnerRepoPulls, must be smaller than or equal to 100.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling PullRequestsApi.getV5ReposOwnerRepoPulls, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v5/repos/{owner}/{repo}/pulls';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state);
        }
        // query params
        if ($head !== null) {
            $queryParams['head'] = ObjectSerializer::toQueryValue($head);
        }
        // query params
        if ($base !== null) {
            $queryParams['base'] = ObjectSerializer::toQueryValue($base);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($since !== null) {
            $queryParams['since'] = ObjectSerializer::toQueryValue($since);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($milestoneNumber !== null) {
            $queryParams['milestone_number'] = ObjectSerializer::toQueryValue($milestoneNumber);
        }
        // query params
        if ($labels !== null) {
            $queryParams['labels'] = ObjectSerializer::toQueryValue($labels);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }
        // query params
        if ($author !== null) {
            $queryParams['author'] = ObjectSerializer::toQueryValue($author);
        }
        // query params
        if ($assignee !== null) {
            $queryParams['assignee'] = ObjectSerializer::toQueryValue($assignee);
        }
        // query params
        if ($tester !== null) {
            $queryParams['tester'] = ObjectSerializer::toQueryValue($tester);
        }

        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5ReposOwnerRepoPullsCommentsId
     *
     * 获取Pull Request的某个评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\PullRequestComments
     */
    public function getV5ReposOwnerRepoPullsCommentsId($owner, $repo, $id, $accessToken = null)
    {
        list($response) = $this->getV5ReposOwnerRepoPullsCommentsIdWithHttpInfo($owner, $repo, $id, $accessToken);
        return $response;
    }

    /**
     * Operation getV5ReposOwnerRepoPullsCommentsIdWithHttpInfo
     *
     * 获取Pull Request的某个评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\PullRequestComments, HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5ReposOwnerRepoPullsCommentsIdWithHttpInfo($owner, $repo, $id, $accessToken = null)
    {
        $returnType = '\Gitee\Model\PullRequestComments';
        $request = $this->getV5ReposOwnerRepoPullsCommentsIdRequest($owner, $repo, $id, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\PullRequestComments',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5ReposOwnerRepoPullsCommentsIdAsync
     *
     * 获取Pull Request的某个评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoPullsCommentsIdAsync($owner, $repo, $id, $accessToken = null)
    {
        return $this->getV5ReposOwnerRepoPullsCommentsIdAsyncWithHttpInfo($owner, $repo, $id, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5ReposOwnerRepoPullsCommentsIdAsyncWithHttpInfo
     *
     * 获取Pull Request的某个评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoPullsCommentsIdAsyncWithHttpInfo($owner, $repo, $id, $accessToken = null)
    {
        $returnType = '\Gitee\Model\PullRequestComments';
        $request = $this->getV5ReposOwnerRepoPullsCommentsIdRequest($owner, $repo, $id, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5ReposOwnerRepoPullsCommentsId'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5ReposOwnerRepoPullsCommentsIdRequest($owner, $repo, $id, $accessToken = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling getV5ReposOwnerRepoPullsCommentsId'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling getV5ReposOwnerRepoPullsCommentsId'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getV5ReposOwnerRepoPullsCommentsId'
            );
        }

        $resourcePath = '/v5/repos/{owner}/{repo}/pulls/comments/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5ReposOwnerRepoPullsNumber
     *
     * 获取单个Pull Request
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\PullRequest
     */
    public function getV5ReposOwnerRepoPullsNumber($owner, $repo, $number, $accessToken = null)
    {
        list($response) = $this->getV5ReposOwnerRepoPullsNumberWithHttpInfo($owner, $repo, $number, $accessToken);
        return $response;
    }

    /**
     * Operation getV5ReposOwnerRepoPullsNumberWithHttpInfo
     *
     * 获取单个Pull Request
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\PullRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5ReposOwnerRepoPullsNumberWithHttpInfo($owner, $repo, $number, $accessToken = null)
    {
        $returnType = '\Gitee\Model\PullRequest';
        $request = $this->getV5ReposOwnerRepoPullsNumberRequest($owner, $repo, $number, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\PullRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5ReposOwnerRepoPullsNumberAsync
     *
     * 获取单个Pull Request
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoPullsNumberAsync($owner, $repo, $number, $accessToken = null)
    {
        return $this->getV5ReposOwnerRepoPullsNumberAsyncWithHttpInfo($owner, $repo, $number, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5ReposOwnerRepoPullsNumberAsyncWithHttpInfo
     *
     * 获取单个Pull Request
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoPullsNumberAsyncWithHttpInfo($owner, $repo, $number, $accessToken = null)
    {
        $returnType = '\Gitee\Model\PullRequest';
        $request = $this->getV5ReposOwnerRepoPullsNumberRequest($owner, $repo, $number, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5ReposOwnerRepoPullsNumber'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5ReposOwnerRepoPullsNumberRequest($owner, $repo, $number, $accessToken = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling getV5ReposOwnerRepoPullsNumber'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling getV5ReposOwnerRepoPullsNumber'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling getV5ReposOwnerRepoPullsNumber'
            );
        }

        $resourcePath = '/v5/repos/{owner}/{repo}/pulls/{number}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5ReposOwnerRepoPullsNumberComments
     *
     * 获取某个Pull Request的所有评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $direction 可选。升序/降序 (optional)
     * @param  string $commentType 可选。筛选评论类型。代码行评论/pr普通评论 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\PullRequestComments[]
     */
    public function getV5ReposOwnerRepoPullsNumberComments($owner, $repo, $number, $accessToken = null, $page = '1', $perPage = '20', $direction = null, $commentType = null)
    {
        list($response) = $this->getV5ReposOwnerRepoPullsNumberCommentsWithHttpInfo($owner, $repo, $number, $accessToken, $page, $perPage, $direction, $commentType);
        return $response;
    }

    /**
     * Operation getV5ReposOwnerRepoPullsNumberCommentsWithHttpInfo
     *
     * 获取某个Pull Request的所有评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $direction 可选。升序/降序 (optional)
     * @param  string $commentType 可选。筛选评论类型。代码行评论/pr普通评论 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\PullRequestComments[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5ReposOwnerRepoPullsNumberCommentsWithHttpInfo($owner, $repo, $number, $accessToken = null, $page = '1', $perPage = '20', $direction = null, $commentType = null)
    {
        $returnType = '\Gitee\Model\PullRequestComments[]';
        $request = $this->getV5ReposOwnerRepoPullsNumberCommentsRequest($owner, $repo, $number, $accessToken, $page, $perPage, $direction, $commentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\PullRequestComments[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5ReposOwnerRepoPullsNumberCommentsAsync
     *
     * 获取某个Pull Request的所有评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $direction 可选。升序/降序 (optional)
     * @param  string $commentType 可选。筛选评论类型。代码行评论/pr普通评论 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoPullsNumberCommentsAsync($owner, $repo, $number, $accessToken = null, $page = '1', $perPage = '20', $direction = null, $commentType = null)
    {
        return $this->getV5ReposOwnerRepoPullsNumberCommentsAsyncWithHttpInfo($owner, $repo, $number, $accessToken, $page, $perPage, $direction, $commentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5ReposOwnerRepoPullsNumberCommentsAsyncWithHttpInfo
     *
     * 获取某个Pull Request的所有评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $direction 可选。升序/降序 (optional)
     * @param  string $commentType 可选。筛选评论类型。代码行评论/pr普通评论 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoPullsNumberCommentsAsyncWithHttpInfo($owner, $repo, $number, $accessToken = null, $page = '1', $perPage = '20', $direction = null, $commentType = null)
    {
        $returnType = '\Gitee\Model\PullRequestComments[]';
        $request = $this->getV5ReposOwnerRepoPullsNumberCommentsRequest($owner, $repo, $number, $accessToken, $page, $perPage, $direction, $commentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5ReposOwnerRepoPullsNumberComments'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $direction 可选。升序/降序 (optional)
     * @param  string $commentType 可选。筛选评论类型。代码行评论/pr普通评论 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5ReposOwnerRepoPullsNumberCommentsRequest($owner, $repo, $number, $accessToken = null, $page = '1', $perPage = '20', $direction = null, $commentType = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling getV5ReposOwnerRepoPullsNumberComments'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling getV5ReposOwnerRepoPullsNumberComments'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling getV5ReposOwnerRepoPullsNumberComments'
            );
        }
        if ($perPage !== null && $perPage > 100) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling PullRequestsApi.getV5ReposOwnerRepoPullsNumberComments, must be smaller than or equal to 100.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling PullRequestsApi.getV5ReposOwnerRepoPullsNumberComments, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v5/repos/{owner}/{repo}/pulls/{number}/comments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }
        // query params
        if ($direction !== null) {
            $queryParams['direction'] = ObjectSerializer::toQueryValue($direction);
        }
        // query params
        if ($commentType !== null) {
            $queryParams['comment_type'] = ObjectSerializer::toQueryValue($commentType);
        }

        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5ReposOwnerRepoPullsNumberCommits
     *
     * 获取某Pull Request的所有Commit信息。最多显示250条Commit
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\PullRequestCommits[]
     */
    public function getV5ReposOwnerRepoPullsNumberCommits($owner, $repo, $number, $accessToken = null)
    {
        list($response) = $this->getV5ReposOwnerRepoPullsNumberCommitsWithHttpInfo($owner, $repo, $number, $accessToken);
        return $response;
    }

    /**
     * Operation getV5ReposOwnerRepoPullsNumberCommitsWithHttpInfo
     *
     * 获取某Pull Request的所有Commit信息。最多显示250条Commit
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\PullRequestCommits[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5ReposOwnerRepoPullsNumberCommitsWithHttpInfo($owner, $repo, $number, $accessToken = null)
    {
        $returnType = '\Gitee\Model\PullRequestCommits[]';
        $request = $this->getV5ReposOwnerRepoPullsNumberCommitsRequest($owner, $repo, $number, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\PullRequestCommits[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5ReposOwnerRepoPullsNumberCommitsAsync
     *
     * 获取某Pull Request的所有Commit信息。最多显示250条Commit
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoPullsNumberCommitsAsync($owner, $repo, $number, $accessToken = null)
    {
        return $this->getV5ReposOwnerRepoPullsNumberCommitsAsyncWithHttpInfo($owner, $repo, $number, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5ReposOwnerRepoPullsNumberCommitsAsyncWithHttpInfo
     *
     * 获取某Pull Request的所有Commit信息。最多显示250条Commit
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoPullsNumberCommitsAsyncWithHttpInfo($owner, $repo, $number, $accessToken = null)
    {
        $returnType = '\Gitee\Model\PullRequestCommits[]';
        $request = $this->getV5ReposOwnerRepoPullsNumberCommitsRequest($owner, $repo, $number, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5ReposOwnerRepoPullsNumberCommits'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5ReposOwnerRepoPullsNumberCommitsRequest($owner, $repo, $number, $accessToken = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling getV5ReposOwnerRepoPullsNumberCommits'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling getV5ReposOwnerRepoPullsNumberCommits'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling getV5ReposOwnerRepoPullsNumberCommits'
            );
        }

        $resourcePath = '/v5/repos/{owner}/{repo}/pulls/{number}/commits';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5ReposOwnerRepoPullsNumberFiles
     *
     * Pull Request Commit文件列表。最多显示300条diff
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\PullRequestFiles[]
     */
    public function getV5ReposOwnerRepoPullsNumberFiles($owner, $repo, $number, $accessToken = null)
    {
        list($response) = $this->getV5ReposOwnerRepoPullsNumberFilesWithHttpInfo($owner, $repo, $number, $accessToken);
        return $response;
    }

    /**
     * Operation getV5ReposOwnerRepoPullsNumberFilesWithHttpInfo
     *
     * Pull Request Commit文件列表。最多显示300条diff
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\PullRequestFiles[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5ReposOwnerRepoPullsNumberFilesWithHttpInfo($owner, $repo, $number, $accessToken = null)
    {
        $returnType = '\Gitee\Model\PullRequestFiles[]';
        $request = $this->getV5ReposOwnerRepoPullsNumberFilesRequest($owner, $repo, $number, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\PullRequestFiles[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5ReposOwnerRepoPullsNumberFilesAsync
     *
     * Pull Request Commit文件列表。最多显示300条diff
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoPullsNumberFilesAsync($owner, $repo, $number, $accessToken = null)
    {
        return $this->getV5ReposOwnerRepoPullsNumberFilesAsyncWithHttpInfo($owner, $repo, $number, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5ReposOwnerRepoPullsNumberFilesAsyncWithHttpInfo
     *
     * Pull Request Commit文件列表。最多显示300条diff
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoPullsNumberFilesAsyncWithHttpInfo($owner, $repo, $number, $accessToken = null)
    {
        $returnType = '\Gitee\Model\PullRequestFiles[]';
        $request = $this->getV5ReposOwnerRepoPullsNumberFilesRequest($owner, $repo, $number, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5ReposOwnerRepoPullsNumberFiles'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5ReposOwnerRepoPullsNumberFilesRequest($owner, $repo, $number, $accessToken = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling getV5ReposOwnerRepoPullsNumberFiles'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling getV5ReposOwnerRepoPullsNumberFiles'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling getV5ReposOwnerRepoPullsNumberFiles'
            );
        }

        $resourcePath = '/v5/repos/{owner}/{repo}/pulls/{number}/files';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5ReposOwnerRepoPullsNumberIssues
     *
     * 获取 Pull Request 关联的 issues
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number number (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\Issue[]
     */
    public function getV5ReposOwnerRepoPullsNumberIssues($owner, $repo, $number, $accessToken = null, $page = '1', $perPage = '20')
    {
        list($response) = $this->getV5ReposOwnerRepoPullsNumberIssuesWithHttpInfo($owner, $repo, $number, $accessToken, $page, $perPage);
        return $response;
    }

    /**
     * Operation getV5ReposOwnerRepoPullsNumberIssuesWithHttpInfo
     *
     * 获取 Pull Request 关联的 issues
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\Issue[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5ReposOwnerRepoPullsNumberIssuesWithHttpInfo($owner, $repo, $number, $accessToken = null, $page = '1', $perPage = '20')
    {
        $returnType = '\Gitee\Model\Issue[]';
        $request = $this->getV5ReposOwnerRepoPullsNumberIssuesRequest($owner, $repo, $number, $accessToken, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\Issue[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5ReposOwnerRepoPullsNumberIssuesAsync
     *
     * 获取 Pull Request 关联的 issues
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoPullsNumberIssuesAsync($owner, $repo, $number, $accessToken = null, $page = '1', $perPage = '20')
    {
        return $this->getV5ReposOwnerRepoPullsNumberIssuesAsyncWithHttpInfo($owner, $repo, $number, $accessToken, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5ReposOwnerRepoPullsNumberIssuesAsyncWithHttpInfo
     *
     * 获取 Pull Request 关联的 issues
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoPullsNumberIssuesAsyncWithHttpInfo($owner, $repo, $number, $accessToken = null, $page = '1', $perPage = '20')
    {
        $returnType = '\Gitee\Model\Issue[]';
        $request = $this->getV5ReposOwnerRepoPullsNumberIssuesRequest($owner, $repo, $number, $accessToken, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5ReposOwnerRepoPullsNumberIssues'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5ReposOwnerRepoPullsNumberIssuesRequest($owner, $repo, $number, $accessToken = null, $page = '1', $perPage = '20')
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling getV5ReposOwnerRepoPullsNumberIssues'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling getV5ReposOwnerRepoPullsNumberIssues'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling getV5ReposOwnerRepoPullsNumberIssues'
            );
        }
        if ($perPage !== null && $perPage > 100) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling PullRequestsApi.getV5ReposOwnerRepoPullsNumberIssues, must be smaller than or equal to 100.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling PullRequestsApi.getV5ReposOwnerRepoPullsNumberIssues, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v5/repos/{owner}/{repo}/pulls/{number}/issues';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5ReposOwnerRepoPullsNumberLabels
     *
     * 获取某个 Pull Request 的所有标签
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\Label[]
     */
    public function getV5ReposOwnerRepoPullsNumberLabels($owner, $repo, $number, $accessToken = null, $page = '1', $perPage = '20')
    {
        list($response) = $this->getV5ReposOwnerRepoPullsNumberLabelsWithHttpInfo($owner, $repo, $number, $accessToken, $page, $perPage);
        return $response;
    }

    /**
     * Operation getV5ReposOwnerRepoPullsNumberLabelsWithHttpInfo
     *
     * 获取某个 Pull Request 的所有标签
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\Label[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5ReposOwnerRepoPullsNumberLabelsWithHttpInfo($owner, $repo, $number, $accessToken = null, $page = '1', $perPage = '20')
    {
        $returnType = '\Gitee\Model\Label[]';
        $request = $this->getV5ReposOwnerRepoPullsNumberLabelsRequest($owner, $repo, $number, $accessToken, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\Label[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5ReposOwnerRepoPullsNumberLabelsAsync
     *
     * 获取某个 Pull Request 的所有标签
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoPullsNumberLabelsAsync($owner, $repo, $number, $accessToken = null, $page = '1', $perPage = '20')
    {
        return $this->getV5ReposOwnerRepoPullsNumberLabelsAsyncWithHttpInfo($owner, $repo, $number, $accessToken, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5ReposOwnerRepoPullsNumberLabelsAsyncWithHttpInfo
     *
     * 获取某个 Pull Request 的所有标签
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoPullsNumberLabelsAsyncWithHttpInfo($owner, $repo, $number, $accessToken = null, $page = '1', $perPage = '20')
    {
        $returnType = '\Gitee\Model\Label[]';
        $request = $this->getV5ReposOwnerRepoPullsNumberLabelsRequest($owner, $repo, $number, $accessToken, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5ReposOwnerRepoPullsNumberLabels'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5ReposOwnerRepoPullsNumberLabelsRequest($owner, $repo, $number, $accessToken = null, $page = '1', $perPage = '20')
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling getV5ReposOwnerRepoPullsNumberLabels'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling getV5ReposOwnerRepoPullsNumberLabels'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling getV5ReposOwnerRepoPullsNumberLabels'
            );
        }
        if ($perPage !== null && $perPage > 100) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling PullRequestsApi.getV5ReposOwnerRepoPullsNumberLabels, must be smaller than or equal to 100.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling PullRequestsApi.getV5ReposOwnerRepoPullsNumberLabels, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v5/repos/{owner}/{repo}/pulls/{number}/labels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5ReposOwnerRepoPullsNumberMerge
     *
     * 判断Pull Request是否已经合并
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getV5ReposOwnerRepoPullsNumberMerge($owner, $repo, $number, $accessToken = null)
    {
        $this->getV5ReposOwnerRepoPullsNumberMergeWithHttpInfo($owner, $repo, $number, $accessToken);
    }

    /**
     * Operation getV5ReposOwnerRepoPullsNumberMergeWithHttpInfo
     *
     * 判断Pull Request是否已经合并
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5ReposOwnerRepoPullsNumberMergeWithHttpInfo($owner, $repo, $number, $accessToken = null)
    {
        $returnType = '';
        $request = $this->getV5ReposOwnerRepoPullsNumberMergeRequest($owner, $repo, $number, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation getV5ReposOwnerRepoPullsNumberMergeAsync
     *
     * 判断Pull Request是否已经合并
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoPullsNumberMergeAsync($owner, $repo, $number, $accessToken = null)
    {
        return $this->getV5ReposOwnerRepoPullsNumberMergeAsyncWithHttpInfo($owner, $repo, $number, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5ReposOwnerRepoPullsNumberMergeAsyncWithHttpInfo
     *
     * 判断Pull Request是否已经合并
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoPullsNumberMergeAsyncWithHttpInfo($owner, $repo, $number, $accessToken = null)
    {
        $returnType = '';
        $request = $this->getV5ReposOwnerRepoPullsNumberMergeRequest($owner, $repo, $number, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5ReposOwnerRepoPullsNumberMerge'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5ReposOwnerRepoPullsNumberMergeRequest($owner, $repo, $number, $accessToken = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling getV5ReposOwnerRepoPullsNumberMerge'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling getV5ReposOwnerRepoPullsNumberMerge'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling getV5ReposOwnerRepoPullsNumberMerge'
            );
        }

        $resourcePath = '/v5/repos/{owner}/{repo}/pulls/{number}/merge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5ReposOwnerRepoPullsNumberOperateLogs
     *
     * 获取某个Pull Request的操作日志
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort 按递增(asc)或递减(desc)排序，默认：递减 (optional, default to desc)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\OperateLog[]
     */
    public function getV5ReposOwnerRepoPullsNumberOperateLogs($owner, $repo, $number, $accessToken = null, $sort = 'desc')
    {
        list($response) = $this->getV5ReposOwnerRepoPullsNumberOperateLogsWithHttpInfo($owner, $repo, $number, $accessToken, $sort);
        return $response;
    }

    /**
     * Operation getV5ReposOwnerRepoPullsNumberOperateLogsWithHttpInfo
     *
     * 获取某个Pull Request的操作日志
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort 按递增(asc)或递减(desc)排序，默认：递减 (optional, default to desc)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\OperateLog[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5ReposOwnerRepoPullsNumberOperateLogsWithHttpInfo($owner, $repo, $number, $accessToken = null, $sort = 'desc')
    {
        $returnType = '\Gitee\Model\OperateLog[]';
        $request = $this->getV5ReposOwnerRepoPullsNumberOperateLogsRequest($owner, $repo, $number, $accessToken, $sort);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\OperateLog[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5ReposOwnerRepoPullsNumberOperateLogsAsync
     *
     * 获取某个Pull Request的操作日志
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort 按递增(asc)或递减(desc)排序，默认：递减 (optional, default to desc)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoPullsNumberOperateLogsAsync($owner, $repo, $number, $accessToken = null, $sort = 'desc')
    {
        return $this->getV5ReposOwnerRepoPullsNumberOperateLogsAsyncWithHttpInfo($owner, $repo, $number, $accessToken, $sort)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5ReposOwnerRepoPullsNumberOperateLogsAsyncWithHttpInfo
     *
     * 获取某个Pull Request的操作日志
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort 按递增(asc)或递减(desc)排序，默认：递减 (optional, default to desc)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoPullsNumberOperateLogsAsyncWithHttpInfo($owner, $repo, $number, $accessToken = null, $sort = 'desc')
    {
        $returnType = '\Gitee\Model\OperateLog[]';
        $request = $this->getV5ReposOwnerRepoPullsNumberOperateLogsRequest($owner, $repo, $number, $accessToken, $sort);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5ReposOwnerRepoPullsNumberOperateLogs'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $sort 按递增(asc)或递减(desc)排序，默认：递减 (optional, default to desc)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5ReposOwnerRepoPullsNumberOperateLogsRequest($owner, $repo, $number, $accessToken = null, $sort = 'desc')
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling getV5ReposOwnerRepoPullsNumberOperateLogs'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling getV5ReposOwnerRepoPullsNumberOperateLogs'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling getV5ReposOwnerRepoPullsNumberOperateLogs'
            );
        }

        $resourcePath = '/v5/repos/{owner}/{repo}/pulls/{number}/operate_logs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }

        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchV5ReposOwnerRepoPullsCommentsId
     *
     * 编辑评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id 评论的ID (required)
     * @param  string $body 必填。评论内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\PullRequestComments
     */
    public function patchV5ReposOwnerRepoPullsCommentsId($owner, $repo, $id, $body, $accessToken = null)
    {
        list($response) = $this->patchV5ReposOwnerRepoPullsCommentsIdWithHttpInfo($owner, $repo, $id, $body, $accessToken);
        return $response;
    }

    /**
     * Operation patchV5ReposOwnerRepoPullsCommentsIdWithHttpInfo
     *
     * 编辑评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id 评论的ID (required)
     * @param  string $body 必填。评论内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\PullRequestComments, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchV5ReposOwnerRepoPullsCommentsIdWithHttpInfo($owner, $repo, $id, $body, $accessToken = null)
    {
        $returnType = '\Gitee\Model\PullRequestComments';
        $request = $this->patchV5ReposOwnerRepoPullsCommentsIdRequest($owner, $repo, $id, $body, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\PullRequestComments',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchV5ReposOwnerRepoPullsCommentsIdAsync
     *
     * 编辑评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id 评论的ID (required)
     * @param  string $body 必填。评论内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchV5ReposOwnerRepoPullsCommentsIdAsync($owner, $repo, $id, $body, $accessToken = null)
    {
        return $this->patchV5ReposOwnerRepoPullsCommentsIdAsyncWithHttpInfo($owner, $repo, $id, $body, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchV5ReposOwnerRepoPullsCommentsIdAsyncWithHttpInfo
     *
     * 编辑评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id 评论的ID (required)
     * @param  string $body 必填。评论内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchV5ReposOwnerRepoPullsCommentsIdAsyncWithHttpInfo($owner, $repo, $id, $body, $accessToken = null)
    {
        $returnType = '\Gitee\Model\PullRequestComments';
        $request = $this->patchV5ReposOwnerRepoPullsCommentsIdRequest($owner, $repo, $id, $body, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchV5ReposOwnerRepoPullsCommentsId'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id 评论的ID (required)
     * @param  string $body 必填。评论内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function patchV5ReposOwnerRepoPullsCommentsIdRequest($owner, $repo, $id, $body, $accessToken = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling patchV5ReposOwnerRepoPullsCommentsId'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling patchV5ReposOwnerRepoPullsCommentsId'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling patchV5ReposOwnerRepoPullsCommentsId'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling patchV5ReposOwnerRepoPullsCommentsId'
            );
        }

        $resourcePath = '/v5/repos/{owner}/{repo}/pulls/comments/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($body !== null) {
            $formParams['body'] = ObjectSerializer::toFormValue($body);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchV5ReposOwnerRepoPullsNumber
     *
     * 更新Pull Request信息
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $title 可选。Pull Request 标题 (optional)
     * @param  string $body 可选。Pull Request 内容 (optional)
     * @param  string $state 可选。Pull Request 状态 (optional)
     * @param  int $milestoneNumber 可选。里程碑序号(id) (optional)
     * @param  string $labels 用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance (optional)
     * @param  int $assigneesNumber 可选。最少审查人数 (optional)
     * @param  int $testersNumber 可选。最少测试人数 (optional)
     * @param  string $refPullRequestNumbers 可选。依赖的当前仓库下的PR编号，置空则清空依赖的PR。如：17,18,19 (optional)
     * @param  bool $closeRelatedIssue 可选，合并后是否关闭关联的 Issue，默认根据仓库配置设置 (optional)
     * @param  bool $draft 是否设置为草稿 (optional)
     * @param  bool $squash 接受 Pull Request 时使用扁平化（Squash）合并 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\PullRequest
     */
    public function patchV5ReposOwnerRepoPullsNumber($owner, $repo, $number, $accessToken = null, $title = null, $body = null, $state = null, $milestoneNumber = null, $labels = null, $assigneesNumber = null, $testersNumber = null, $refPullRequestNumbers = null, $closeRelatedIssue = null, $draft = null, $squash = null)
    {
        list($response) = $this->patchV5ReposOwnerRepoPullsNumberWithHttpInfo($owner, $repo, $number, $accessToken, $title, $body, $state, $milestoneNumber, $labels, $assigneesNumber, $testersNumber, $refPullRequestNumbers, $closeRelatedIssue, $draft, $squash);
        return $response;
    }

    /**
     * Operation patchV5ReposOwnerRepoPullsNumberWithHttpInfo
     *
     * 更新Pull Request信息
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $title 可选。Pull Request 标题 (optional)
     * @param  string $body 可选。Pull Request 内容 (optional)
     * @param  string $state 可选。Pull Request 状态 (optional)
     * @param  int $milestoneNumber 可选。里程碑序号(id) (optional)
     * @param  string $labels 用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance (optional)
     * @param  int $assigneesNumber 可选。最少审查人数 (optional)
     * @param  int $testersNumber 可选。最少测试人数 (optional)
     * @param  string $refPullRequestNumbers 可选。依赖的当前仓库下的PR编号，置空则清空依赖的PR。如：17,18,19 (optional)
     * @param  bool $closeRelatedIssue 可选，合并后是否关闭关联的 Issue，默认根据仓库配置设置 (optional)
     * @param  bool $draft 是否设置为草稿 (optional)
     * @param  bool $squash 接受 Pull Request 时使用扁平化（Squash）合并 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\PullRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchV5ReposOwnerRepoPullsNumberWithHttpInfo($owner, $repo, $number, $accessToken = null, $title = null, $body = null, $state = null, $milestoneNumber = null, $labels = null, $assigneesNumber = null, $testersNumber = null, $refPullRequestNumbers = null, $closeRelatedIssue = null, $draft = null, $squash = null)
    {
        $returnType = '\Gitee\Model\PullRequest';
        $request = $this->patchV5ReposOwnerRepoPullsNumberRequest($owner, $repo, $number, $accessToken, $title, $body, $state, $milestoneNumber, $labels, $assigneesNumber, $testersNumber, $refPullRequestNumbers, $closeRelatedIssue, $draft, $squash);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\PullRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchV5ReposOwnerRepoPullsNumberAsync
     *
     * 更新Pull Request信息
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $title 可选。Pull Request 标题 (optional)
     * @param  string $body 可选。Pull Request 内容 (optional)
     * @param  string $state 可选。Pull Request 状态 (optional)
     * @param  int $milestoneNumber 可选。里程碑序号(id) (optional)
     * @param  string $labels 用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance (optional)
     * @param  int $assigneesNumber 可选。最少审查人数 (optional)
     * @param  int $testersNumber 可选。最少测试人数 (optional)
     * @param  string $refPullRequestNumbers 可选。依赖的当前仓库下的PR编号，置空则清空依赖的PR。如：17,18,19 (optional)
     * @param  bool $closeRelatedIssue 可选，合并后是否关闭关联的 Issue，默认根据仓库配置设置 (optional)
     * @param  bool $draft 是否设置为草稿 (optional)
     * @param  bool $squash 接受 Pull Request 时使用扁平化（Squash）合并 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchV5ReposOwnerRepoPullsNumberAsync($owner, $repo, $number, $accessToken = null, $title = null, $body = null, $state = null, $milestoneNumber = null, $labels = null, $assigneesNumber = null, $testersNumber = null, $refPullRequestNumbers = null, $closeRelatedIssue = null, $draft = null, $squash = null)
    {
        return $this->patchV5ReposOwnerRepoPullsNumberAsyncWithHttpInfo($owner, $repo, $number, $accessToken, $title, $body, $state, $milestoneNumber, $labels, $assigneesNumber, $testersNumber, $refPullRequestNumbers, $closeRelatedIssue, $draft, $squash)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchV5ReposOwnerRepoPullsNumberAsyncWithHttpInfo
     *
     * 更新Pull Request信息
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $title 可选。Pull Request 标题 (optional)
     * @param  string $body 可选。Pull Request 内容 (optional)
     * @param  string $state 可选。Pull Request 状态 (optional)
     * @param  int $milestoneNumber 可选。里程碑序号(id) (optional)
     * @param  string $labels 用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance (optional)
     * @param  int $assigneesNumber 可选。最少审查人数 (optional)
     * @param  int $testersNumber 可选。最少测试人数 (optional)
     * @param  string $refPullRequestNumbers 可选。依赖的当前仓库下的PR编号，置空则清空依赖的PR。如：17,18,19 (optional)
     * @param  bool $closeRelatedIssue 可选，合并后是否关闭关联的 Issue，默认根据仓库配置设置 (optional)
     * @param  bool $draft 是否设置为草稿 (optional)
     * @param  bool $squash 接受 Pull Request 时使用扁平化（Squash）合并 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchV5ReposOwnerRepoPullsNumberAsyncWithHttpInfo($owner, $repo, $number, $accessToken = null, $title = null, $body = null, $state = null, $milestoneNumber = null, $labels = null, $assigneesNumber = null, $testersNumber = null, $refPullRequestNumbers = null, $closeRelatedIssue = null, $draft = null, $squash = null)
    {
        $returnType = '\Gitee\Model\PullRequest';
        $request = $this->patchV5ReposOwnerRepoPullsNumberRequest($owner, $repo, $number, $accessToken, $title, $body, $state, $milestoneNumber, $labels, $assigneesNumber, $testersNumber, $refPullRequestNumbers, $closeRelatedIssue, $draft, $squash);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchV5ReposOwnerRepoPullsNumber'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $title 可选。Pull Request 标题 (optional)
     * @param  string $body 可选。Pull Request 内容 (optional)
     * @param  string $state 可选。Pull Request 状态 (optional)
     * @param  int $milestoneNumber 可选。里程碑序号(id) (optional)
     * @param  string $labels 用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance (optional)
     * @param  int $assigneesNumber 可选。最少审查人数 (optional)
     * @param  int $testersNumber 可选。最少测试人数 (optional)
     * @param  string $refPullRequestNumbers 可选。依赖的当前仓库下的PR编号，置空则清空依赖的PR。如：17,18,19 (optional)
     * @param  bool $closeRelatedIssue 可选，合并后是否关闭关联的 Issue，默认根据仓库配置设置 (optional)
     * @param  bool $draft 是否设置为草稿 (optional)
     * @param  bool $squash 接受 Pull Request 时使用扁平化（Squash）合并 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function patchV5ReposOwnerRepoPullsNumberRequest($owner, $repo, $number, $accessToken = null, $title = null, $body = null, $state = null, $milestoneNumber = null, $labels = null, $assigneesNumber = null, $testersNumber = null, $refPullRequestNumbers = null, $closeRelatedIssue = null, $draft = null, $squash = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling patchV5ReposOwnerRepoPullsNumber'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling patchV5ReposOwnerRepoPullsNumber'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling patchV5ReposOwnerRepoPullsNumber'
            );
        }

        $resourcePath = '/v5/repos/{owner}/{repo}/pulls/{number}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($title !== null) {
            $formParams['title'] = ObjectSerializer::toFormValue($title);
        }
        // form params
        if ($body !== null) {
            $formParams['body'] = ObjectSerializer::toFormValue($body);
        }
        // form params
        if ($state !== null) {
            $formParams['state'] = ObjectSerializer::toFormValue($state);
        }
        // form params
        if ($milestoneNumber !== null) {
            $formParams['milestone_number'] = ObjectSerializer::toFormValue($milestoneNumber);
        }
        // form params
        if ($labels !== null) {
            $formParams['labels'] = ObjectSerializer::toFormValue($labels);
        }
        // form params
        if ($assigneesNumber !== null) {
            $formParams['assignees_number'] = ObjectSerializer::toFormValue($assigneesNumber);
        }
        // form params
        if ($testersNumber !== null) {
            $formParams['testers_number'] = ObjectSerializer::toFormValue($testersNumber);
        }
        // form params
        if ($refPullRequestNumbers !== null) {
            $formParams['ref_pull_request_numbers'] = ObjectSerializer::toFormValue($refPullRequestNumbers);
        }
        // form params
        if ($closeRelatedIssue !== null) {
            $formParams['close_related_issue'] = ObjectSerializer::toFormValue($closeRelatedIssue);
        }
        // form params
        if ($draft !== null) {
            $formParams['draft'] = ObjectSerializer::toFormValue($draft);
        }
        // form params
        if ($squash !== null) {
            $formParams['squash'] = ObjectSerializer::toFormValue($squash);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchV5ReposOwnerRepoPullsNumberAssignees
     *
     * 重置 Pull Request 审查 的状态
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  bool $resetAll 是否重置所有审查人，默认：false，只对管理员生效 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\PullRequest
     */
    public function patchV5ReposOwnerRepoPullsNumberAssignees($owner, $repo, $number, $accessToken = null, $resetAll = null)
    {
        list($response) = $this->patchV5ReposOwnerRepoPullsNumberAssigneesWithHttpInfo($owner, $repo, $number, $accessToken, $resetAll);
        return $response;
    }

    /**
     * Operation patchV5ReposOwnerRepoPullsNumberAssigneesWithHttpInfo
     *
     * 重置 Pull Request 审查 的状态
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  bool $resetAll 是否重置所有审查人，默认：false，只对管理员生效 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\PullRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchV5ReposOwnerRepoPullsNumberAssigneesWithHttpInfo($owner, $repo, $number, $accessToken = null, $resetAll = null)
    {
        $returnType = '\Gitee\Model\PullRequest';
        $request = $this->patchV5ReposOwnerRepoPullsNumberAssigneesRequest($owner, $repo, $number, $accessToken, $resetAll);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\PullRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchV5ReposOwnerRepoPullsNumberAssigneesAsync
     *
     * 重置 Pull Request 审查 的状态
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  bool $resetAll 是否重置所有审查人，默认：false，只对管理员生效 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchV5ReposOwnerRepoPullsNumberAssigneesAsync($owner, $repo, $number, $accessToken = null, $resetAll = null)
    {
        return $this->patchV5ReposOwnerRepoPullsNumberAssigneesAsyncWithHttpInfo($owner, $repo, $number, $accessToken, $resetAll)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchV5ReposOwnerRepoPullsNumberAssigneesAsyncWithHttpInfo
     *
     * 重置 Pull Request 审查 的状态
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  bool $resetAll 是否重置所有审查人，默认：false，只对管理员生效 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchV5ReposOwnerRepoPullsNumberAssigneesAsyncWithHttpInfo($owner, $repo, $number, $accessToken = null, $resetAll = null)
    {
        $returnType = '\Gitee\Model\PullRequest';
        $request = $this->patchV5ReposOwnerRepoPullsNumberAssigneesRequest($owner, $repo, $number, $accessToken, $resetAll);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchV5ReposOwnerRepoPullsNumberAssignees'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  bool $resetAll 是否重置所有审查人，默认：false，只对管理员生效 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function patchV5ReposOwnerRepoPullsNumberAssigneesRequest($owner, $repo, $number, $accessToken = null, $resetAll = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling patchV5ReposOwnerRepoPullsNumberAssignees'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling patchV5ReposOwnerRepoPullsNumberAssignees'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling patchV5ReposOwnerRepoPullsNumberAssignees'
            );
        }

        $resourcePath = '/v5/repos/{owner}/{repo}/pulls/{number}/assignees';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($resetAll !== null) {
            $formParams['reset_all'] = ObjectSerializer::toFormValue($resetAll);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchV5ReposOwnerRepoPullsNumberTesters
     *
     * 重置 Pull Request 测试 的状态
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  bool $resetAll 是否重置所有测试人，默认：false，只对管理员生效 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\PullRequest
     */
    public function patchV5ReposOwnerRepoPullsNumberTesters($owner, $repo, $number, $accessToken = null, $resetAll = null)
    {
        list($response) = $this->patchV5ReposOwnerRepoPullsNumberTestersWithHttpInfo($owner, $repo, $number, $accessToken, $resetAll);
        return $response;
    }

    /**
     * Operation patchV5ReposOwnerRepoPullsNumberTestersWithHttpInfo
     *
     * 重置 Pull Request 测试 的状态
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  bool $resetAll 是否重置所有测试人，默认：false，只对管理员生效 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\PullRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchV5ReposOwnerRepoPullsNumberTestersWithHttpInfo($owner, $repo, $number, $accessToken = null, $resetAll = null)
    {
        $returnType = '\Gitee\Model\PullRequest';
        $request = $this->patchV5ReposOwnerRepoPullsNumberTestersRequest($owner, $repo, $number, $accessToken, $resetAll);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\PullRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchV5ReposOwnerRepoPullsNumberTestersAsync
     *
     * 重置 Pull Request 测试 的状态
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  bool $resetAll 是否重置所有测试人，默认：false，只对管理员生效 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchV5ReposOwnerRepoPullsNumberTestersAsync($owner, $repo, $number, $accessToken = null, $resetAll = null)
    {
        return $this->patchV5ReposOwnerRepoPullsNumberTestersAsyncWithHttpInfo($owner, $repo, $number, $accessToken, $resetAll)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchV5ReposOwnerRepoPullsNumberTestersAsyncWithHttpInfo
     *
     * 重置 Pull Request 测试 的状态
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  bool $resetAll 是否重置所有测试人，默认：false，只对管理员生效 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchV5ReposOwnerRepoPullsNumberTestersAsyncWithHttpInfo($owner, $repo, $number, $accessToken = null, $resetAll = null)
    {
        $returnType = '\Gitee\Model\PullRequest';
        $request = $this->patchV5ReposOwnerRepoPullsNumberTestersRequest($owner, $repo, $number, $accessToken, $resetAll);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchV5ReposOwnerRepoPullsNumberTesters'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  bool $resetAll 是否重置所有测试人，默认：false，只对管理员生效 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function patchV5ReposOwnerRepoPullsNumberTestersRequest($owner, $repo, $number, $accessToken = null, $resetAll = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling patchV5ReposOwnerRepoPullsNumberTesters'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling patchV5ReposOwnerRepoPullsNumberTesters'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling patchV5ReposOwnerRepoPullsNumberTesters'
            );
        }

        $resourcePath = '/v5/repos/{owner}/{repo}/pulls/{number}/testers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($resetAll !== null) {
            $formParams['reset_all'] = ObjectSerializer::toFormValue($resetAll);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postV5ReposOwnerRepoPulls
     *
     * 创建Pull Request
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $title 必填。Pull Request 标题 (required)
     * @param  string $head 必填。Pull Request 提交的源分支。格式：branch 或者：username:branch (required)
     * @param  string $base 必填。Pull Request 提交目标分支的名称 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $body 可选。Pull Request 内容 (optional)
     * @param  int $milestoneNumber 可选。里程碑序号(id) (optional)
     * @param  string $labels 用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance (optional)
     * @param  string $issue 可选。Pull Request的标题和内容可以根据指定的Issue Id自动填充 (optional)
     * @param  string $assignees 可选。审查人员username，可多个，半角逗号分隔，如：(username1,username2), 注意: 当仓库代码审查设置中已设置【指派审查人员】则此选项无效 (optional)
     * @param  string $testers 可选。测试人员username，可多个，半角逗号分隔，如：(username1,username2), 注意: 当仓库代码审查设置中已设置【指派测试人员】则此选项无效 (optional)
     * @param  int $assigneesNumber 可选。最少审查人数 (optional)
     * @param  int $testersNumber 可选。最少测试人数 (optional)
     * @param  string $refPullRequestNumbers 可选。依赖的当前仓库下的PR编号，置空则清空依赖的PR。如：17,18,19 (optional)
     * @param  bool $pruneSourceBranch 可选。合并PR后是否删除源分支，默认false（不删除） (optional)
     * @param  bool $closeRelatedIssue 可选，合并后是否关闭关联的 Issue，默认根据仓库配置设置 (optional)
     * @param  bool $draft 是否设置为草稿 (optional)
     * @param  bool $squash 接受 Pull Request 时使用扁平化（Squash）合并 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\PullRequest
     */
    public function postV5ReposOwnerRepoPulls($owner, $repo, $title, $head, $base, $accessToken = null, $body = null, $milestoneNumber = null, $labels = null, $issue = null, $assignees = null, $testers = null, $assigneesNumber = null, $testersNumber = null, $refPullRequestNumbers = null, $pruneSourceBranch = null, $closeRelatedIssue = null, $draft = null, $squash = null)
    {
        list($response) = $this->postV5ReposOwnerRepoPullsWithHttpInfo($owner, $repo, $title, $head, $base, $accessToken, $body, $milestoneNumber, $labels, $issue, $assignees, $testers, $assigneesNumber, $testersNumber, $refPullRequestNumbers, $pruneSourceBranch, $closeRelatedIssue, $draft, $squash);
        return $response;
    }

    /**
     * Operation postV5ReposOwnerRepoPullsWithHttpInfo
     *
     * 创建Pull Request
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $title 必填。Pull Request 标题 (required)
     * @param  string $head 必填。Pull Request 提交的源分支。格式：branch 或者：username:branch (required)
     * @param  string $base 必填。Pull Request 提交目标分支的名称 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $body 可选。Pull Request 内容 (optional)
     * @param  int $milestoneNumber 可选。里程碑序号(id) (optional)
     * @param  string $labels 用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance (optional)
     * @param  string $issue 可选。Pull Request的标题和内容可以根据指定的Issue Id自动填充 (optional)
     * @param  string $assignees 可选。审查人员username，可多个，半角逗号分隔，如：(username1,username2), 注意: 当仓库代码审查设置中已设置【指派审查人员】则此选项无效 (optional)
     * @param  string $testers 可选。测试人员username，可多个，半角逗号分隔，如：(username1,username2), 注意: 当仓库代码审查设置中已设置【指派测试人员】则此选项无效 (optional)
     * @param  int $assigneesNumber 可选。最少审查人数 (optional)
     * @param  int $testersNumber 可选。最少测试人数 (optional)
     * @param  string $refPullRequestNumbers 可选。依赖的当前仓库下的PR编号，置空则清空依赖的PR。如：17,18,19 (optional)
     * @param  bool $pruneSourceBranch 可选。合并PR后是否删除源分支，默认false（不删除） (optional)
     * @param  bool $closeRelatedIssue 可选，合并后是否关闭关联的 Issue，默认根据仓库配置设置 (optional)
     * @param  bool $draft 是否设置为草稿 (optional)
     * @param  bool $squash 接受 Pull Request 时使用扁平化（Squash）合并 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\PullRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function postV5ReposOwnerRepoPullsWithHttpInfo($owner, $repo, $title, $head, $base, $accessToken = null, $body = null, $milestoneNumber = null, $labels = null, $issue = null, $assignees = null, $testers = null, $assigneesNumber = null, $testersNumber = null, $refPullRequestNumbers = null, $pruneSourceBranch = null, $closeRelatedIssue = null, $draft = null, $squash = null)
    {
        $returnType = '\Gitee\Model\PullRequest';
        $request = $this->postV5ReposOwnerRepoPullsRequest($owner, $repo, $title, $head, $base, $accessToken, $body, $milestoneNumber, $labels, $issue, $assignees, $testers, $assigneesNumber, $testersNumber, $refPullRequestNumbers, $pruneSourceBranch, $closeRelatedIssue, $draft, $squash);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\PullRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postV5ReposOwnerRepoPullsAsync
     *
     * 创建Pull Request
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $title 必填。Pull Request 标题 (required)
     * @param  string $head 必填。Pull Request 提交的源分支。格式：branch 或者：username:branch (required)
     * @param  string $base 必填。Pull Request 提交目标分支的名称 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $body 可选。Pull Request 内容 (optional)
     * @param  int $milestoneNumber 可选。里程碑序号(id) (optional)
     * @param  string $labels 用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance (optional)
     * @param  string $issue 可选。Pull Request的标题和内容可以根据指定的Issue Id自动填充 (optional)
     * @param  string $assignees 可选。审查人员username，可多个，半角逗号分隔，如：(username1,username2), 注意: 当仓库代码审查设置中已设置【指派审查人员】则此选项无效 (optional)
     * @param  string $testers 可选。测试人员username，可多个，半角逗号分隔，如：(username1,username2), 注意: 当仓库代码审查设置中已设置【指派测试人员】则此选项无效 (optional)
     * @param  int $assigneesNumber 可选。最少审查人数 (optional)
     * @param  int $testersNumber 可选。最少测试人数 (optional)
     * @param  string $refPullRequestNumbers 可选。依赖的当前仓库下的PR编号，置空则清空依赖的PR。如：17,18,19 (optional)
     * @param  bool $pruneSourceBranch 可选。合并PR后是否删除源分支，默认false（不删除） (optional)
     * @param  bool $closeRelatedIssue 可选，合并后是否关闭关联的 Issue，默认根据仓库配置设置 (optional)
     * @param  bool $draft 是否设置为草稿 (optional)
     * @param  bool $squash 接受 Pull Request 时使用扁平化（Squash）合并 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV5ReposOwnerRepoPullsAsync($owner, $repo, $title, $head, $base, $accessToken = null, $body = null, $milestoneNumber = null, $labels = null, $issue = null, $assignees = null, $testers = null, $assigneesNumber = null, $testersNumber = null, $refPullRequestNumbers = null, $pruneSourceBranch = null, $closeRelatedIssue = null, $draft = null, $squash = null)
    {
        return $this->postV5ReposOwnerRepoPullsAsyncWithHttpInfo($owner, $repo, $title, $head, $base, $accessToken, $body, $milestoneNumber, $labels, $issue, $assignees, $testers, $assigneesNumber, $testersNumber, $refPullRequestNumbers, $pruneSourceBranch, $closeRelatedIssue, $draft, $squash)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postV5ReposOwnerRepoPullsAsyncWithHttpInfo
     *
     * 创建Pull Request
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $title 必填。Pull Request 标题 (required)
     * @param  string $head 必填。Pull Request 提交的源分支。格式：branch 或者：username:branch (required)
     * @param  string $base 必填。Pull Request 提交目标分支的名称 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $body 可选。Pull Request 内容 (optional)
     * @param  int $milestoneNumber 可选。里程碑序号(id) (optional)
     * @param  string $labels 用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance (optional)
     * @param  string $issue 可选。Pull Request的标题和内容可以根据指定的Issue Id自动填充 (optional)
     * @param  string $assignees 可选。审查人员username，可多个，半角逗号分隔，如：(username1,username2), 注意: 当仓库代码审查设置中已设置【指派审查人员】则此选项无效 (optional)
     * @param  string $testers 可选。测试人员username，可多个，半角逗号分隔，如：(username1,username2), 注意: 当仓库代码审查设置中已设置【指派测试人员】则此选项无效 (optional)
     * @param  int $assigneesNumber 可选。最少审查人数 (optional)
     * @param  int $testersNumber 可选。最少测试人数 (optional)
     * @param  string $refPullRequestNumbers 可选。依赖的当前仓库下的PR编号，置空则清空依赖的PR。如：17,18,19 (optional)
     * @param  bool $pruneSourceBranch 可选。合并PR后是否删除源分支，默认false（不删除） (optional)
     * @param  bool $closeRelatedIssue 可选，合并后是否关闭关联的 Issue，默认根据仓库配置设置 (optional)
     * @param  bool $draft 是否设置为草稿 (optional)
     * @param  bool $squash 接受 Pull Request 时使用扁平化（Squash）合并 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV5ReposOwnerRepoPullsAsyncWithHttpInfo($owner, $repo, $title, $head, $base, $accessToken = null, $body = null, $milestoneNumber = null, $labels = null, $issue = null, $assignees = null, $testers = null, $assigneesNumber = null, $testersNumber = null, $refPullRequestNumbers = null, $pruneSourceBranch = null, $closeRelatedIssue = null, $draft = null, $squash = null)
    {
        $returnType = '\Gitee\Model\PullRequest';
        $request = $this->postV5ReposOwnerRepoPullsRequest($owner, $repo, $title, $head, $base, $accessToken, $body, $milestoneNumber, $labels, $issue, $assignees, $testers, $assigneesNumber, $testersNumber, $refPullRequestNumbers, $pruneSourceBranch, $closeRelatedIssue, $draft, $squash);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postV5ReposOwnerRepoPulls'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $title 必填。Pull Request 标题 (required)
     * @param  string $head 必填。Pull Request 提交的源分支。格式：branch 或者：username:branch (required)
     * @param  string $base 必填。Pull Request 提交目标分支的名称 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $body 可选。Pull Request 内容 (optional)
     * @param  int $milestoneNumber 可选。里程碑序号(id) (optional)
     * @param  string $labels 用逗号分开的标签，名称要求长度在 2-20 之间且非特殊字符。如: bug,performance (optional)
     * @param  string $issue 可选。Pull Request的标题和内容可以根据指定的Issue Id自动填充 (optional)
     * @param  string $assignees 可选。审查人员username，可多个，半角逗号分隔，如：(username1,username2), 注意: 当仓库代码审查设置中已设置【指派审查人员】则此选项无效 (optional)
     * @param  string $testers 可选。测试人员username，可多个，半角逗号分隔，如：(username1,username2), 注意: 当仓库代码审查设置中已设置【指派测试人员】则此选项无效 (optional)
     * @param  int $assigneesNumber 可选。最少审查人数 (optional)
     * @param  int $testersNumber 可选。最少测试人数 (optional)
     * @param  string $refPullRequestNumbers 可选。依赖的当前仓库下的PR编号，置空则清空依赖的PR。如：17,18,19 (optional)
     * @param  bool $pruneSourceBranch 可选。合并PR后是否删除源分支，默认false（不删除） (optional)
     * @param  bool $closeRelatedIssue 可选，合并后是否关闭关联的 Issue，默认根据仓库配置设置 (optional)
     * @param  bool $draft 是否设置为草稿 (optional)
     * @param  bool $squash 接受 Pull Request 时使用扁平化（Squash）合并 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postV5ReposOwnerRepoPullsRequest($owner, $repo, $title, $head, $base, $accessToken = null, $body = null, $milestoneNumber = null, $labels = null, $issue = null, $assignees = null, $testers = null, $assigneesNumber = null, $testersNumber = null, $refPullRequestNumbers = null, $pruneSourceBranch = null, $closeRelatedIssue = null, $draft = null, $squash = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling postV5ReposOwnerRepoPulls'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling postV5ReposOwnerRepoPulls'
            );
        }
        // verify the required parameter 'title' is set
        if ($title === null || (is_array($title) && count($title) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $title when calling postV5ReposOwnerRepoPulls'
            );
        }
        // verify the required parameter 'head' is set
        if ($head === null || (is_array($head) && count($head) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $head when calling postV5ReposOwnerRepoPulls'
            );
        }
        // verify the required parameter 'base' is set
        if ($base === null || (is_array($base) && count($base) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $base when calling postV5ReposOwnerRepoPulls'
            );
        }

        $resourcePath = '/v5/repos/{owner}/{repo}/pulls';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($title !== null) {
            $formParams['title'] = ObjectSerializer::toFormValue($title);
        }
        // form params
        if ($head !== null) {
            $formParams['head'] = ObjectSerializer::toFormValue($head);
        }
        // form params
        if ($base !== null) {
            $formParams['base'] = ObjectSerializer::toFormValue($base);
        }
        // form params
        if ($body !== null) {
            $formParams['body'] = ObjectSerializer::toFormValue($body);
        }
        // form params
        if ($milestoneNumber !== null) {
            $formParams['milestone_number'] = ObjectSerializer::toFormValue($milestoneNumber);
        }
        // form params
        if ($labels !== null) {
            $formParams['labels'] = ObjectSerializer::toFormValue($labels);
        }
        // form params
        if ($issue !== null) {
            $formParams['issue'] = ObjectSerializer::toFormValue($issue);
        }
        // form params
        if ($assignees !== null) {
            $formParams['assignees'] = ObjectSerializer::toFormValue($assignees);
        }
        // form params
        if ($testers !== null) {
            $formParams['testers'] = ObjectSerializer::toFormValue($testers);
        }
        // form params
        if ($assigneesNumber !== null) {
            $formParams['assignees_number'] = ObjectSerializer::toFormValue($assigneesNumber);
        }
        // form params
        if ($testersNumber !== null) {
            $formParams['testers_number'] = ObjectSerializer::toFormValue($testersNumber);
        }
        // form params
        if ($refPullRequestNumbers !== null) {
            $formParams['ref_pull_request_numbers'] = ObjectSerializer::toFormValue($refPullRequestNumbers);
        }
        // form params
        if ($pruneSourceBranch !== null) {
            $formParams['prune_source_branch'] = ObjectSerializer::toFormValue($pruneSourceBranch);
        }
        // form params
        if ($closeRelatedIssue !== null) {
            $formParams['close_related_issue'] = ObjectSerializer::toFormValue($closeRelatedIssue);
        }
        // form params
        if ($draft !== null) {
            $formParams['draft'] = ObjectSerializer::toFormValue($draft);
        }
        // form params
        if ($squash !== null) {
            $formParams['squash'] = ObjectSerializer::toFormValue($squash);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postV5ReposOwnerRepoPullsNumberAssignees
     *
     * 指派用户审查 Pull Request
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $assignees 用户的个人空间地址, 以 , 分隔 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\PullRequest
     */
    public function postV5ReposOwnerRepoPullsNumberAssignees($owner, $repo, $number, $assignees, $accessToken = null)
    {
        list($response) = $this->postV5ReposOwnerRepoPullsNumberAssigneesWithHttpInfo($owner, $repo, $number, $assignees, $accessToken);
        return $response;
    }

    /**
     * Operation postV5ReposOwnerRepoPullsNumberAssigneesWithHttpInfo
     *
     * 指派用户审查 Pull Request
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $assignees 用户的个人空间地址, 以 , 分隔 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\PullRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function postV5ReposOwnerRepoPullsNumberAssigneesWithHttpInfo($owner, $repo, $number, $assignees, $accessToken = null)
    {
        $returnType = '\Gitee\Model\PullRequest';
        $request = $this->postV5ReposOwnerRepoPullsNumberAssigneesRequest($owner, $repo, $number, $assignees, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\PullRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postV5ReposOwnerRepoPullsNumberAssigneesAsync
     *
     * 指派用户审查 Pull Request
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $assignees 用户的个人空间地址, 以 , 分隔 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV5ReposOwnerRepoPullsNumberAssigneesAsync($owner, $repo, $number, $assignees, $accessToken = null)
    {
        return $this->postV5ReposOwnerRepoPullsNumberAssigneesAsyncWithHttpInfo($owner, $repo, $number, $assignees, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postV5ReposOwnerRepoPullsNumberAssigneesAsyncWithHttpInfo
     *
     * 指派用户审查 Pull Request
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $assignees 用户的个人空间地址, 以 , 分隔 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV5ReposOwnerRepoPullsNumberAssigneesAsyncWithHttpInfo($owner, $repo, $number, $assignees, $accessToken = null)
    {
        $returnType = '\Gitee\Model\PullRequest';
        $request = $this->postV5ReposOwnerRepoPullsNumberAssigneesRequest($owner, $repo, $number, $assignees, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postV5ReposOwnerRepoPullsNumberAssignees'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $assignees 用户的个人空间地址, 以 , 分隔 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postV5ReposOwnerRepoPullsNumberAssigneesRequest($owner, $repo, $number, $assignees, $accessToken = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling postV5ReposOwnerRepoPullsNumberAssignees'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling postV5ReposOwnerRepoPullsNumberAssignees'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling postV5ReposOwnerRepoPullsNumberAssignees'
            );
        }
        // verify the required parameter 'assignees' is set
        if ($assignees === null || (is_array($assignees) && count($assignees) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $assignees when calling postV5ReposOwnerRepoPullsNumberAssignees'
            );
        }

        $resourcePath = '/v5/repos/{owner}/{repo}/pulls/{number}/assignees';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($assignees !== null) {
            $formParams['assignees'] = ObjectSerializer::toFormValue($assignees);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postV5ReposOwnerRepoPullsNumberComments
     *
     * 提交Pull Request评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $body 必填。评论内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $commitId 可选。PR代码评论的commit id (optional)
     * @param  string $path 可选。PR代码评论的文件名 (optional)
     * @param  int $position 可选。PR代码评论diff中的行数 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\PullRequestComments
     */
    public function postV5ReposOwnerRepoPullsNumberComments($owner, $repo, $number, $body, $accessToken = null, $commitId = null, $path = null, $position = null)
    {
        list($response) = $this->postV5ReposOwnerRepoPullsNumberCommentsWithHttpInfo($owner, $repo, $number, $body, $accessToken, $commitId, $path, $position);
        return $response;
    }

    /**
     * Operation postV5ReposOwnerRepoPullsNumberCommentsWithHttpInfo
     *
     * 提交Pull Request评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $body 必填。评论内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $commitId 可选。PR代码评论的commit id (optional)
     * @param  string $path 可选。PR代码评论的文件名 (optional)
     * @param  int $position 可选。PR代码评论diff中的行数 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\PullRequestComments, HTTP status code, HTTP response headers (array of strings)
     */
    public function postV5ReposOwnerRepoPullsNumberCommentsWithHttpInfo($owner, $repo, $number, $body, $accessToken = null, $commitId = null, $path = null, $position = null)
    {
        $returnType = '\Gitee\Model\PullRequestComments';
        $request = $this->postV5ReposOwnerRepoPullsNumberCommentsRequest($owner, $repo, $number, $body, $accessToken, $commitId, $path, $position);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\PullRequestComments',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postV5ReposOwnerRepoPullsNumberCommentsAsync
     *
     * 提交Pull Request评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $body 必填。评论内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $commitId 可选。PR代码评论的commit id (optional)
     * @param  string $path 可选。PR代码评论的文件名 (optional)
     * @param  int $position 可选。PR代码评论diff中的行数 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV5ReposOwnerRepoPullsNumberCommentsAsync($owner, $repo, $number, $body, $accessToken = null, $commitId = null, $path = null, $position = null)
    {
        return $this->postV5ReposOwnerRepoPullsNumberCommentsAsyncWithHttpInfo($owner, $repo, $number, $body, $accessToken, $commitId, $path, $position)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postV5ReposOwnerRepoPullsNumberCommentsAsyncWithHttpInfo
     *
     * 提交Pull Request评论
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $body 必填。评论内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $commitId 可选。PR代码评论的commit id (optional)
     * @param  string $path 可选。PR代码评论的文件名 (optional)
     * @param  int $position 可选。PR代码评论diff中的行数 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV5ReposOwnerRepoPullsNumberCommentsAsyncWithHttpInfo($owner, $repo, $number, $body, $accessToken = null, $commitId = null, $path = null, $position = null)
    {
        $returnType = '\Gitee\Model\PullRequestComments';
        $request = $this->postV5ReposOwnerRepoPullsNumberCommentsRequest($owner, $repo, $number, $body, $accessToken, $commitId, $path, $position);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postV5ReposOwnerRepoPullsNumberComments'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $body 必填。评论内容 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $commitId 可选。PR代码评论的commit id (optional)
     * @param  string $path 可选。PR代码评论的文件名 (optional)
     * @param  int $position 可选。PR代码评论diff中的行数 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postV5ReposOwnerRepoPullsNumberCommentsRequest($owner, $repo, $number, $body, $accessToken = null, $commitId = null, $path = null, $position = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling postV5ReposOwnerRepoPullsNumberComments'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling postV5ReposOwnerRepoPullsNumberComments'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling postV5ReposOwnerRepoPullsNumberComments'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postV5ReposOwnerRepoPullsNumberComments'
            );
        }

        $resourcePath = '/v5/repos/{owner}/{repo}/pulls/{number}/comments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($body !== null) {
            $formParams['body'] = ObjectSerializer::toFormValue($body);
        }
        // form params
        if ($commitId !== null) {
            $formParams['commit_id'] = ObjectSerializer::toFormValue($commitId);
        }
        // form params
        if ($path !== null) {
            $formParams['path'] = ObjectSerializer::toFormValue($path);
        }
        // form params
        if ($position !== null) {
            $formParams['position'] = ObjectSerializer::toFormValue($position);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postV5ReposOwnerRepoPullsNumberLabels
     *
     * 创建 Pull Request 标签
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string[] $body 标签名数组，如: [\&quot;feat\&quot;, \&quot;bug\&quot;] (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\Label[]
     */
    public function postV5ReposOwnerRepoPullsNumberLabels($owner, $repo, $number, $body, $accessToken = null)
    {
        list($response) = $this->postV5ReposOwnerRepoPullsNumberLabelsWithHttpInfo($owner, $repo, $number, $body, $accessToken);
        return $response;
    }

    /**
     * Operation postV5ReposOwnerRepoPullsNumberLabelsWithHttpInfo
     *
     * 创建 Pull Request 标签
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string[] $body 标签名数组，如: [\&quot;feat\&quot;, \&quot;bug\&quot;] (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\Label[], HTTP status code, HTTP response headers (array of strings)
     */
    public function postV5ReposOwnerRepoPullsNumberLabelsWithHttpInfo($owner, $repo, $number, $body, $accessToken = null)
    {
        $returnType = '\Gitee\Model\Label[]';
        $request = $this->postV5ReposOwnerRepoPullsNumberLabelsRequest($owner, $repo, $number, $body, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\Label[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postV5ReposOwnerRepoPullsNumberLabelsAsync
     *
     * 创建 Pull Request 标签
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string[] $body 标签名数组，如: [\&quot;feat\&quot;, \&quot;bug\&quot;] (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV5ReposOwnerRepoPullsNumberLabelsAsync($owner, $repo, $number, $body, $accessToken = null)
    {
        return $this->postV5ReposOwnerRepoPullsNumberLabelsAsyncWithHttpInfo($owner, $repo, $number, $body, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postV5ReposOwnerRepoPullsNumberLabelsAsyncWithHttpInfo
     *
     * 创建 Pull Request 标签
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string[] $body 标签名数组，如: [\&quot;feat\&quot;, \&quot;bug\&quot;] (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV5ReposOwnerRepoPullsNumberLabelsAsyncWithHttpInfo($owner, $repo, $number, $body, $accessToken = null)
    {
        $returnType = '\Gitee\Model\Label[]';
        $request = $this->postV5ReposOwnerRepoPullsNumberLabelsRequest($owner, $repo, $number, $body, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postV5ReposOwnerRepoPullsNumberLabels'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string[] $body 标签名数组，如: [\&quot;feat\&quot;, \&quot;bug\&quot;] (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postV5ReposOwnerRepoPullsNumberLabelsRequest($owner, $repo, $number, $body, $accessToken = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling postV5ReposOwnerRepoPullsNumberLabels'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling postV5ReposOwnerRepoPullsNumberLabels'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling postV5ReposOwnerRepoPullsNumberLabels'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling postV5ReposOwnerRepoPullsNumberLabels'
            );
        }

        $resourcePath = '/v5/repos/{owner}/{repo}/pulls/{number}/labels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postV5ReposOwnerRepoPullsNumberReview
     *
     * 处理 Pull Request 审查
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  bool $force 是否强制审查通过（默认否），只对管理员生效 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postV5ReposOwnerRepoPullsNumberReview($owner, $repo, $number, $accessToken = null, $force = null)
    {
        $this->postV5ReposOwnerRepoPullsNumberReviewWithHttpInfo($owner, $repo, $number, $accessToken, $force);
    }

    /**
     * Operation postV5ReposOwnerRepoPullsNumberReviewWithHttpInfo
     *
     * 处理 Pull Request 审查
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  bool $force 是否强制审查通过（默认否），只对管理员生效 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postV5ReposOwnerRepoPullsNumberReviewWithHttpInfo($owner, $repo, $number, $accessToken = null, $force = null)
    {
        $returnType = '';
        $request = $this->postV5ReposOwnerRepoPullsNumberReviewRequest($owner, $repo, $number, $accessToken, $force);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postV5ReposOwnerRepoPullsNumberReviewAsync
     *
     * 处理 Pull Request 审查
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  bool $force 是否强制审查通过（默认否），只对管理员生效 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV5ReposOwnerRepoPullsNumberReviewAsync($owner, $repo, $number, $accessToken = null, $force = null)
    {
        return $this->postV5ReposOwnerRepoPullsNumberReviewAsyncWithHttpInfo($owner, $repo, $number, $accessToken, $force)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postV5ReposOwnerRepoPullsNumberReviewAsyncWithHttpInfo
     *
     * 处理 Pull Request 审查
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  bool $force 是否强制审查通过（默认否），只对管理员生效 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV5ReposOwnerRepoPullsNumberReviewAsyncWithHttpInfo($owner, $repo, $number, $accessToken = null, $force = null)
    {
        $returnType = '';
        $request = $this->postV5ReposOwnerRepoPullsNumberReviewRequest($owner, $repo, $number, $accessToken, $force);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postV5ReposOwnerRepoPullsNumberReview'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  bool $force 是否强制审查通过（默认否），只对管理员生效 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postV5ReposOwnerRepoPullsNumberReviewRequest($owner, $repo, $number, $accessToken = null, $force = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling postV5ReposOwnerRepoPullsNumberReview'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling postV5ReposOwnerRepoPullsNumberReview'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling postV5ReposOwnerRepoPullsNumberReview'
            );
        }

        $resourcePath = '/v5/repos/{owner}/{repo}/pulls/{number}/review';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($force !== null) {
            $formParams['force'] = ObjectSerializer::toFormValue($force);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postV5ReposOwnerRepoPullsNumberTest
     *
     * 处理 Pull Request 测试
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  bool $force 是否强制测试通过（默认否），只对管理员生效 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postV5ReposOwnerRepoPullsNumberTest($owner, $repo, $number, $accessToken = null, $force = null)
    {
        $this->postV5ReposOwnerRepoPullsNumberTestWithHttpInfo($owner, $repo, $number, $accessToken, $force);
    }

    /**
     * Operation postV5ReposOwnerRepoPullsNumberTestWithHttpInfo
     *
     * 处理 Pull Request 测试
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  bool $force 是否强制测试通过（默认否），只对管理员生效 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postV5ReposOwnerRepoPullsNumberTestWithHttpInfo($owner, $repo, $number, $accessToken = null, $force = null)
    {
        $returnType = '';
        $request = $this->postV5ReposOwnerRepoPullsNumberTestRequest($owner, $repo, $number, $accessToken, $force);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postV5ReposOwnerRepoPullsNumberTestAsync
     *
     * 处理 Pull Request 测试
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  bool $force 是否强制测试通过（默认否），只对管理员生效 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV5ReposOwnerRepoPullsNumberTestAsync($owner, $repo, $number, $accessToken = null, $force = null)
    {
        return $this->postV5ReposOwnerRepoPullsNumberTestAsyncWithHttpInfo($owner, $repo, $number, $accessToken, $force)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postV5ReposOwnerRepoPullsNumberTestAsyncWithHttpInfo
     *
     * 处理 Pull Request 测试
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  bool $force 是否强制测试通过（默认否），只对管理员生效 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV5ReposOwnerRepoPullsNumberTestAsyncWithHttpInfo($owner, $repo, $number, $accessToken = null, $force = null)
    {
        $returnType = '';
        $request = $this->postV5ReposOwnerRepoPullsNumberTestRequest($owner, $repo, $number, $accessToken, $force);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postV5ReposOwnerRepoPullsNumberTest'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  bool $force 是否强制测试通过（默认否），只对管理员生效 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postV5ReposOwnerRepoPullsNumberTestRequest($owner, $repo, $number, $accessToken = null, $force = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling postV5ReposOwnerRepoPullsNumberTest'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling postV5ReposOwnerRepoPullsNumberTest'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling postV5ReposOwnerRepoPullsNumberTest'
            );
        }

        $resourcePath = '/v5/repos/{owner}/{repo}/pulls/{number}/test';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($force !== null) {
            $formParams['force'] = ObjectSerializer::toFormValue($force);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postV5ReposOwnerRepoPullsNumberTesters
     *
     * 指派用户测试 Pull Request
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $testers 用户的个人空间地址, 以 , 分隔 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\PullRequest
     */
    public function postV5ReposOwnerRepoPullsNumberTesters($owner, $repo, $number, $testers, $accessToken = null)
    {
        list($response) = $this->postV5ReposOwnerRepoPullsNumberTestersWithHttpInfo($owner, $repo, $number, $testers, $accessToken);
        return $response;
    }

    /**
     * Operation postV5ReposOwnerRepoPullsNumberTestersWithHttpInfo
     *
     * 指派用户测试 Pull Request
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $testers 用户的个人空间地址, 以 , 分隔 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\PullRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function postV5ReposOwnerRepoPullsNumberTestersWithHttpInfo($owner, $repo, $number, $testers, $accessToken = null)
    {
        $returnType = '\Gitee\Model\PullRequest';
        $request = $this->postV5ReposOwnerRepoPullsNumberTestersRequest($owner, $repo, $number, $testers, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\PullRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postV5ReposOwnerRepoPullsNumberTestersAsync
     *
     * 指派用户测试 Pull Request
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $testers 用户的个人空间地址, 以 , 分隔 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV5ReposOwnerRepoPullsNumberTestersAsync($owner, $repo, $number, $testers, $accessToken = null)
    {
        return $this->postV5ReposOwnerRepoPullsNumberTestersAsyncWithHttpInfo($owner, $repo, $number, $testers, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postV5ReposOwnerRepoPullsNumberTestersAsyncWithHttpInfo
     *
     * 指派用户测试 Pull Request
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $testers 用户的个人空间地址, 以 , 分隔 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV5ReposOwnerRepoPullsNumberTestersAsyncWithHttpInfo($owner, $repo, $number, $testers, $accessToken = null)
    {
        $returnType = '\Gitee\Model\PullRequest';
        $request = $this->postV5ReposOwnerRepoPullsNumberTestersRequest($owner, $repo, $number, $testers, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postV5ReposOwnerRepoPullsNumberTesters'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $testers 用户的个人空间地址, 以 , 分隔 (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postV5ReposOwnerRepoPullsNumberTestersRequest($owner, $repo, $number, $testers, $accessToken = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling postV5ReposOwnerRepoPullsNumberTesters'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling postV5ReposOwnerRepoPullsNumberTesters'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling postV5ReposOwnerRepoPullsNumberTesters'
            );
        }
        // verify the required parameter 'testers' is set
        if ($testers === null || (is_array($testers) && count($testers) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $testers when calling postV5ReposOwnerRepoPullsNumberTesters'
            );
        }

        $resourcePath = '/v5/repos/{owner}/{repo}/pulls/{number}/testers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($testers !== null) {
            $formParams['testers'] = ObjectSerializer::toFormValue($testers);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putV5ReposOwnerRepoPullsNumberLabels
     *
     * 替换 Pull Request 所有标签
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string[] $body 标签名数组，如: [\&quot;feat\&quot;, \&quot;bug\&quot;] (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\Label[]
     */
    public function putV5ReposOwnerRepoPullsNumberLabels($owner, $repo, $number, $body, $accessToken = null)
    {
        list($response) = $this->putV5ReposOwnerRepoPullsNumberLabelsWithHttpInfo($owner, $repo, $number, $body, $accessToken);
        return $response;
    }

    /**
     * Operation putV5ReposOwnerRepoPullsNumberLabelsWithHttpInfo
     *
     * 替换 Pull Request 所有标签
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string[] $body 标签名数组，如: [\&quot;feat\&quot;, \&quot;bug\&quot;] (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\Label[], HTTP status code, HTTP response headers (array of strings)
     */
    public function putV5ReposOwnerRepoPullsNumberLabelsWithHttpInfo($owner, $repo, $number, $body, $accessToken = null)
    {
        $returnType = '\Gitee\Model\Label[]';
        $request = $this->putV5ReposOwnerRepoPullsNumberLabelsRequest($owner, $repo, $number, $body, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\Label[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation putV5ReposOwnerRepoPullsNumberLabelsAsync
     *
     * 替换 Pull Request 所有标签
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string[] $body 标签名数组，如: [\&quot;feat\&quot;, \&quot;bug\&quot;] (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putV5ReposOwnerRepoPullsNumberLabelsAsync($owner, $repo, $number, $body, $accessToken = null)
    {
        return $this->putV5ReposOwnerRepoPullsNumberLabelsAsyncWithHttpInfo($owner, $repo, $number, $body, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putV5ReposOwnerRepoPullsNumberLabelsAsyncWithHttpInfo
     *
     * 替换 Pull Request 所有标签
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string[] $body 标签名数组，如: [\&quot;feat\&quot;, \&quot;bug\&quot;] (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putV5ReposOwnerRepoPullsNumberLabelsAsyncWithHttpInfo($owner, $repo, $number, $body, $accessToken = null)
    {
        $returnType = '\Gitee\Model\Label[]';
        $request = $this->putV5ReposOwnerRepoPullsNumberLabelsRequest($owner, $repo, $number, $body, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putV5ReposOwnerRepoPullsNumberLabels'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string[] $body 标签名数组，如: [\&quot;feat\&quot;, \&quot;bug\&quot;] (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putV5ReposOwnerRepoPullsNumberLabelsRequest($owner, $repo, $number, $body, $accessToken = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling putV5ReposOwnerRepoPullsNumberLabels'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling putV5ReposOwnerRepoPullsNumberLabels'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling putV5ReposOwnerRepoPullsNumberLabels'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling putV5ReposOwnerRepoPullsNumberLabels'
            );
        }

        $resourcePath = '/v5/repos/{owner}/{repo}/pulls/{number}/labels';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation putV5ReposOwnerRepoPullsNumberMerge
     *
     * 合并Pull Request
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $mergeMethod 可选。合并PR的方法，merge（合并所有提交）、squash（扁平化分支合并）和rebase（变基并合并）。默认为merge。 (optional, default to merge)
     * @param  bool $pruneSourceBranch 可选。合并PR后是否删除源分支，默认false（不删除） (optional)
     * @param  string $title 可选。合并标题，默认为PR的标题 (optional)
     * @param  string $description 可选。合并描述，默认为 \&quot;Merge pull request !{pr_id} from {author}/{source_branch}\&quot;，与页面显示的默认一致。 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function putV5ReposOwnerRepoPullsNumberMerge($owner, $repo, $number, $accessToken = null, $mergeMethod = 'merge', $pruneSourceBranch = null, $title = null, $description = null)
    {
        $this->putV5ReposOwnerRepoPullsNumberMergeWithHttpInfo($owner, $repo, $number, $accessToken, $mergeMethod, $pruneSourceBranch, $title, $description);
    }

    /**
     * Operation putV5ReposOwnerRepoPullsNumberMergeWithHttpInfo
     *
     * 合并Pull Request
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $mergeMethod 可选。合并PR的方法，merge（合并所有提交）、squash（扁平化分支合并）和rebase（变基并合并）。默认为merge。 (optional, default to merge)
     * @param  bool $pruneSourceBranch 可选。合并PR后是否删除源分支，默认false（不删除） (optional)
     * @param  string $title 可选。合并标题，默认为PR的标题 (optional)
     * @param  string $description 可选。合并描述，默认为 \&quot;Merge pull request !{pr_id} from {author}/{source_branch}\&quot;，与页面显示的默认一致。 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function putV5ReposOwnerRepoPullsNumberMergeWithHttpInfo($owner, $repo, $number, $accessToken = null, $mergeMethod = 'merge', $pruneSourceBranch = null, $title = null, $description = null)
    {
        $returnType = '';
        $request = $this->putV5ReposOwnerRepoPullsNumberMergeRequest($owner, $repo, $number, $accessToken, $mergeMethod, $pruneSourceBranch, $title, $description);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation putV5ReposOwnerRepoPullsNumberMergeAsync
     *
     * 合并Pull Request
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $mergeMethod 可选。合并PR的方法，merge（合并所有提交）、squash（扁平化分支合并）和rebase（变基并合并）。默认为merge。 (optional, default to merge)
     * @param  bool $pruneSourceBranch 可选。合并PR后是否删除源分支，默认false（不删除） (optional)
     * @param  string $title 可选。合并标题，默认为PR的标题 (optional)
     * @param  string $description 可选。合并描述，默认为 \&quot;Merge pull request !{pr_id} from {author}/{source_branch}\&quot;，与页面显示的默认一致。 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putV5ReposOwnerRepoPullsNumberMergeAsync($owner, $repo, $number, $accessToken = null, $mergeMethod = 'merge', $pruneSourceBranch = null, $title = null, $description = null)
    {
        return $this->putV5ReposOwnerRepoPullsNumberMergeAsyncWithHttpInfo($owner, $repo, $number, $accessToken, $mergeMethod, $pruneSourceBranch, $title, $description)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation putV5ReposOwnerRepoPullsNumberMergeAsyncWithHttpInfo
     *
     * 合并Pull Request
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $mergeMethod 可选。合并PR的方法，merge（合并所有提交）、squash（扁平化分支合并）和rebase（变基并合并）。默认为merge。 (optional, default to merge)
     * @param  bool $pruneSourceBranch 可选。合并PR后是否删除源分支，默认false（不删除） (optional)
     * @param  string $title 可选。合并标题，默认为PR的标题 (optional)
     * @param  string $description 可选。合并描述，默认为 \&quot;Merge pull request !{pr_id} from {author}/{source_branch}\&quot;，与页面显示的默认一致。 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function putV5ReposOwnerRepoPullsNumberMergeAsyncWithHttpInfo($owner, $repo, $number, $accessToken = null, $mergeMethod = 'merge', $pruneSourceBranch = null, $title = null, $description = null)
    {
        $returnType = '';
        $request = $this->putV5ReposOwnerRepoPullsNumberMergeRequest($owner, $repo, $number, $accessToken, $mergeMethod, $pruneSourceBranch, $title, $description);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'putV5ReposOwnerRepoPullsNumberMerge'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $number 第几个PR，即本仓库PR的序数 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  string $mergeMethod 可选。合并PR的方法，merge（合并所有提交）、squash（扁平化分支合并）和rebase（变基并合并）。默认为merge。 (optional, default to merge)
     * @param  bool $pruneSourceBranch 可选。合并PR后是否删除源分支，默认false（不删除） (optional)
     * @param  string $title 可选。合并标题，默认为PR的标题 (optional)
     * @param  string $description 可选。合并描述，默认为 \&quot;Merge pull request !{pr_id} from {author}/{source_branch}\&quot;，与页面显示的默认一致。 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function putV5ReposOwnerRepoPullsNumberMergeRequest($owner, $repo, $number, $accessToken = null, $mergeMethod = 'merge', $pruneSourceBranch = null, $title = null, $description = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling putV5ReposOwnerRepoPullsNumberMerge'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling putV5ReposOwnerRepoPullsNumberMerge'
            );
        }
        // verify the required parameter 'number' is set
        if ($number === null || (is_array($number) && count($number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $number when calling putV5ReposOwnerRepoPullsNumberMerge'
            );
        }

        $resourcePath = '/v5/repos/{owner}/{repo}/pulls/{number}/merge';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                '{' . 'number' . '}',
                ObjectSerializer::toPathValue($number),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($mergeMethod !== null) {
            $formParams['merge_method'] = ObjectSerializer::toFormValue($mergeMethod);
        }
        // form params
        if ($pruneSourceBranch !== null) {
            $formParams['prune_source_branch'] = ObjectSerializer::toFormValue($pruneSourceBranch);
        }
        // form params
        if ($title !== null) {
            $formParams['title'] = ObjectSerializer::toFormValue($title);
        }
        // form params
        if ($description !== null) {
            $formParams['description'] = ObjectSerializer::toFormValue($description);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
