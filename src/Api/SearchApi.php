<?php
/**
 * SearchApi
 * PHP version 5
 *
 * @category Class
 * @package  Gitee
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * Gitee SDK for PHP
 *
 * OpenAPI spec version: 5.4.85
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.42
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Gitee\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Gitee\ApiException;
use Gitee\Configuration;
use Gitee\HeaderSelector;
use Gitee\ObjectSerializer;

/**
 * SearchApi Class Doc Comment
 *
 * @category Class
 * @package  Gitee
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SearchApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getV5SearchIssues
     *
     * 搜索 Issues
     *
     * @param  string $q 搜索关键字 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $repo 筛选指定仓库 (path, e.g. oschina/git-osc) 的 issues (optional)
     * @param  string $language 筛选指定语言的 issues (optional)
     * @param  string $label 筛选指定标签的 issues (optional)
     * @param  string $state 筛选指定状态的 issues, open(开启)、closed(完成)、rejected(拒绝) (optional)
     * @param  string $author 筛选指定创建者 (username/login) 的 issues (optional)
     * @param  string $assignee 筛选指定负责人 (username/login) 的 issues (optional)
     * @param  string $sort 排序字段，created_at(创建时间)、last_push_at(更新时间)、notes_count(评论数)，默认为最佳匹配 (optional)
     * @param  string $order 排序顺序: desc(default)、asc (optional, default to desc)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\Issue[]
     */
    public function getV5SearchIssues($q, $accessToken = null, $page = '1', $perPage = '20', $repo = null, $language = null, $label = null, $state = null, $author = null, $assignee = null, $sort = null, $order = 'desc')
    {
        list($response) = $this->getV5SearchIssuesWithHttpInfo($q, $accessToken, $page, $perPage, $repo, $language, $label, $state, $author, $assignee, $sort, $order);
        return $response;
    }

    /**
     * Operation getV5SearchIssuesWithHttpInfo
     *
     * 搜索 Issues
     *
     * @param  string $q 搜索关键字 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $repo 筛选指定仓库 (path, e.g. oschina/git-osc) 的 issues (optional)
     * @param  string $language 筛选指定语言的 issues (optional)
     * @param  string $label 筛选指定标签的 issues (optional)
     * @param  string $state 筛选指定状态的 issues, open(开启)、closed(完成)、rejected(拒绝) (optional)
     * @param  string $author 筛选指定创建者 (username/login) 的 issues (optional)
     * @param  string $assignee 筛选指定负责人 (username/login) 的 issues (optional)
     * @param  string $sort 排序字段，created_at(创建时间)、last_push_at(更新时间)、notes_count(评论数)，默认为最佳匹配 (optional)
     * @param  string $order 排序顺序: desc(default)、asc (optional, default to desc)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\Issue[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5SearchIssuesWithHttpInfo($q, $accessToken = null, $page = '1', $perPage = '20', $repo = null, $language = null, $label = null, $state = null, $author = null, $assignee = null, $sort = null, $order = 'desc')
    {
        $returnType = '\Gitee\Model\Issue[]';
        $request = $this->getV5SearchIssuesRequest($q, $accessToken, $page, $perPage, $repo, $language, $label, $state, $author, $assignee, $sort, $order);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\Issue[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5SearchIssuesAsync
     *
     * 搜索 Issues
     *
     * @param  string $q 搜索关键字 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $repo 筛选指定仓库 (path, e.g. oschina/git-osc) 的 issues (optional)
     * @param  string $language 筛选指定语言的 issues (optional)
     * @param  string $label 筛选指定标签的 issues (optional)
     * @param  string $state 筛选指定状态的 issues, open(开启)、closed(完成)、rejected(拒绝) (optional)
     * @param  string $author 筛选指定创建者 (username/login) 的 issues (optional)
     * @param  string $assignee 筛选指定负责人 (username/login) 的 issues (optional)
     * @param  string $sort 排序字段，created_at(创建时间)、last_push_at(更新时间)、notes_count(评论数)，默认为最佳匹配 (optional)
     * @param  string $order 排序顺序: desc(default)、asc (optional, default to desc)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5SearchIssuesAsync($q, $accessToken = null, $page = '1', $perPage = '20', $repo = null, $language = null, $label = null, $state = null, $author = null, $assignee = null, $sort = null, $order = 'desc')
    {
        return $this->getV5SearchIssuesAsyncWithHttpInfo($q, $accessToken, $page, $perPage, $repo, $language, $label, $state, $author, $assignee, $sort, $order)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5SearchIssuesAsyncWithHttpInfo
     *
     * 搜索 Issues
     *
     * @param  string $q 搜索关键字 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $repo 筛选指定仓库 (path, e.g. oschina/git-osc) 的 issues (optional)
     * @param  string $language 筛选指定语言的 issues (optional)
     * @param  string $label 筛选指定标签的 issues (optional)
     * @param  string $state 筛选指定状态的 issues, open(开启)、closed(完成)、rejected(拒绝) (optional)
     * @param  string $author 筛选指定创建者 (username/login) 的 issues (optional)
     * @param  string $assignee 筛选指定负责人 (username/login) 的 issues (optional)
     * @param  string $sort 排序字段，created_at(创建时间)、last_push_at(更新时间)、notes_count(评论数)，默认为最佳匹配 (optional)
     * @param  string $order 排序顺序: desc(default)、asc (optional, default to desc)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5SearchIssuesAsyncWithHttpInfo($q, $accessToken = null, $page = '1', $perPage = '20', $repo = null, $language = null, $label = null, $state = null, $author = null, $assignee = null, $sort = null, $order = 'desc')
    {
        $returnType = '\Gitee\Model\Issue[]';
        $request = $this->getV5SearchIssuesRequest($q, $accessToken, $page, $perPage, $repo, $language, $label, $state, $author, $assignee, $sort, $order);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5SearchIssues'
     *
     * @param  string $q 搜索关键字 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $repo 筛选指定仓库 (path, e.g. oschina/git-osc) 的 issues (optional)
     * @param  string $language 筛选指定语言的 issues (optional)
     * @param  string $label 筛选指定标签的 issues (optional)
     * @param  string $state 筛选指定状态的 issues, open(开启)、closed(完成)、rejected(拒绝) (optional)
     * @param  string $author 筛选指定创建者 (username/login) 的 issues (optional)
     * @param  string $assignee 筛选指定负责人 (username/login) 的 issues (optional)
     * @param  string $sort 排序字段，created_at(创建时间)、last_push_at(更新时间)、notes_count(评论数)，默认为最佳匹配 (optional)
     * @param  string $order 排序顺序: desc(default)、asc (optional, default to desc)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5SearchIssuesRequest($q, $accessToken = null, $page = '1', $perPage = '20', $repo = null, $language = null, $label = null, $state = null, $author = null, $assignee = null, $sort = null, $order = 'desc')
    {
        // verify the required parameter 'q' is set
        if ($q === null || (is_array($q) && count($q) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $q when calling getV5SearchIssues'
            );
        }
        if ($perPage !== null && $perPage > 100) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling SearchApi.getV5SearchIssues, must be smaller than or equal to 100.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling SearchApi.getV5SearchIssues, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v5/search/issues';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }
        // query params
        if ($repo !== null) {
            $queryParams['repo'] = ObjectSerializer::toQueryValue($repo);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }
        // query params
        if ($label !== null) {
            $queryParams['label'] = ObjectSerializer::toQueryValue($label);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state);
        }
        // query params
        if ($author !== null) {
            $queryParams['author'] = ObjectSerializer::toQueryValue($author);
        }
        // query params
        if ($assignee !== null) {
            $queryParams['assignee'] = ObjectSerializer::toQueryValue($assignee);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5SearchRepositories
     *
     * 搜索仓库
     *
     * @param  string $q 搜索关键字 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $owner 筛选指定空间地址(企业、组织或个人的地址 path) 的仓库 (optional)
     * @param  bool $fork 是否搜索含 fork 的仓库，默认：否 (optional)
     * @param  string $language 筛选指定语言的仓库 (optional)
     * @param  string $sort 排序字段，last_push_at(更新时间)、stars_count(收藏数)、forks_count(Fork 数)、watches_count(关注数)，默认为最佳匹配 (optional)
     * @param  string $order 排序顺序: desc(default)、asc (optional, default to desc)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\Project[]
     */
    public function getV5SearchRepositories($q, $accessToken = null, $page = '1', $perPage = '20', $owner = null, $fork = null, $language = null, $sort = null, $order = 'desc')
    {
        list($response) = $this->getV5SearchRepositoriesWithHttpInfo($q, $accessToken, $page, $perPage, $owner, $fork, $language, $sort, $order);
        return $response;
    }

    /**
     * Operation getV5SearchRepositoriesWithHttpInfo
     *
     * 搜索仓库
     *
     * @param  string $q 搜索关键字 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $owner 筛选指定空间地址(企业、组织或个人的地址 path) 的仓库 (optional)
     * @param  bool $fork 是否搜索含 fork 的仓库，默认：否 (optional)
     * @param  string $language 筛选指定语言的仓库 (optional)
     * @param  string $sort 排序字段，last_push_at(更新时间)、stars_count(收藏数)、forks_count(Fork 数)、watches_count(关注数)，默认为最佳匹配 (optional)
     * @param  string $order 排序顺序: desc(default)、asc (optional, default to desc)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\Project[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5SearchRepositoriesWithHttpInfo($q, $accessToken = null, $page = '1', $perPage = '20', $owner = null, $fork = null, $language = null, $sort = null, $order = 'desc')
    {
        $returnType = '\Gitee\Model\Project[]';
        $request = $this->getV5SearchRepositoriesRequest($q, $accessToken, $page, $perPage, $owner, $fork, $language, $sort, $order);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\Project[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5SearchRepositoriesAsync
     *
     * 搜索仓库
     *
     * @param  string $q 搜索关键字 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $owner 筛选指定空间地址(企业、组织或个人的地址 path) 的仓库 (optional)
     * @param  bool $fork 是否搜索含 fork 的仓库，默认：否 (optional)
     * @param  string $language 筛选指定语言的仓库 (optional)
     * @param  string $sort 排序字段，last_push_at(更新时间)、stars_count(收藏数)、forks_count(Fork 数)、watches_count(关注数)，默认为最佳匹配 (optional)
     * @param  string $order 排序顺序: desc(default)、asc (optional, default to desc)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5SearchRepositoriesAsync($q, $accessToken = null, $page = '1', $perPage = '20', $owner = null, $fork = null, $language = null, $sort = null, $order = 'desc')
    {
        return $this->getV5SearchRepositoriesAsyncWithHttpInfo($q, $accessToken, $page, $perPage, $owner, $fork, $language, $sort, $order)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5SearchRepositoriesAsyncWithHttpInfo
     *
     * 搜索仓库
     *
     * @param  string $q 搜索关键字 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $owner 筛选指定空间地址(企业、组织或个人的地址 path) 的仓库 (optional)
     * @param  bool $fork 是否搜索含 fork 的仓库，默认：否 (optional)
     * @param  string $language 筛选指定语言的仓库 (optional)
     * @param  string $sort 排序字段，last_push_at(更新时间)、stars_count(收藏数)、forks_count(Fork 数)、watches_count(关注数)，默认为最佳匹配 (optional)
     * @param  string $order 排序顺序: desc(default)、asc (optional, default to desc)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5SearchRepositoriesAsyncWithHttpInfo($q, $accessToken = null, $page = '1', $perPage = '20', $owner = null, $fork = null, $language = null, $sort = null, $order = 'desc')
    {
        $returnType = '\Gitee\Model\Project[]';
        $request = $this->getV5SearchRepositoriesRequest($q, $accessToken, $page, $perPage, $owner, $fork, $language, $sort, $order);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5SearchRepositories'
     *
     * @param  string $q 搜索关键字 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $owner 筛选指定空间地址(企业、组织或个人的地址 path) 的仓库 (optional)
     * @param  bool $fork 是否搜索含 fork 的仓库，默认：否 (optional)
     * @param  string $language 筛选指定语言的仓库 (optional)
     * @param  string $sort 排序字段，last_push_at(更新时间)、stars_count(收藏数)、forks_count(Fork 数)、watches_count(关注数)，默认为最佳匹配 (optional)
     * @param  string $order 排序顺序: desc(default)、asc (optional, default to desc)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5SearchRepositoriesRequest($q, $accessToken = null, $page = '1', $perPage = '20', $owner = null, $fork = null, $language = null, $sort = null, $order = 'desc')
    {
        // verify the required parameter 'q' is set
        if ($q === null || (is_array($q) && count($q) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $q when calling getV5SearchRepositories'
            );
        }
        if ($perPage !== null && $perPage > 100) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling SearchApi.getV5SearchRepositories, must be smaller than or equal to 100.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling SearchApi.getV5SearchRepositories, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v5/search/repositories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }
        // query params
        if ($owner !== null) {
            $queryParams['owner'] = ObjectSerializer::toQueryValue($owner);
        }
        // query params
        if ($fork !== null) {
            $queryParams['fork'] = ObjectSerializer::toQueryValue($fork);
        }
        // query params
        if ($language !== null) {
            $queryParams['language'] = ObjectSerializer::toQueryValue($language);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5SearchUsers
     *
     * 搜索用户
     *
     * @param  string $q 搜索关键字 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $sort 排序字段，joined_at(注册时间)，默认为最佳匹配 (optional)
     * @param  string $order 排序顺序: desc(default)、asc (optional, default to desc)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\User[]
     */
    public function getV5SearchUsers($q, $accessToken = null, $page = '1', $perPage = '20', $sort = null, $order = 'desc')
    {
        list($response) = $this->getV5SearchUsersWithHttpInfo($q, $accessToken, $page, $perPage, $sort, $order);
        return $response;
    }

    /**
     * Operation getV5SearchUsersWithHttpInfo
     *
     * 搜索用户
     *
     * @param  string $q 搜索关键字 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $sort 排序字段，joined_at(注册时间)，默认为最佳匹配 (optional)
     * @param  string $order 排序顺序: desc(default)、asc (optional, default to desc)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\User[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5SearchUsersWithHttpInfo($q, $accessToken = null, $page = '1', $perPage = '20', $sort = null, $order = 'desc')
    {
        $returnType = '\Gitee\Model\User[]';
        $request = $this->getV5SearchUsersRequest($q, $accessToken, $page, $perPage, $sort, $order);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\User[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5SearchUsersAsync
     *
     * 搜索用户
     *
     * @param  string $q 搜索关键字 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $sort 排序字段，joined_at(注册时间)，默认为最佳匹配 (optional)
     * @param  string $order 排序顺序: desc(default)、asc (optional, default to desc)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5SearchUsersAsync($q, $accessToken = null, $page = '1', $perPage = '20', $sort = null, $order = 'desc')
    {
        return $this->getV5SearchUsersAsyncWithHttpInfo($q, $accessToken, $page, $perPage, $sort, $order)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5SearchUsersAsyncWithHttpInfo
     *
     * 搜索用户
     *
     * @param  string $q 搜索关键字 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $sort 排序字段，joined_at(注册时间)，默认为最佳匹配 (optional)
     * @param  string $order 排序顺序: desc(default)、asc (optional, default to desc)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5SearchUsersAsyncWithHttpInfo($q, $accessToken = null, $page = '1', $perPage = '20', $sort = null, $order = 'desc')
    {
        $returnType = '\Gitee\Model\User[]';
        $request = $this->getV5SearchUsersRequest($q, $accessToken, $page, $perPage, $sort, $order);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5SearchUsers'
     *
     * @param  string $q 搜索关键字 (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     * @param  string $sort 排序字段，joined_at(注册时间)，默认为最佳匹配 (optional)
     * @param  string $order 排序顺序: desc(default)、asc (optional, default to desc)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5SearchUsersRequest($q, $accessToken = null, $page = '1', $perPage = '20', $sort = null, $order = 'desc')
    {
        // verify the required parameter 'q' is set
        if ($q === null || (is_array($q) && count($q) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $q when calling getV5SearchUsers'
            );
        }
        if ($perPage !== null && $perPage > 100) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling SearchApi.getV5SearchUsers, must be smaller than or equal to 100.');
        }
        if ($perPage !== null && $perPage < 1) {
            throw new \InvalidArgumentException('invalid value for "$perPage" when calling SearchApi.getV5SearchUsers, must be bigger than or equal to 1.');
        }


        $resourcePath = '/v5/search/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($q !== null) {
            $queryParams['q'] = ObjectSerializer::toQueryValue($q);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }
        // query params
        if ($sort !== null) {
            $queryParams['sort'] = ObjectSerializer::toQueryValue($sort);
        }
        // query params
        if ($order !== null) {
            $queryParams['order'] = ObjectSerializer::toQueryValue($order);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
