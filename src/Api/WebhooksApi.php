<?php
/**
 * WebhooksApi
 * PHP version 5
 *
 * @category Class
 * @package  Gitee
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * Gitee SDK for PHP
 *
 * OpenAPI spec version: 5.4.73
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Gitee\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Gitee\ApiException;
use Gitee\Configuration;
use Gitee\HeaderSelector;
use Gitee\ObjectSerializer;

/**
 * WebhooksApi Class Doc Comment
 *
 * @category Class
 * @package  Gitee
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WebhooksApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteV5ReposOwnerRepoHooksId
     *
     * 删除一个仓库WebHook
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id Webhook的ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteV5ReposOwnerRepoHooksId($owner, $repo, $id, $accessToken = null)
    {
        $this->deleteV5ReposOwnerRepoHooksIdWithHttpInfo($owner, $repo, $id, $accessToken);
    }

    /**
     * Operation deleteV5ReposOwnerRepoHooksIdWithHttpInfo
     *
     * 删除一个仓库WebHook
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id Webhook的ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteV5ReposOwnerRepoHooksIdWithHttpInfo($owner, $repo, $id, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteV5ReposOwnerRepoHooksIdRequest($owner, $repo, $id, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteV5ReposOwnerRepoHooksIdAsync
     *
     * 删除一个仓库WebHook
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id Webhook的ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteV5ReposOwnerRepoHooksIdAsync($owner, $repo, $id, $accessToken = null)
    {
        return $this->deleteV5ReposOwnerRepoHooksIdAsyncWithHttpInfo($owner, $repo, $id, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteV5ReposOwnerRepoHooksIdAsyncWithHttpInfo
     *
     * 删除一个仓库WebHook
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id Webhook的ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteV5ReposOwnerRepoHooksIdAsyncWithHttpInfo($owner, $repo, $id, $accessToken = null)
    {
        $returnType = '';
        $request = $this->deleteV5ReposOwnerRepoHooksIdRequest($owner, $repo, $id, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteV5ReposOwnerRepoHooksId'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id Webhook的ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteV5ReposOwnerRepoHooksIdRequest($owner, $repo, $id, $accessToken = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling deleteV5ReposOwnerRepoHooksId'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling deleteV5ReposOwnerRepoHooksId'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteV5ReposOwnerRepoHooksId'
            );
        }

        $resourcePath = '/v5/repos/{owner}/{repo}/hooks/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5ReposOwnerRepoHooks
     *
     * 列出仓库的WebHooks
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\Hook[]
     */
    public function getV5ReposOwnerRepoHooks($owner, $repo, $accessToken = null, $page = '1', $perPage = '20')
    {
        list($response) = $this->getV5ReposOwnerRepoHooksWithHttpInfo($owner, $repo, $accessToken, $page, $perPage);
        return $response;
    }

    /**
     * Operation getV5ReposOwnerRepoHooksWithHttpInfo
     *
     * 列出仓库的WebHooks
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\Hook[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5ReposOwnerRepoHooksWithHttpInfo($owner, $repo, $accessToken = null, $page = '1', $perPage = '20')
    {
        $returnType = '\Gitee\Model\Hook[]';
        $request = $this->getV5ReposOwnerRepoHooksRequest($owner, $repo, $accessToken, $page, $perPage);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\Hook[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5ReposOwnerRepoHooksAsync
     *
     * 列出仓库的WebHooks
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoHooksAsync($owner, $repo, $accessToken = null, $page = '1', $perPage = '20')
    {
        return $this->getV5ReposOwnerRepoHooksAsyncWithHttpInfo($owner, $repo, $accessToken, $page, $perPage)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5ReposOwnerRepoHooksAsyncWithHttpInfo
     *
     * 列出仓库的WebHooks
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoHooksAsyncWithHttpInfo($owner, $repo, $accessToken = null, $page = '1', $perPage = '20')
    {
        $returnType = '\Gitee\Model\Hook[]';
        $request = $this->getV5ReposOwnerRepoHooksRequest($owner, $repo, $accessToken, $page, $perPage);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5ReposOwnerRepoHooks'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $page 当前的页码 (optional, default to 1)
     * @param  int $perPage 每页的数量，最大为 100 (optional, default to 20)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5ReposOwnerRepoHooksRequest($owner, $repo, $accessToken = null, $page = '1', $perPage = '20')
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling getV5ReposOwnerRepoHooks'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling getV5ReposOwnerRepoHooks'
            );
        }

        $resourcePath = '/v5/repos/{owner}/{repo}/hooks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($perPage !== null) {
            $queryParams['per_page'] = ObjectSerializer::toQueryValue($perPage);
        }

        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getV5ReposOwnerRepoHooksId
     *
     * 获取仓库单个WebHook
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id Webhook的ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\Hook
     */
    public function getV5ReposOwnerRepoHooksId($owner, $repo, $id, $accessToken = null)
    {
        list($response) = $this->getV5ReposOwnerRepoHooksIdWithHttpInfo($owner, $repo, $id, $accessToken);
        return $response;
    }

    /**
     * Operation getV5ReposOwnerRepoHooksIdWithHttpInfo
     *
     * 获取仓库单个WebHook
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id Webhook的ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\Hook, HTTP status code, HTTP response headers (array of strings)
     */
    public function getV5ReposOwnerRepoHooksIdWithHttpInfo($owner, $repo, $id, $accessToken = null)
    {
        $returnType = '\Gitee\Model\Hook';
        $request = $this->getV5ReposOwnerRepoHooksIdRequest($owner, $repo, $id, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\Hook',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getV5ReposOwnerRepoHooksIdAsync
     *
     * 获取仓库单个WebHook
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id Webhook的ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoHooksIdAsync($owner, $repo, $id, $accessToken = null)
    {
        return $this->getV5ReposOwnerRepoHooksIdAsyncWithHttpInfo($owner, $repo, $id, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getV5ReposOwnerRepoHooksIdAsyncWithHttpInfo
     *
     * 获取仓库单个WebHook
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id Webhook的ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getV5ReposOwnerRepoHooksIdAsyncWithHttpInfo($owner, $repo, $id, $accessToken = null)
    {
        $returnType = '\Gitee\Model\Hook';
        $request = $this->getV5ReposOwnerRepoHooksIdRequest($owner, $repo, $id, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getV5ReposOwnerRepoHooksId'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id Webhook的ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getV5ReposOwnerRepoHooksIdRequest($owner, $repo, $id, $accessToken = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling getV5ReposOwnerRepoHooksId'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling getV5ReposOwnerRepoHooksId'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getV5ReposOwnerRepoHooksId'
            );
        }

        $resourcePath = '/v5/repos/{owner}/{repo}/hooks/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($accessToken !== null) {
            $queryParams['access_token'] = ObjectSerializer::toQueryValue($accessToken);
        }

        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation patchV5ReposOwnerRepoHooksId
     *
     * 更新一个仓库WebHook
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id Webhook的ID (required)
     * @param  string $url 远程HTTP URL (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $encryptionType 加密类型: 0: 密码, 1: 签名密钥 (optional)
     * @param  string $password 请求URL时会带上该密码，防止URL被恶意请求 (optional)
     * @param  bool $pushEvents Push代码到仓库 (optional, default to true)
     * @param  bool $tagPushEvents 提交Tag到仓库 (optional)
     * @param  bool $issuesEvents 创建/关闭Issue (optional)
     * @param  bool $noteEvents 评论了Issue/代码等等 (optional)
     * @param  bool $mergeRequestsEvents 合并请求和合并后 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\Hook
     */
    public function patchV5ReposOwnerRepoHooksId($owner, $repo, $id, $url, $accessToken = null, $encryptionType = null, $password = null, $pushEvents = 'true', $tagPushEvents = null, $issuesEvents = null, $noteEvents = null, $mergeRequestsEvents = null)
    {
        list($response) = $this->patchV5ReposOwnerRepoHooksIdWithHttpInfo($owner, $repo, $id, $url, $accessToken, $encryptionType, $password, $pushEvents, $tagPushEvents, $issuesEvents, $noteEvents, $mergeRequestsEvents);
        return $response;
    }

    /**
     * Operation patchV5ReposOwnerRepoHooksIdWithHttpInfo
     *
     * 更新一个仓库WebHook
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id Webhook的ID (required)
     * @param  string $url 远程HTTP URL (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $encryptionType 加密类型: 0: 密码, 1: 签名密钥 (optional)
     * @param  string $password 请求URL时会带上该密码，防止URL被恶意请求 (optional)
     * @param  bool $pushEvents Push代码到仓库 (optional, default to true)
     * @param  bool $tagPushEvents 提交Tag到仓库 (optional)
     * @param  bool $issuesEvents 创建/关闭Issue (optional)
     * @param  bool $noteEvents 评论了Issue/代码等等 (optional)
     * @param  bool $mergeRequestsEvents 合并请求和合并后 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\Hook, HTTP status code, HTTP response headers (array of strings)
     */
    public function patchV5ReposOwnerRepoHooksIdWithHttpInfo($owner, $repo, $id, $url, $accessToken = null, $encryptionType = null, $password = null, $pushEvents = 'true', $tagPushEvents = null, $issuesEvents = null, $noteEvents = null, $mergeRequestsEvents = null)
    {
        $returnType = '\Gitee\Model\Hook';
        $request = $this->patchV5ReposOwnerRepoHooksIdRequest($owner, $repo, $id, $url, $accessToken, $encryptionType, $password, $pushEvents, $tagPushEvents, $issuesEvents, $noteEvents, $mergeRequestsEvents);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\Hook',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation patchV5ReposOwnerRepoHooksIdAsync
     *
     * 更新一个仓库WebHook
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id Webhook的ID (required)
     * @param  string $url 远程HTTP URL (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $encryptionType 加密类型: 0: 密码, 1: 签名密钥 (optional)
     * @param  string $password 请求URL时会带上该密码，防止URL被恶意请求 (optional)
     * @param  bool $pushEvents Push代码到仓库 (optional, default to true)
     * @param  bool $tagPushEvents 提交Tag到仓库 (optional)
     * @param  bool $issuesEvents 创建/关闭Issue (optional)
     * @param  bool $noteEvents 评论了Issue/代码等等 (optional)
     * @param  bool $mergeRequestsEvents 合并请求和合并后 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchV5ReposOwnerRepoHooksIdAsync($owner, $repo, $id, $url, $accessToken = null, $encryptionType = null, $password = null, $pushEvents = 'true', $tagPushEvents = null, $issuesEvents = null, $noteEvents = null, $mergeRequestsEvents = null)
    {
        return $this->patchV5ReposOwnerRepoHooksIdAsyncWithHttpInfo($owner, $repo, $id, $url, $accessToken, $encryptionType, $password, $pushEvents, $tagPushEvents, $issuesEvents, $noteEvents, $mergeRequestsEvents)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation patchV5ReposOwnerRepoHooksIdAsyncWithHttpInfo
     *
     * 更新一个仓库WebHook
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id Webhook的ID (required)
     * @param  string $url 远程HTTP URL (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $encryptionType 加密类型: 0: 密码, 1: 签名密钥 (optional)
     * @param  string $password 请求URL时会带上该密码，防止URL被恶意请求 (optional)
     * @param  bool $pushEvents Push代码到仓库 (optional, default to true)
     * @param  bool $tagPushEvents 提交Tag到仓库 (optional)
     * @param  bool $issuesEvents 创建/关闭Issue (optional)
     * @param  bool $noteEvents 评论了Issue/代码等等 (optional)
     * @param  bool $mergeRequestsEvents 合并请求和合并后 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function patchV5ReposOwnerRepoHooksIdAsyncWithHttpInfo($owner, $repo, $id, $url, $accessToken = null, $encryptionType = null, $password = null, $pushEvents = 'true', $tagPushEvents = null, $issuesEvents = null, $noteEvents = null, $mergeRequestsEvents = null)
    {
        $returnType = '\Gitee\Model\Hook';
        $request = $this->patchV5ReposOwnerRepoHooksIdRequest($owner, $repo, $id, $url, $accessToken, $encryptionType, $password, $pushEvents, $tagPushEvents, $issuesEvents, $noteEvents, $mergeRequestsEvents);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'patchV5ReposOwnerRepoHooksId'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id Webhook的ID (required)
     * @param  string $url 远程HTTP URL (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $encryptionType 加密类型: 0: 密码, 1: 签名密钥 (optional)
     * @param  string $password 请求URL时会带上该密码，防止URL被恶意请求 (optional)
     * @param  bool $pushEvents Push代码到仓库 (optional, default to true)
     * @param  bool $tagPushEvents 提交Tag到仓库 (optional)
     * @param  bool $issuesEvents 创建/关闭Issue (optional)
     * @param  bool $noteEvents 评论了Issue/代码等等 (optional)
     * @param  bool $mergeRequestsEvents 合并请求和合并后 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function patchV5ReposOwnerRepoHooksIdRequest($owner, $repo, $id, $url, $accessToken = null, $encryptionType = null, $password = null, $pushEvents = 'true', $tagPushEvents = null, $issuesEvents = null, $noteEvents = null, $mergeRequestsEvents = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling patchV5ReposOwnerRepoHooksId'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling patchV5ReposOwnerRepoHooksId'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling patchV5ReposOwnerRepoHooksId'
            );
        }
        // verify the required parameter 'url' is set
        if ($url === null || (is_array($url) && count($url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $url when calling patchV5ReposOwnerRepoHooksId'
            );
        }

        $resourcePath = '/v5/repos/{owner}/{repo}/hooks/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($url !== null) {
            $formParams['url'] = ObjectSerializer::toFormValue($url);
        }
        // form params
        if ($encryptionType !== null) {
            $formParams['encryption_type'] = ObjectSerializer::toFormValue($encryptionType);
        }
        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // form params
        if ($pushEvents !== null) {
            $formParams['push_events'] = ObjectSerializer::toFormValue($pushEvents);
        }
        // form params
        if ($tagPushEvents !== null) {
            $formParams['tag_push_events'] = ObjectSerializer::toFormValue($tagPushEvents);
        }
        // form params
        if ($issuesEvents !== null) {
            $formParams['issues_events'] = ObjectSerializer::toFormValue($issuesEvents);
        }
        // form params
        if ($noteEvents !== null) {
            $formParams['note_events'] = ObjectSerializer::toFormValue($noteEvents);
        }
        // form params
        if ($mergeRequestsEvents !== null) {
            $formParams['merge_requests_events'] = ObjectSerializer::toFormValue($mergeRequestsEvents);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postV5ReposOwnerRepoHooks
     *
     * 创建一个仓库WebHook
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $url 远程HTTP URL (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $encryptionType 加密类型: 0: 密码, 1: 签名密钥 (optional)
     * @param  string $password 请求URL时会带上该密码，防止URL被恶意请求 (optional)
     * @param  bool $pushEvents Push代码到仓库 (optional, default to true)
     * @param  bool $tagPushEvents 提交Tag到仓库 (optional)
     * @param  bool $issuesEvents 创建/关闭Issue (optional)
     * @param  bool $noteEvents 评论了Issue/代码等等 (optional)
     * @param  bool $mergeRequestsEvents 合并请求和合并后 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Gitee\Model\Hook
     */
    public function postV5ReposOwnerRepoHooks($owner, $repo, $url, $accessToken = null, $encryptionType = null, $password = null, $pushEvents = 'true', $tagPushEvents = null, $issuesEvents = null, $noteEvents = null, $mergeRequestsEvents = null)
    {
        list($response) = $this->postV5ReposOwnerRepoHooksWithHttpInfo($owner, $repo, $url, $accessToken, $encryptionType, $password, $pushEvents, $tagPushEvents, $issuesEvents, $noteEvents, $mergeRequestsEvents);
        return $response;
    }

    /**
     * Operation postV5ReposOwnerRepoHooksWithHttpInfo
     *
     * 创建一个仓库WebHook
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $url 远程HTTP URL (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $encryptionType 加密类型: 0: 密码, 1: 签名密钥 (optional)
     * @param  string $password 请求URL时会带上该密码，防止URL被恶意请求 (optional)
     * @param  bool $pushEvents Push代码到仓库 (optional, default to true)
     * @param  bool $tagPushEvents 提交Tag到仓库 (optional)
     * @param  bool $issuesEvents 创建/关闭Issue (optional)
     * @param  bool $noteEvents 评论了Issue/代码等等 (optional)
     * @param  bool $mergeRequestsEvents 合并请求和合并后 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Gitee\Model\Hook, HTTP status code, HTTP response headers (array of strings)
     */
    public function postV5ReposOwnerRepoHooksWithHttpInfo($owner, $repo, $url, $accessToken = null, $encryptionType = null, $password = null, $pushEvents = 'true', $tagPushEvents = null, $issuesEvents = null, $noteEvents = null, $mergeRequestsEvents = null)
    {
        $returnType = '\Gitee\Model\Hook';
        $request = $this->postV5ReposOwnerRepoHooksRequest($owner, $repo, $url, $accessToken, $encryptionType, $password, $pushEvents, $tagPushEvents, $issuesEvents, $noteEvents, $mergeRequestsEvents);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Gitee\Model\Hook',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postV5ReposOwnerRepoHooksAsync
     *
     * 创建一个仓库WebHook
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $url 远程HTTP URL (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $encryptionType 加密类型: 0: 密码, 1: 签名密钥 (optional)
     * @param  string $password 请求URL时会带上该密码，防止URL被恶意请求 (optional)
     * @param  bool $pushEvents Push代码到仓库 (optional, default to true)
     * @param  bool $tagPushEvents 提交Tag到仓库 (optional)
     * @param  bool $issuesEvents 创建/关闭Issue (optional)
     * @param  bool $noteEvents 评论了Issue/代码等等 (optional)
     * @param  bool $mergeRequestsEvents 合并请求和合并后 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV5ReposOwnerRepoHooksAsync($owner, $repo, $url, $accessToken = null, $encryptionType = null, $password = null, $pushEvents = 'true', $tagPushEvents = null, $issuesEvents = null, $noteEvents = null, $mergeRequestsEvents = null)
    {
        return $this->postV5ReposOwnerRepoHooksAsyncWithHttpInfo($owner, $repo, $url, $accessToken, $encryptionType, $password, $pushEvents, $tagPushEvents, $issuesEvents, $noteEvents, $mergeRequestsEvents)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postV5ReposOwnerRepoHooksAsyncWithHttpInfo
     *
     * 创建一个仓库WebHook
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $url 远程HTTP URL (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $encryptionType 加密类型: 0: 密码, 1: 签名密钥 (optional)
     * @param  string $password 请求URL时会带上该密码，防止URL被恶意请求 (optional)
     * @param  bool $pushEvents Push代码到仓库 (optional, default to true)
     * @param  bool $tagPushEvents 提交Tag到仓库 (optional)
     * @param  bool $issuesEvents 创建/关闭Issue (optional)
     * @param  bool $noteEvents 评论了Issue/代码等等 (optional)
     * @param  bool $mergeRequestsEvents 合并请求和合并后 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV5ReposOwnerRepoHooksAsyncWithHttpInfo($owner, $repo, $url, $accessToken = null, $encryptionType = null, $password = null, $pushEvents = 'true', $tagPushEvents = null, $issuesEvents = null, $noteEvents = null, $mergeRequestsEvents = null)
    {
        $returnType = '\Gitee\Model\Hook';
        $request = $this->postV5ReposOwnerRepoHooksRequest($owner, $repo, $url, $accessToken, $encryptionType, $password, $pushEvents, $tagPushEvents, $issuesEvents, $noteEvents, $mergeRequestsEvents);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postV5ReposOwnerRepoHooks'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  string $url 远程HTTP URL (required)
     * @param  string $accessToken 用户授权码 (optional)
     * @param  int $encryptionType 加密类型: 0: 密码, 1: 签名密钥 (optional)
     * @param  string $password 请求URL时会带上该密码，防止URL被恶意请求 (optional)
     * @param  bool $pushEvents Push代码到仓库 (optional, default to true)
     * @param  bool $tagPushEvents 提交Tag到仓库 (optional)
     * @param  bool $issuesEvents 创建/关闭Issue (optional)
     * @param  bool $noteEvents 评论了Issue/代码等等 (optional)
     * @param  bool $mergeRequestsEvents 合并请求和合并后 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postV5ReposOwnerRepoHooksRequest($owner, $repo, $url, $accessToken = null, $encryptionType = null, $password = null, $pushEvents = 'true', $tagPushEvents = null, $issuesEvents = null, $noteEvents = null, $mergeRequestsEvents = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling postV5ReposOwnerRepoHooks'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling postV5ReposOwnerRepoHooks'
            );
        }
        // verify the required parameter 'url' is set
        if ($url === null || (is_array($url) && count($url) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $url when calling postV5ReposOwnerRepoHooks'
            );
        }

        $resourcePath = '/v5/repos/{owner}/{repo}/hooks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // form params
        if ($url !== null) {
            $formParams['url'] = ObjectSerializer::toFormValue($url);
        }
        // form params
        if ($encryptionType !== null) {
            $formParams['encryption_type'] = ObjectSerializer::toFormValue($encryptionType);
        }
        // form params
        if ($password !== null) {
            $formParams['password'] = ObjectSerializer::toFormValue($password);
        }
        // form params
        if ($pushEvents !== null) {
            $formParams['push_events'] = ObjectSerializer::toFormValue($pushEvents);
        }
        // form params
        if ($tagPushEvents !== null) {
            $formParams['tag_push_events'] = ObjectSerializer::toFormValue($tagPushEvents);
        }
        // form params
        if ($issuesEvents !== null) {
            $formParams['issues_events'] = ObjectSerializer::toFormValue($issuesEvents);
        }
        // form params
        if ($noteEvents !== null) {
            $formParams['note_events'] = ObjectSerializer::toFormValue($noteEvents);
        }
        // form params
        if ($mergeRequestsEvents !== null) {
            $formParams['merge_requests_events'] = ObjectSerializer::toFormValue($mergeRequestsEvents);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postV5ReposOwnerRepoHooksIdTests
     *
     * 测试WebHook是否发送成功
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id Webhook的ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function postV5ReposOwnerRepoHooksIdTests($owner, $repo, $id, $accessToken = null)
    {
        $this->postV5ReposOwnerRepoHooksIdTestsWithHttpInfo($owner, $repo, $id, $accessToken);
    }

    /**
     * Operation postV5ReposOwnerRepoHooksIdTestsWithHttpInfo
     *
     * 测试WebHook是否发送成功
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id Webhook的ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \Gitee\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postV5ReposOwnerRepoHooksIdTestsWithHttpInfo($owner, $repo, $id, $accessToken = null)
    {
        $returnType = '';
        $request = $this->postV5ReposOwnerRepoHooksIdTestsRequest($owner, $repo, $id, $accessToken);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation postV5ReposOwnerRepoHooksIdTestsAsync
     *
     * 测试WebHook是否发送成功
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id Webhook的ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV5ReposOwnerRepoHooksIdTestsAsync($owner, $repo, $id, $accessToken = null)
    {
        return $this->postV5ReposOwnerRepoHooksIdTestsAsyncWithHttpInfo($owner, $repo, $id, $accessToken)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postV5ReposOwnerRepoHooksIdTestsAsyncWithHttpInfo
     *
     * 测试WebHook是否发送成功
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id Webhook的ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postV5ReposOwnerRepoHooksIdTestsAsyncWithHttpInfo($owner, $repo, $id, $accessToken = null)
    {
        $returnType = '';
        $request = $this->postV5ReposOwnerRepoHooksIdTestsRequest($owner, $repo, $id, $accessToken);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postV5ReposOwnerRepoHooksIdTests'
     *
     * @param  string $owner 仓库所属空间地址(企业、组织或个人的地址path) (required)
     * @param  string $repo 仓库路径(path) (required)
     * @param  int $id Webhook的ID (required)
     * @param  string $accessToken 用户授权码 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function postV5ReposOwnerRepoHooksIdTestsRequest($owner, $repo, $id, $accessToken = null)
    {
        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling postV5ReposOwnerRepoHooksIdTests'
            );
        }
        // verify the required parameter 'repo' is set
        if ($repo === null || (is_array($repo) && count($repo) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $repo when calling postV5ReposOwnerRepoHooksIdTests'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling postV5ReposOwnerRepoHooksIdTests'
            );
        }

        $resourcePath = '/v5/repos/{owner}/{repo}/hooks/{id}/tests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($repo !== null) {
            $resourcePath = str_replace(
                '{' . 'repo' . '}',
                ObjectSerializer::toPathValue($repo),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($accessToken !== null) {
            $formParams['access_token'] = ObjectSerializer::toFormValue($accessToken);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
