<?php
/**
 * Compare
 *
 * PHP version 5
 *
 * @category Class
 * @package  Gitee
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * Gitee SDK for PHP
 *
 * OpenAPI spec version: 5.4.85
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.42
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Gitee\Model;

use \ArrayAccess;
use \Gitee\ObjectSerializer;

/**
 * Compare Class Doc Comment
 *
 * @category Class
 * @description Commits 对比  返回的 commits 数量限制在 100 以内
 * @package  Gitee
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Compare implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Compare';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'baseCommit' => '\Gitee\Model\RepoCommit',
        'mergeBaseCommit' => '\Gitee\Model\RepoCommit',
        'commits' => '\Gitee\Model\RepoCommit[]',
        'files' => '\Gitee\Model\DiffFile[]',
        'truncated' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'baseCommit' => null,
        'mergeBaseCommit' => null,
        'commits' => null,
        'files' => null,
        'truncated' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'baseCommit' => 'base_commit',
        'mergeBaseCommit' => 'merge_base_commit',
        'commits' => 'commits',
        'files' => 'files',
        'truncated' => 'truncated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'baseCommit' => 'setBaseCommit',
        'mergeBaseCommit' => 'setMergeBaseCommit',
        'commits' => 'setCommits',
        'files' => 'setFiles',
        'truncated' => 'setTruncated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'baseCommit' => 'getBaseCommit',
        'mergeBaseCommit' => 'getMergeBaseCommit',
        'commits' => 'getCommits',
        'files' => 'getFiles',
        'truncated' => 'getTruncated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['baseCommit'] = isset($data['baseCommit']) ? $data['baseCommit'] : null;
        $this->container['mergeBaseCommit'] = isset($data['mergeBaseCommit']) ? $data['mergeBaseCommit'] : null;
        $this->container['commits'] = isset($data['commits']) ? $data['commits'] : null;
        $this->container['files'] = isset($data['files']) ? $data['files'] : null;
        $this->container['truncated'] = isset($data['truncated']) ? $data['truncated'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets baseCommit
     *
     * @return \Gitee\Model\RepoCommit
     */
    public function getBaseCommit()
    {
        return $this->container['baseCommit'];
    }

    /**
     * Sets baseCommit
     *
     * @param \Gitee\Model\RepoCommit $baseCommit baseCommit
     *
     * @return $this
     */
    public function setBaseCommit($baseCommit)
    {
        $this->container['baseCommit'] = $baseCommit;

        return $this;
    }

    /**
     * Gets mergeBaseCommit
     *
     * @return \Gitee\Model\RepoCommit
     */
    public function getMergeBaseCommit()
    {
        return $this->container['mergeBaseCommit'];
    }

    /**
     * Sets mergeBaseCommit
     *
     * @param \Gitee\Model\RepoCommit $mergeBaseCommit mergeBaseCommit
     *
     * @return $this
     */
    public function setMergeBaseCommit($mergeBaseCommit)
    {
        $this->container['mergeBaseCommit'] = $mergeBaseCommit;

        return $this;
    }

    /**
     * Gets commits
     *
     * @return \Gitee\Model\RepoCommit[]
     */
    public function getCommits()
    {
        return $this->container['commits'];
    }

    /**
     * Sets commits
     *
     * @param \Gitee\Model\RepoCommit[] $commits commits 数量限制在 100 以内
     *
     * @return $this
     */
    public function setCommits($commits)
    {
        $this->container['commits'] = $commits;

        return $this;
    }

    /**
     * Gets files
     *
     * @return \Gitee\Model\DiffFile[]
     */
    public function getFiles()
    {
        return $this->container['files'];
    }

    /**
     * Sets files
     *
     * @param \Gitee\Model\DiffFile[] $files 文件列表
     *
     * @return $this
     */
    public function setFiles($files)
    {
        $this->container['files'] = $files;

        return $this;
    }

    /**
     * Gets truncated
     *
     * @return bool
     */
    public function getTruncated()
    {
        return $this->container['truncated'];
    }

    /**
     * Sets truncated
     *
     * @param bool $truncated 文件列表是否被截断
     *
     * @return $this
     */
    public function setTruncated($truncated)
    {
        $this->container['truncated'] = $truncated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


