<?php
/**
 * DiffFile
 *
 * PHP version 5
 *
 * @category Class
 * @package  Gitee
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * Gitee SDK for PHP
 *
 * OpenAPI spec version: 5.4.85
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.42
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Gitee\Model;

use \ArrayAccess;
use \Gitee\ObjectSerializer;

/**
 * DiffFile Class Doc Comment
 *
 * @category Class
 * @package  Gitee
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DiffFile implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DiffFile';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sha' => 'string',
        'filename' => 'string',
        'status' => 'string',
        'additions' => 'int',
        'deletions' => 'int',
        'changes' => 'int',
        'blobUrl' => 'string',
        'rawUrl' => 'string',
        'contentUrl' => 'string',
        'patch' => 'string',
        'truncated' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sha' => null,
        'filename' => null,
        'status' => null,
        'additions' => 'int32',
        'deletions' => 'int32',
        'changes' => 'int32',
        'blobUrl' => null,
        'rawUrl' => null,
        'contentUrl' => null,
        'patch' => null,
        'truncated' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sha' => 'sha',
        'filename' => 'filename',
        'status' => 'status',
        'additions' => 'additions',
        'deletions' => 'deletions',
        'changes' => 'changes',
        'blobUrl' => 'blob_url',
        'rawUrl' => 'raw_url',
        'contentUrl' => 'content_url',
        'patch' => 'patch',
        'truncated' => 'truncated'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sha' => 'setSha',
        'filename' => 'setFilename',
        'status' => 'setStatus',
        'additions' => 'setAdditions',
        'deletions' => 'setDeletions',
        'changes' => 'setChanges',
        'blobUrl' => 'setBlobUrl',
        'rawUrl' => 'setRawUrl',
        'contentUrl' => 'setContentUrl',
        'patch' => 'setPatch',
        'truncated' => 'setTruncated'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sha' => 'getSha',
        'filename' => 'getFilename',
        'status' => 'getStatus',
        'additions' => 'getAdditions',
        'deletions' => 'getDeletions',
        'changes' => 'getChanges',
        'blobUrl' => 'getBlobUrl',
        'rawUrl' => 'getRawUrl',
        'contentUrl' => 'getContentUrl',
        'patch' => 'getPatch',
        'truncated' => 'getTruncated'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sha'] = isset($data['sha']) ? $data['sha'] : null;
        $this->container['filename'] = isset($data['filename']) ? $data['filename'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['additions'] = isset($data['additions']) ? $data['additions'] : null;
        $this->container['deletions'] = isset($data['deletions']) ? $data['deletions'] : null;
        $this->container['changes'] = isset($data['changes']) ? $data['changes'] : null;
        $this->container['blobUrl'] = isset($data['blobUrl']) ? $data['blobUrl'] : null;
        $this->container['rawUrl'] = isset($data['rawUrl']) ? $data['rawUrl'] : null;
        $this->container['contentUrl'] = isset($data['contentUrl']) ? $data['contentUrl'] : null;
        $this->container['patch'] = isset($data['patch']) ? $data['patch'] : null;
        $this->container['truncated'] = isset($data['truncated']) ? $data['truncated'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sha
     *
     * @return string
     */
    public function getSha()
    {
        return $this->container['sha'];
    }

    /**
     * Sets sha
     *
     * @param string $sha sha
     *
     * @return $this
     */
    public function setSha($sha)
    {
        $this->container['sha'] = $sha;

        return $this;
    }

    /**
     * Gets filename
     *
     * @return string
     */
    public function getFilename()
    {
        return $this->container['filename'];
    }

    /**
     * Sets filename
     *
     * @param string $filename 文件路径
     *
     * @return $this
     */
    public function setFilename($filename)
    {
        $this->container['filename'] = $filename;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status 文件状态
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets additions
     *
     * @return int
     */
    public function getAdditions()
    {
        return $this->container['additions'];
    }

    /**
     * Sets additions
     *
     * @param int $additions 新增行数
     *
     * @return $this
     */
    public function setAdditions($additions)
    {
        $this->container['additions'] = $additions;

        return $this;
    }

    /**
     * Gets deletions
     *
     * @return int
     */
    public function getDeletions()
    {
        return $this->container['deletions'];
    }

    /**
     * Sets deletions
     *
     * @param int $deletions 删除行数
     *
     * @return $this
     */
    public function setDeletions($deletions)
    {
        $this->container['deletions'] = $deletions;

        return $this;
    }

    /**
     * Gets changes
     *
     * @return int
     */
    public function getChanges()
    {
        return $this->container['changes'];
    }

    /**
     * Sets changes
     *
     * @param int $changes 变更行数
     *
     * @return $this
     */
    public function setChanges($changes)
    {
        $this->container['changes'] = $changes;

        return $this;
    }

    /**
     * Gets blobUrl
     *
     * @return string
     */
    public function getBlobUrl()
    {
        return $this->container['blobUrl'];
    }

    /**
     * Sets blobUrl
     *
     * @param string $blobUrl blob 链接
     *
     * @return $this
     */
    public function setBlobUrl($blobUrl)
    {
        $this->container['blobUrl'] = $blobUrl;

        return $this;
    }

    /**
     * Gets rawUrl
     *
     * @return string
     */
    public function getRawUrl()
    {
        return $this->container['rawUrl'];
    }

    /**
     * Sets rawUrl
     *
     * @param string $rawUrl raw 链接
     *
     * @return $this
     */
    public function setRawUrl($rawUrl)
    {
        $this->container['rawUrl'] = $rawUrl;

        return $this;
    }

    /**
     * Gets contentUrl
     *
     * @return string
     */
    public function getContentUrl()
    {
        return $this->container['contentUrl'];
    }

    /**
     * Sets contentUrl
     *
     * @param string $contentUrl content 链接
     *
     * @return $this
     */
    public function setContentUrl($contentUrl)
    {
        $this->container['contentUrl'] = $contentUrl;

        return $this;
    }

    /**
     * Gets patch
     *
     * @return string
     */
    public function getPatch()
    {
        return $this->container['patch'];
    }

    /**
     * Sets patch
     *
     * @param string $patch patch
     *
     * @return $this
     */
    public function setPatch($patch)
    {
        $this->container['patch'] = $patch;

        return $this;
    }

    /**
     * Gets truncated
     *
     * @return bool
     */
    public function getTruncated()
    {
        return $this->container['truncated'];
    }

    /**
     * Sets truncated
     *
     * @param bool $truncated patch 内容是否被截断
     *
     * @return $this
     */
    public function setTruncated($truncated)
    {
        $this->container['truncated'] = $truncated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


