<?php
/**
 * GiteeMetrics
 *
 * PHP version 5
 *
 * @category Class
 * @package  Gitee
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * Gitee SDK for PHP
 *
 * OpenAPI spec version: 5.4.85
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.42
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Gitee\Model;

use \ArrayAccess;
use \Gitee\ObjectSerializer;

/**
 * GiteeMetrics Class Doc Comment
 *
 * @category Class
 * @description 获取 Gitee 指数
 * @package  Gitee
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GiteeMetrics implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GiteeMetrics';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'vitality' => 'int',
        'vitalityPercent' => 'float',
        'community' => 'int',
        'communityPercent' => 'float',
        'health' => 'int',
        'healthPercent' => 'float',
        'trend' => 'int',
        'trendPercent' => 'float',
        'influence' => 'int',
        'influencePercent' => 'float',
        'totalScore' => 'int',
        'createdAt' => '\DateTime',
        'repo' => '\Gitee\Model\ProjectBasic'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'vitality' => 'int32',
        'vitalityPercent' => 'float',
        'community' => 'int32',
        'communityPercent' => 'float',
        'health' => 'int32',
        'healthPercent' => 'float',
        'trend' => 'int32',
        'trendPercent' => 'float',
        'influence' => 'int32',
        'influencePercent' => 'float',
        'totalScore' => 'int32',
        'createdAt' => 'date-time',
        'repo' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vitality' => 'vitality',
        'vitalityPercent' => 'vitality_percent',
        'community' => 'community',
        'communityPercent' => 'community_percent',
        'health' => 'health',
        'healthPercent' => 'health_percent',
        'trend' => 'trend',
        'trendPercent' => 'trend_percent',
        'influence' => 'influence',
        'influencePercent' => 'influence_percent',
        'totalScore' => 'total_score',
        'createdAt' => 'created_at',
        'repo' => 'repo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vitality' => 'setVitality',
        'vitalityPercent' => 'setVitalityPercent',
        'community' => 'setCommunity',
        'communityPercent' => 'setCommunityPercent',
        'health' => 'setHealth',
        'healthPercent' => 'setHealthPercent',
        'trend' => 'setTrend',
        'trendPercent' => 'setTrendPercent',
        'influence' => 'setInfluence',
        'influencePercent' => 'setInfluencePercent',
        'totalScore' => 'setTotalScore',
        'createdAt' => 'setCreatedAt',
        'repo' => 'setRepo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vitality' => 'getVitality',
        'vitalityPercent' => 'getVitalityPercent',
        'community' => 'getCommunity',
        'communityPercent' => 'getCommunityPercent',
        'health' => 'getHealth',
        'healthPercent' => 'getHealthPercent',
        'trend' => 'getTrend',
        'trendPercent' => 'getTrendPercent',
        'influence' => 'getInfluence',
        'influencePercent' => 'getInfluencePercent',
        'totalScore' => 'getTotalScore',
        'createdAt' => 'getCreatedAt',
        'repo' => 'getRepo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['vitality'] = isset($data['vitality']) ? $data['vitality'] : null;
        $this->container['vitalityPercent'] = isset($data['vitalityPercent']) ? $data['vitalityPercent'] : null;
        $this->container['community'] = isset($data['community']) ? $data['community'] : null;
        $this->container['communityPercent'] = isset($data['communityPercent']) ? $data['communityPercent'] : null;
        $this->container['health'] = isset($data['health']) ? $data['health'] : null;
        $this->container['healthPercent'] = isset($data['healthPercent']) ? $data['healthPercent'] : null;
        $this->container['trend'] = isset($data['trend']) ? $data['trend'] : null;
        $this->container['trendPercent'] = isset($data['trendPercent']) ? $data['trendPercent'] : null;
        $this->container['influence'] = isset($data['influence']) ? $data['influence'] : null;
        $this->container['influencePercent'] = isset($data['influencePercent']) ? $data['influencePercent'] : null;
        $this->container['totalScore'] = isset($data['totalScore']) ? $data['totalScore'] : null;
        $this->container['createdAt'] = isset($data['createdAt']) ? $data['createdAt'] : null;
        $this->container['repo'] = isset($data['repo']) ? $data['repo'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vitality
     *
     * @return int
     */
    public function getVitality()
    {
        return $this->container['vitality'];
    }

    /**
     * Sets vitality
     *
     * @param int $vitality vitality
     *
     * @return $this
     */
    public function setVitality($vitality)
    {
        $this->container['vitality'] = $vitality;

        return $this;
    }

    /**
     * Gets vitalityPercent
     *
     * @return float
     */
    public function getVitalityPercent()
    {
        return $this->container['vitalityPercent'];
    }

    /**
     * Sets vitalityPercent
     *
     * @param float $vitalityPercent vitalityPercent
     *
     * @return $this
     */
    public function setVitalityPercent($vitalityPercent)
    {
        $this->container['vitalityPercent'] = $vitalityPercent;

        return $this;
    }

    /**
     * Gets community
     *
     * @return int
     */
    public function getCommunity()
    {
        return $this->container['community'];
    }

    /**
     * Sets community
     *
     * @param int $community community
     *
     * @return $this
     */
    public function setCommunity($community)
    {
        $this->container['community'] = $community;

        return $this;
    }

    /**
     * Gets communityPercent
     *
     * @return float
     */
    public function getCommunityPercent()
    {
        return $this->container['communityPercent'];
    }

    /**
     * Sets communityPercent
     *
     * @param float $communityPercent communityPercent
     *
     * @return $this
     */
    public function setCommunityPercent($communityPercent)
    {
        $this->container['communityPercent'] = $communityPercent;

        return $this;
    }

    /**
     * Gets health
     *
     * @return int
     */
    public function getHealth()
    {
        return $this->container['health'];
    }

    /**
     * Sets health
     *
     * @param int $health health
     *
     * @return $this
     */
    public function setHealth($health)
    {
        $this->container['health'] = $health;

        return $this;
    }

    /**
     * Gets healthPercent
     *
     * @return float
     */
    public function getHealthPercent()
    {
        return $this->container['healthPercent'];
    }

    /**
     * Sets healthPercent
     *
     * @param float $healthPercent healthPercent
     *
     * @return $this
     */
    public function setHealthPercent($healthPercent)
    {
        $this->container['healthPercent'] = $healthPercent;

        return $this;
    }

    /**
     * Gets trend
     *
     * @return int
     */
    public function getTrend()
    {
        return $this->container['trend'];
    }

    /**
     * Sets trend
     *
     * @param int $trend trend
     *
     * @return $this
     */
    public function setTrend($trend)
    {
        $this->container['trend'] = $trend;

        return $this;
    }

    /**
     * Gets trendPercent
     *
     * @return float
     */
    public function getTrendPercent()
    {
        return $this->container['trendPercent'];
    }

    /**
     * Sets trendPercent
     *
     * @param float $trendPercent trendPercent
     *
     * @return $this
     */
    public function setTrendPercent($trendPercent)
    {
        $this->container['trendPercent'] = $trendPercent;

        return $this;
    }

    /**
     * Gets influence
     *
     * @return int
     */
    public function getInfluence()
    {
        return $this->container['influence'];
    }

    /**
     * Sets influence
     *
     * @param int $influence influence
     *
     * @return $this
     */
    public function setInfluence($influence)
    {
        $this->container['influence'] = $influence;

        return $this;
    }

    /**
     * Gets influencePercent
     *
     * @return float
     */
    public function getInfluencePercent()
    {
        return $this->container['influencePercent'];
    }

    /**
     * Sets influencePercent
     *
     * @param float $influencePercent influencePercent
     *
     * @return $this
     */
    public function setInfluencePercent($influencePercent)
    {
        $this->container['influencePercent'] = $influencePercent;

        return $this;
    }

    /**
     * Gets totalScore
     *
     * @return int
     */
    public function getTotalScore()
    {
        return $this->container['totalScore'];
    }

    /**
     * Sets totalScore
     *
     * @param int $totalScore totalScore
     *
     * @return $this
     */
    public function setTotalScore($totalScore)
    {
        $this->container['totalScore'] = $totalScore;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime $createdAt createdAt
     *
     * @return $this
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets repo
     *
     * @return \Gitee\Model\ProjectBasic
     */
    public function getRepo()
    {
        return $this->container['repo'];
    }

    /**
     * Sets repo
     *
     * @param \Gitee\Model\ProjectBasic $repo repo
     *
     * @return $this
     */
    public function setRepo($repo)
    {
        $this->container['repo'] = $repo;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


