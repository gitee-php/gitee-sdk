<?php
/**
 * Hook
 *
 * PHP version 5
 *
 * @category Class
 * @package  Gitee
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * Gitee SDK for PHP
 *
 * OpenAPI spec version: 5.4.73
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Gitee\Model;

use \ArrayAccess;
use \Gitee\ObjectSerializer;

/**
 * Hook Class Doc Comment
 *
 * @category Class
 * @description 更新一个仓库WebHook
 * @package  Gitee
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Hook implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Hook';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'url' => 'string',
        'createdAt' => 'string',
        'password' => 'string',
        'projectId' => 'string',
        'result' => 'string',
        'resultCode' => 'string',
        'pushEvents' => 'string',
        'tagPushEvents' => 'string',
        'issuesEvents' => 'string',
        'noteEvents' => 'string',
        'mergeRequestsEvents' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'url' => null,
        'createdAt' => null,
        'password' => null,
        'projectId' => null,
        'result' => null,
        'resultCode' => null,
        'pushEvents' => null,
        'tagPushEvents' => null,
        'issuesEvents' => null,
        'noteEvents' => null,
        'mergeRequestsEvents' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'url' => 'url',
        'createdAt' => 'created_at',
        'password' => 'password',
        'projectId' => 'project_id',
        'result' => 'result',
        'resultCode' => 'result_code',
        'pushEvents' => 'push_events',
        'tagPushEvents' => 'tag_push_events',
        'issuesEvents' => 'issues_events',
        'noteEvents' => 'note_events',
        'mergeRequestsEvents' => 'merge_requests_events'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'url' => 'setUrl',
        'createdAt' => 'setCreatedAt',
        'password' => 'setPassword',
        'projectId' => 'setProjectId',
        'result' => 'setResult',
        'resultCode' => 'setResultCode',
        'pushEvents' => 'setPushEvents',
        'tagPushEvents' => 'setTagPushEvents',
        'issuesEvents' => 'setIssuesEvents',
        'noteEvents' => 'setNoteEvents',
        'mergeRequestsEvents' => 'setMergeRequestsEvents'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'url' => 'getUrl',
        'createdAt' => 'getCreatedAt',
        'password' => 'getPassword',
        'projectId' => 'getProjectId',
        'result' => 'getResult',
        'resultCode' => 'getResultCode',
        'pushEvents' => 'getPushEvents',
        'tagPushEvents' => 'getTagPushEvents',
        'issuesEvents' => 'getIssuesEvents',
        'noteEvents' => 'getNoteEvents',
        'mergeRequestsEvents' => 'getMergeRequestsEvents'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['createdAt'] = isset($data['createdAt']) ? $data['createdAt'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['projectId'] = isset($data['projectId']) ? $data['projectId'] : null;
        $this->container['result'] = isset($data['result']) ? $data['result'] : null;
        $this->container['resultCode'] = isset($data['resultCode']) ? $data['resultCode'] : null;
        $this->container['pushEvents'] = isset($data['pushEvents']) ? $data['pushEvents'] : null;
        $this->container['tagPushEvents'] = isset($data['tagPushEvents']) ? $data['tagPushEvents'] : null;
        $this->container['issuesEvents'] = isset($data['issuesEvents']) ? $data['issuesEvents'] : null;
        $this->container['noteEvents'] = isset($data['noteEvents']) ? $data['noteEvents'] : null;
        $this->container['mergeRequestsEvents'] = isset($data['mergeRequestsEvents']) ? $data['mergeRequestsEvents'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param string $createdAt createdAt
     *
     * @return $this
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password password
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets projectId
     *
     * @return string
     */
    public function getProjectId()
    {
        return $this->container['projectId'];
    }

    /**
     * Sets projectId
     *
     * @param string $projectId projectId
     *
     * @return $this
     */
    public function setProjectId($projectId)
    {
        $this->container['projectId'] = $projectId;

        return $this;
    }

    /**
     * Gets result
     *
     * @return string
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     *
     * @param string $result result
     *
     * @return $this
     */
    public function setResult($result)
    {
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets resultCode
     *
     * @return string
     */
    public function getResultCode()
    {
        return $this->container['resultCode'];
    }

    /**
     * Sets resultCode
     *
     * @param string $resultCode resultCode
     *
     * @return $this
     */
    public function setResultCode($resultCode)
    {
        $this->container['resultCode'] = $resultCode;

        return $this;
    }

    /**
     * Gets pushEvents
     *
     * @return string
     */
    public function getPushEvents()
    {
        return $this->container['pushEvents'];
    }

    /**
     * Sets pushEvents
     *
     * @param string $pushEvents pushEvents
     *
     * @return $this
     */
    public function setPushEvents($pushEvents)
    {
        $this->container['pushEvents'] = $pushEvents;

        return $this;
    }

    /**
     * Gets tagPushEvents
     *
     * @return string
     */
    public function getTagPushEvents()
    {
        return $this->container['tagPushEvents'];
    }

    /**
     * Sets tagPushEvents
     *
     * @param string $tagPushEvents tagPushEvents
     *
     * @return $this
     */
    public function setTagPushEvents($tagPushEvents)
    {
        $this->container['tagPushEvents'] = $tagPushEvents;

        return $this;
    }

    /**
     * Gets issuesEvents
     *
     * @return string
     */
    public function getIssuesEvents()
    {
        return $this->container['issuesEvents'];
    }

    /**
     * Sets issuesEvents
     *
     * @param string $issuesEvents issuesEvents
     *
     * @return $this
     */
    public function setIssuesEvents($issuesEvents)
    {
        $this->container['issuesEvents'] = $issuesEvents;

        return $this;
    }

    /**
     * Gets noteEvents
     *
     * @return string
     */
    public function getNoteEvents()
    {
        return $this->container['noteEvents'];
    }

    /**
     * Sets noteEvents
     *
     * @param string $noteEvents noteEvents
     *
     * @return $this
     */
    public function setNoteEvents($noteEvents)
    {
        $this->container['noteEvents'] = $noteEvents;

        return $this;
    }

    /**
     * Gets mergeRequestsEvents
     *
     * @return string
     */
    public function getMergeRequestsEvents()
    {
        return $this->container['mergeRequestsEvents'];
    }

    /**
     * Sets mergeRequestsEvents
     *
     * @param string $mergeRequestsEvents mergeRequestsEvents
     *
     * @return $this
     */
    public function setMergeRequestsEvents($mergeRequestsEvents)
    {
        $this->container['mergeRequestsEvents'] = $mergeRequestsEvents;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


