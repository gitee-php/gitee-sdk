<?php
/**
 * Issue
 *
 * PHP version 5
 *
 * @category Class
 * @package  Gitee
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * Gitee SDK for PHP
 *
 * OpenAPI spec version: 5.4.85
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.42
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Gitee\Model;

use \ArrayAccess;
use \Gitee\ObjectSerializer;

/**
 * Issue Class Doc Comment
 *
 * @category Class
 * @description 搜索 Issues
 * @package  Gitee
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Issue implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Issue';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'url' => 'string',
        'repositoryUrl' => 'string',
        'labelsUrl' => 'string',
        'commentsUrl' => 'string',
        'htmlUrl' => 'string',
        'parentUrl' => 'string',
        'number' => 'string',
        'parentId' => 'int',
        'depth' => 'int',
        'state' => 'string',
        'title' => 'string',
        'body' => 'string',
        'bodyHtml' => 'string',
        'user' => '\Gitee\Model\UserBasic',
        'labels' => '\Gitee\Model\Label[]',
        'assignee' => '\Gitee\Model\UserBasic',
        'collaborators' => '\Gitee\Model\UserBasic[]',
        'repository' => '\Gitee\Model\Project',
        'milestone' => '\Gitee\Model\Milestone',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime',
        'planStartedAt' => '\DateTime',
        'deadline' => '\DateTime',
        'finishedAt' => '\DateTime',
        'scheduledTime' => 'int',
        'comments' => 'int',
        'priority' => 'int',
        'issueTypeDetail' => '\Gitee\Model\IssueType',
        'program' => '\Gitee\Model\ProgramBasic',
        'securityHole' => 'bool',
        'issueStateDetail' => '\Gitee\Model\IssueState',
        'branch' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'url' => null,
        'repositoryUrl' => null,
        'labelsUrl' => null,
        'commentsUrl' => null,
        'htmlUrl' => null,
        'parentUrl' => null,
        'number' => null,
        'parentId' => 'int32',
        'depth' => 'int32',
        'state' => null,
        'title' => null,
        'body' => null,
        'bodyHtml' => null,
        'user' => null,
        'labels' => null,
        'assignee' => null,
        'collaborators' => null,
        'repository' => null,
        'milestone' => null,
        'createdAt' => 'date-time',
        'updatedAt' => 'date-time',
        'planStartedAt' => 'date-time',
        'deadline' => 'date-time',
        'finishedAt' => 'date-time',
        'scheduledTime' => 'int32',
        'comments' => 'int32',
        'priority' => 'int32',
        'issueTypeDetail' => null,
        'program' => null,
        'securityHole' => null,
        'issueStateDetail' => null,
        'branch' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'url' => 'url',
        'repositoryUrl' => 'repository_url',
        'labelsUrl' => 'labels_url',
        'commentsUrl' => 'comments_url',
        'htmlUrl' => 'html_url',
        'parentUrl' => 'parent_url',
        'number' => 'number',
        'parentId' => 'parent_id',
        'depth' => 'depth',
        'state' => 'state',
        'title' => 'title',
        'body' => 'body',
        'bodyHtml' => 'body_html',
        'user' => 'user',
        'labels' => 'labels',
        'assignee' => 'assignee',
        'collaborators' => 'collaborators',
        'repository' => 'repository',
        'milestone' => 'milestone',
        'createdAt' => 'created_at',
        'updatedAt' => 'updated_at',
        'planStartedAt' => 'plan_started_at',
        'deadline' => 'deadline',
        'finishedAt' => 'finished_at',
        'scheduledTime' => 'scheduled_time',
        'comments' => 'comments',
        'priority' => 'priority',
        'issueTypeDetail' => 'issue_type_detail',
        'program' => 'program',
        'securityHole' => 'security_hole',
        'issueStateDetail' => 'issue_state_detail',
        'branch' => 'branch'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'url' => 'setUrl',
        'repositoryUrl' => 'setRepositoryUrl',
        'labelsUrl' => 'setLabelsUrl',
        'commentsUrl' => 'setCommentsUrl',
        'htmlUrl' => 'setHtmlUrl',
        'parentUrl' => 'setParentUrl',
        'number' => 'setNumber',
        'parentId' => 'setParentId',
        'depth' => 'setDepth',
        'state' => 'setState',
        'title' => 'setTitle',
        'body' => 'setBody',
        'bodyHtml' => 'setBodyHtml',
        'user' => 'setUser',
        'labels' => 'setLabels',
        'assignee' => 'setAssignee',
        'collaborators' => 'setCollaborators',
        'repository' => 'setRepository',
        'milestone' => 'setMilestone',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
        'planStartedAt' => 'setPlanStartedAt',
        'deadline' => 'setDeadline',
        'finishedAt' => 'setFinishedAt',
        'scheduledTime' => 'setScheduledTime',
        'comments' => 'setComments',
        'priority' => 'setPriority',
        'issueTypeDetail' => 'setIssueTypeDetail',
        'program' => 'setProgram',
        'securityHole' => 'setSecurityHole',
        'issueStateDetail' => 'setIssueStateDetail',
        'branch' => 'setBranch'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'url' => 'getUrl',
        'repositoryUrl' => 'getRepositoryUrl',
        'labelsUrl' => 'getLabelsUrl',
        'commentsUrl' => 'getCommentsUrl',
        'htmlUrl' => 'getHtmlUrl',
        'parentUrl' => 'getParentUrl',
        'number' => 'getNumber',
        'parentId' => 'getParentId',
        'depth' => 'getDepth',
        'state' => 'getState',
        'title' => 'getTitle',
        'body' => 'getBody',
        'bodyHtml' => 'getBodyHtml',
        'user' => 'getUser',
        'labels' => 'getLabels',
        'assignee' => 'getAssignee',
        'collaborators' => 'getCollaborators',
        'repository' => 'getRepository',
        'milestone' => 'getMilestone',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
        'planStartedAt' => 'getPlanStartedAt',
        'deadline' => 'getDeadline',
        'finishedAt' => 'getFinishedAt',
        'scheduledTime' => 'getScheduledTime',
        'comments' => 'getComments',
        'priority' => 'getPriority',
        'issueTypeDetail' => 'getIssueTypeDetail',
        'program' => 'getProgram',
        'securityHole' => 'getSecurityHole',
        'issueStateDetail' => 'getIssueStateDetail',
        'branch' => 'getBranch'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['repositoryUrl'] = isset($data['repositoryUrl']) ? $data['repositoryUrl'] : null;
        $this->container['labelsUrl'] = isset($data['labelsUrl']) ? $data['labelsUrl'] : null;
        $this->container['commentsUrl'] = isset($data['commentsUrl']) ? $data['commentsUrl'] : null;
        $this->container['htmlUrl'] = isset($data['htmlUrl']) ? $data['htmlUrl'] : null;
        $this->container['parentUrl'] = isset($data['parentUrl']) ? $data['parentUrl'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['parentId'] = isset($data['parentId']) ? $data['parentId'] : null;
        $this->container['depth'] = isset($data['depth']) ? $data['depth'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['body'] = isset($data['body']) ? $data['body'] : null;
        $this->container['bodyHtml'] = isset($data['bodyHtml']) ? $data['bodyHtml'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['labels'] = isset($data['labels']) ? $data['labels'] : null;
        $this->container['assignee'] = isset($data['assignee']) ? $data['assignee'] : null;
        $this->container['collaborators'] = isset($data['collaborators']) ? $data['collaborators'] : null;
        $this->container['repository'] = isset($data['repository']) ? $data['repository'] : null;
        $this->container['milestone'] = isset($data['milestone']) ? $data['milestone'] : null;
        $this->container['createdAt'] = isset($data['createdAt']) ? $data['createdAt'] : null;
        $this->container['updatedAt'] = isset($data['updatedAt']) ? $data['updatedAt'] : null;
        $this->container['planStartedAt'] = isset($data['planStartedAt']) ? $data['planStartedAt'] : null;
        $this->container['deadline'] = isset($data['deadline']) ? $data['deadline'] : null;
        $this->container['finishedAt'] = isset($data['finishedAt']) ? $data['finishedAt'] : null;
        $this->container['scheduledTime'] = isset($data['scheduledTime']) ? $data['scheduledTime'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['priority'] = isset($data['priority']) ? $data['priority'] : null;
        $this->container['issueTypeDetail'] = isset($data['issueTypeDetail']) ? $data['issueTypeDetail'] : null;
        $this->container['program'] = isset($data['program']) ? $data['program'] : null;
        $this->container['securityHole'] = isset($data['securityHole']) ? $data['securityHole'] : null;
        $this->container['issueStateDetail'] = isset($data['issueStateDetail']) ? $data['issueStateDetail'] : null;
        $this->container['branch'] = isset($data['branch']) ? $data['branch'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets repositoryUrl
     *
     * @return string
     */
    public function getRepositoryUrl()
    {
        return $this->container['repositoryUrl'];
    }

    /**
     * Sets repositoryUrl
     *
     * @param string $repositoryUrl repositoryUrl
     *
     * @return $this
     */
    public function setRepositoryUrl($repositoryUrl)
    {
        $this->container['repositoryUrl'] = $repositoryUrl;

        return $this;
    }

    /**
     * Gets labelsUrl
     *
     * @return string
     */
    public function getLabelsUrl()
    {
        return $this->container['labelsUrl'];
    }

    /**
     * Sets labelsUrl
     *
     * @param string $labelsUrl labelsUrl
     *
     * @return $this
     */
    public function setLabelsUrl($labelsUrl)
    {
        $this->container['labelsUrl'] = $labelsUrl;

        return $this;
    }

    /**
     * Gets commentsUrl
     *
     * @return string
     */
    public function getCommentsUrl()
    {
        return $this->container['commentsUrl'];
    }

    /**
     * Sets commentsUrl
     *
     * @param string $commentsUrl commentsUrl
     *
     * @return $this
     */
    public function setCommentsUrl($commentsUrl)
    {
        $this->container['commentsUrl'] = $commentsUrl;

        return $this;
    }

    /**
     * Gets htmlUrl
     *
     * @return string
     */
    public function getHtmlUrl()
    {
        return $this->container['htmlUrl'];
    }

    /**
     * Sets htmlUrl
     *
     * @param string $htmlUrl htmlUrl
     *
     * @return $this
     */
    public function setHtmlUrl($htmlUrl)
    {
        $this->container['htmlUrl'] = $htmlUrl;

        return $this;
    }

    /**
     * Gets parentUrl
     *
     * @return string
     */
    public function getParentUrl()
    {
        return $this->container['parentUrl'];
    }

    /**
     * Sets parentUrl
     *
     * @param string $parentUrl parentUrl
     *
     * @return $this
     */
    public function setParentUrl($parentUrl)
    {
        $this->container['parentUrl'] = $parentUrl;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number 唯一标识
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets parentId
     *
     * @return int
     */
    public function getParentId()
    {
        return $this->container['parentId'];
    }

    /**
     * Sets parentId
     *
     * @param int $parentId 上级 id
     *
     * @return $this
     */
    public function setParentId($parentId)
    {
        $this->container['parentId'] = $parentId;

        return $this;
    }

    /**
     * Gets depth
     *
     * @return int
     */
    public function getDepth()
    {
        return $this->container['depth'];
    }

    /**
     * Sets depth
     *
     * @param int $depth 所在层级
     *
     * @return $this
     */
    public function setDepth($depth)
    {
        $this->container['depth'] = $depth;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state 状态
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title 标题
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string $body 描述
     *
     * @return $this
     */
    public function setBody($body)
    {
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets bodyHtml
     *
     * @return string
     */
    public function getBodyHtml()
    {
        return $this->container['bodyHtml'];
    }

    /**
     * Sets bodyHtml
     *
     * @param string $bodyHtml 描述 html 格式
     *
     * @return $this
     */
    public function setBodyHtml($bodyHtml)
    {
        $this->container['bodyHtml'] = $bodyHtml;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \Gitee\Model\UserBasic
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \Gitee\Model\UserBasic $user 作者
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return \Gitee\Model\Label[]
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param \Gitee\Model\Label[] $labels 标签
     *
     * @return $this
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets assignee
     *
     * @return \Gitee\Model\UserBasic
     */
    public function getAssignee()
    {
        return $this->container['assignee'];
    }

    /**
     * Sets assignee
     *
     * @param \Gitee\Model\UserBasic $assignee 负责人
     *
     * @return $this
     */
    public function setAssignee($assignee)
    {
        $this->container['assignee'] = $assignee;

        return $this;
    }

    /**
     * Gets collaborators
     *
     * @return \Gitee\Model\UserBasic[]
     */
    public function getCollaborators()
    {
        return $this->container['collaborators'];
    }

    /**
     * Sets collaborators
     *
     * @param \Gitee\Model\UserBasic[] $collaborators 协作者
     *
     * @return $this
     */
    public function setCollaborators($collaborators)
    {
        $this->container['collaborators'] = $collaborators;

        return $this;
    }

    /**
     * Gets repository
     *
     * @return \Gitee\Model\Project
     */
    public function getRepository()
    {
        return $this->container['repository'];
    }

    /**
     * Sets repository
     *
     * @param \Gitee\Model\Project $repository 关联的仓库
     *
     * @return $this
     */
    public function setRepository($repository)
    {
        $this->container['repository'] = $repository;

        return $this;
    }

    /**
     * Gets milestone
     *
     * @return \Gitee\Model\Milestone
     */
    public function getMilestone()
    {
        return $this->container['milestone'];
    }

    /**
     * Sets milestone
     *
     * @param \Gitee\Model\Milestone $milestone 关联的里程碑
     *
     * @return $this
     */
    public function setMilestone($milestone)
    {
        $this->container['milestone'] = $milestone;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime $createdAt 创建时间
     *
     * @return $this
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime $updatedAt 更新时间
     *
     * @return $this
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets planStartedAt
     *
     * @return \DateTime
     */
    public function getPlanStartedAt()
    {
        return $this->container['planStartedAt'];
    }

    /**
     * Sets planStartedAt
     *
     * @param \DateTime $planStartedAt 计划开始时间
     *
     * @return $this
     */
    public function setPlanStartedAt($planStartedAt)
    {
        $this->container['planStartedAt'] = $planStartedAt;

        return $this;
    }

    /**
     * Gets deadline
     *
     * @return \DateTime
     */
    public function getDeadline()
    {
        return $this->container['deadline'];
    }

    /**
     * Sets deadline
     *
     * @param \DateTime $deadline 结束时间
     *
     * @return $this
     */
    public function setDeadline($deadline)
    {
        $this->container['deadline'] = $deadline;

        return $this;
    }

    /**
     * Gets finishedAt
     *
     * @return \DateTime
     */
    public function getFinishedAt()
    {
        return $this->container['finishedAt'];
    }

    /**
     * Sets finishedAt
     *
     * @param \DateTime $finishedAt 完成时间
     *
     * @return $this
     */
    public function setFinishedAt($finishedAt)
    {
        $this->container['finishedAt'] = $finishedAt;

        return $this;
    }

    /**
     * Gets scheduledTime
     *
     * @return int
     */
    public function getScheduledTime()
    {
        return $this->container['scheduledTime'];
    }

    /**
     * Sets scheduledTime
     *
     * @param int $scheduledTime 预计工期
     *
     * @return $this
     */
    public function setScheduledTime($scheduledTime)
    {
        $this->container['scheduledTime'] = $scheduledTime;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return int
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param int $comments 评论数量
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return int
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param int $priority 优先级(0: 不指定 1: 不重要 2: 次要 3: 主要 4: 严重)
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets issueTypeDetail
     *
     * @return \Gitee\Model\IssueType
     */
    public function getIssueTypeDetail()
    {
        return $this->container['issueTypeDetail'];
    }

    /**
     * Sets issueTypeDetail
     *
     * @param \Gitee\Model\IssueType $issueTypeDetail 任务类型详情
     *
     * @return $this
     */
    public function setIssueTypeDetail($issueTypeDetail)
    {
        $this->container['issueTypeDetail'] = $issueTypeDetail;

        return $this;
    }

    /**
     * Gets program
     *
     * @return \Gitee\Model\ProgramBasic
     */
    public function getProgram()
    {
        return $this->container['program'];
    }

    /**
     * Sets program
     *
     * @param \Gitee\Model\ProgramBasic $program 关联的项目
     *
     * @return $this
     */
    public function setProgram($program)
    {
        $this->container['program'] = $program;

        return $this;
    }

    /**
     * Gets securityHole
     *
     * @return bool
     */
    public function getSecurityHole()
    {
        return $this->container['securityHole'];
    }

    /**
     * Sets securityHole
     *
     * @param bool $securityHole 是否为私有issue
     *
     * @return $this
     */
    public function setSecurityHole($securityHole)
    {
        $this->container['securityHole'] = $securityHole;

        return $this;
    }

    /**
     * Gets issueStateDetail
     *
     * @return \Gitee\Model\IssueState
     */
    public function getIssueStateDetail()
    {
        return $this->container['issueStateDetail'];
    }

    /**
     * Sets issueStateDetail
     *
     * @param \Gitee\Model\IssueState $issueStateDetail 任务类型详情
     *
     * @return $this
     */
    public function setIssueStateDetail($issueStateDetail)
    {
        $this->container['issueStateDetail'] = $issueStateDetail;

        return $this;
    }

    /**
     * Gets branch
     *
     * @return string
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param string $branch 关联分支
     *
     * @return $this
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


