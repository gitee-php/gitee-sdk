<?php
/**
 * Project
 *
 * PHP version 5
 *
 * @category Class
 * @package  Gitee
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 5.4.72
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Gitee\Model;

use \ArrayAccess;
use \Gitee\ObjectSerializer;

/**
 * Project Class Doc Comment
 *
 * @category Class
 * @description 搜索仓库
 * @package  Gitee
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Project implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Project';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'fullName' => 'string',
        'humanName' => 'string',
        'url' => 'string',
        'namespace' => '\Gitee\Model\NamespaceMini',
        'path' => 'string',
        'name' => 'string',
        'owner' => '\Gitee\Model\UserBasic',
        'assigner' => '\Gitee\Model\UserBasic',
        'description' => 'string',
        'private' => 'bool',
        'public' => 'bool',
        'internal' => 'string',
        'fork' => 'bool',
        'htmlUrl' => 'string',
        'sshUrl' => 'string',
        'forksUrl' => 'string',
        'keysUrl' => 'string',
        'collaboratorsUrl' => 'string',
        'hooksUrl' => 'string',
        'branchesUrl' => 'string',
        'tagsUrl' => 'string',
        'blobsUrl' => 'string',
        'stargazersUrl' => 'string',
        'contributorsUrl' => 'string',
        'commitsUrl' => 'string',
        'commentsUrl' => 'string',
        'issueCommentUrl' => 'string',
        'issuesUrl' => 'string',
        'pullsUrl' => 'string',
        'milestonesUrl' => 'string',
        'notificationsUrl' => 'string',
        'labelsUrl' => 'string',
        'releasesUrl' => 'string',
        'recommend' => 'bool',
        'gvp' => 'bool',
        'homepage' => 'string',
        'language' => 'string',
        'forksCount' => 'int',
        'stargazersCount' => 'int',
        'watchersCount' => 'int',
        'defaultBranch' => 'string',
        'openIssuesCount' => 'int',
        'hasIssues' => 'bool',
        'hasWiki' => 'bool',
        'issueComment' => 'bool',
        'canComment' => 'bool',
        'pullRequestsEnabled' => 'bool',
        'hasPage' => 'bool',
        'license' => 'string',
        'outsourced' => 'bool',
        'projectCreator' => 'string',
        'pushedAt' => '\DateTime',
        'createdAt' => 'string',
        'updatedAt' => 'string',
        'parent' => '\Gitee\Model\Project',
        'paas' => 'string',
        'stared' => 'bool',
        'watched' => 'bool',
        'relation' => 'string',
        'assigneesNumber' => 'int',
        'testersNumber' => 'int',
        'assignee' => '\Gitee\Model\UserBasic[]',
        'testers' => '\Gitee\Model\UserBasic[]',
        'status' => 'string',
        'programs' => '\Gitee\Model\ProgramBasic',
        'enterprise' => '\Gitee\Model\NamespaceMini',
        'projectLabels' => '\Gitee\Model\ProjectLabel',
        'issueTemplateSource' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'fullName' => null,
        'humanName' => null,
        'url' => null,
        'namespace' => null,
        'path' => null,
        'name' => null,
        'owner' => null,
        'assigner' => null,
        'description' => null,
        'private' => null,
        'public' => null,
        'internal' => null,
        'fork' => null,
        'htmlUrl' => null,
        'sshUrl' => null,
        'forksUrl' => null,
        'keysUrl' => null,
        'collaboratorsUrl' => null,
        'hooksUrl' => null,
        'branchesUrl' => null,
        'tagsUrl' => null,
        'blobsUrl' => null,
        'stargazersUrl' => null,
        'contributorsUrl' => null,
        'commitsUrl' => null,
        'commentsUrl' => null,
        'issueCommentUrl' => null,
        'issuesUrl' => null,
        'pullsUrl' => null,
        'milestonesUrl' => null,
        'notificationsUrl' => null,
        'labelsUrl' => null,
        'releasesUrl' => null,
        'recommend' => null,
        'gvp' => null,
        'homepage' => null,
        'language' => null,
        'forksCount' => 'int32',
        'stargazersCount' => 'int32',
        'watchersCount' => 'int32',
        'defaultBranch' => null,
        'openIssuesCount' => 'int32',
        'hasIssues' => null,
        'hasWiki' => null,
        'issueComment' => null,
        'canComment' => null,
        'pullRequestsEnabled' => null,
        'hasPage' => null,
        'license' => null,
        'outsourced' => null,
        'projectCreator' => null,
        'pushedAt' => 'date-time',
        'createdAt' => null,
        'updatedAt' => null,
        'parent' => null,
        'paas' => null,
        'stared' => null,
        'watched' => null,
        'relation' => null,
        'assigneesNumber' => 'int32',
        'testersNumber' => 'int32',
        'assignee' => null,
        'testers' => null,
        'status' => null,
        'programs' => null,
        'enterprise' => null,
        'projectLabels' => null,
        'issueTemplateSource' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'fullName' => 'full_name',
        'humanName' => 'human_name',
        'url' => 'url',
        'namespace' => 'namespace',
        'path' => 'path',
        'name' => 'name',
        'owner' => 'owner',
        'assigner' => 'assigner',
        'description' => 'description',
        'private' => 'private',
        'public' => 'public',
        'internal' => 'internal',
        'fork' => 'fork',
        'htmlUrl' => 'html_url',
        'sshUrl' => 'ssh_url',
        'forksUrl' => 'forks_url',
        'keysUrl' => 'keys_url',
        'collaboratorsUrl' => 'collaborators_url',
        'hooksUrl' => 'hooks_url',
        'branchesUrl' => 'branches_url',
        'tagsUrl' => 'tags_url',
        'blobsUrl' => 'blobs_url',
        'stargazersUrl' => 'stargazers_url',
        'contributorsUrl' => 'contributors_url',
        'commitsUrl' => 'commits_url',
        'commentsUrl' => 'comments_url',
        'issueCommentUrl' => 'issue_comment_url',
        'issuesUrl' => 'issues_url',
        'pullsUrl' => 'pulls_url',
        'milestonesUrl' => 'milestones_url',
        'notificationsUrl' => 'notifications_url',
        'labelsUrl' => 'labels_url',
        'releasesUrl' => 'releases_url',
        'recommend' => 'recommend',
        'gvp' => 'gvp',
        'homepage' => 'homepage',
        'language' => 'language',
        'forksCount' => 'forks_count',
        'stargazersCount' => 'stargazers_count',
        'watchersCount' => 'watchers_count',
        'defaultBranch' => 'default_branch',
        'openIssuesCount' => 'open_issues_count',
        'hasIssues' => 'has_issues',
        'hasWiki' => 'has_wiki',
        'issueComment' => 'issue_comment',
        'canComment' => 'can_comment',
        'pullRequestsEnabled' => 'pull_requests_enabled',
        'hasPage' => 'has_page',
        'license' => 'license',
        'outsourced' => 'outsourced',
        'projectCreator' => 'project_creator',
        'pushedAt' => 'pushed_at',
        'createdAt' => 'created_at',
        'updatedAt' => 'updated_at',
        'parent' => 'parent',
        'paas' => 'paas',
        'stared' => 'stared',
        'watched' => 'watched',
        'relation' => 'relation',
        'assigneesNumber' => 'assignees_number',
        'testersNumber' => 'testers_number',
        'assignee' => 'assignee',
        'testers' => 'testers',
        'status' => 'status',
        'programs' => 'programs',
        'enterprise' => 'enterprise',
        'projectLabels' => 'project_labels',
        'issueTemplateSource' => 'issue_template_source'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'fullName' => 'setFullName',
        'humanName' => 'setHumanName',
        'url' => 'setUrl',
        'namespace' => 'setNamespace',
        'path' => 'setPath',
        'name' => 'setName',
        'owner' => 'setOwner',
        'assigner' => 'setAssigner',
        'description' => 'setDescription',
        'private' => 'setPrivate',
        'public' => 'setPublic',
        'internal' => 'setInternal',
        'fork' => 'setFork',
        'htmlUrl' => 'setHtmlUrl',
        'sshUrl' => 'setSshUrl',
        'forksUrl' => 'setForksUrl',
        'keysUrl' => 'setKeysUrl',
        'collaboratorsUrl' => 'setCollaboratorsUrl',
        'hooksUrl' => 'setHooksUrl',
        'branchesUrl' => 'setBranchesUrl',
        'tagsUrl' => 'setTagsUrl',
        'blobsUrl' => 'setBlobsUrl',
        'stargazersUrl' => 'setStargazersUrl',
        'contributorsUrl' => 'setContributorsUrl',
        'commitsUrl' => 'setCommitsUrl',
        'commentsUrl' => 'setCommentsUrl',
        'issueCommentUrl' => 'setIssueCommentUrl',
        'issuesUrl' => 'setIssuesUrl',
        'pullsUrl' => 'setPullsUrl',
        'milestonesUrl' => 'setMilestonesUrl',
        'notificationsUrl' => 'setNotificationsUrl',
        'labelsUrl' => 'setLabelsUrl',
        'releasesUrl' => 'setReleasesUrl',
        'recommend' => 'setRecommend',
        'gvp' => 'setGvp',
        'homepage' => 'setHomepage',
        'language' => 'setLanguage',
        'forksCount' => 'setForksCount',
        'stargazersCount' => 'setStargazersCount',
        'watchersCount' => 'setWatchersCount',
        'defaultBranch' => 'setDefaultBranch',
        'openIssuesCount' => 'setOpenIssuesCount',
        'hasIssues' => 'setHasIssues',
        'hasWiki' => 'setHasWiki',
        'issueComment' => 'setIssueComment',
        'canComment' => 'setCanComment',
        'pullRequestsEnabled' => 'setPullRequestsEnabled',
        'hasPage' => 'setHasPage',
        'license' => 'setLicense',
        'outsourced' => 'setOutsourced',
        'projectCreator' => 'setProjectCreator',
        'pushedAt' => 'setPushedAt',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
        'parent' => 'setParent',
        'paas' => 'setPaas',
        'stared' => 'setStared',
        'watched' => 'setWatched',
        'relation' => 'setRelation',
        'assigneesNumber' => 'setAssigneesNumber',
        'testersNumber' => 'setTestersNumber',
        'assignee' => 'setAssignee',
        'testers' => 'setTesters',
        'status' => 'setStatus',
        'programs' => 'setPrograms',
        'enterprise' => 'setEnterprise',
        'projectLabels' => 'setProjectLabels',
        'issueTemplateSource' => 'setIssueTemplateSource'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'fullName' => 'getFullName',
        'humanName' => 'getHumanName',
        'url' => 'getUrl',
        'namespace' => 'getNamespace',
        'path' => 'getPath',
        'name' => 'getName',
        'owner' => 'getOwner',
        'assigner' => 'getAssigner',
        'description' => 'getDescription',
        'private' => 'getPrivate',
        'public' => 'getPublic',
        'internal' => 'getInternal',
        'fork' => 'getFork',
        'htmlUrl' => 'getHtmlUrl',
        'sshUrl' => 'getSshUrl',
        'forksUrl' => 'getForksUrl',
        'keysUrl' => 'getKeysUrl',
        'collaboratorsUrl' => 'getCollaboratorsUrl',
        'hooksUrl' => 'getHooksUrl',
        'branchesUrl' => 'getBranchesUrl',
        'tagsUrl' => 'getTagsUrl',
        'blobsUrl' => 'getBlobsUrl',
        'stargazersUrl' => 'getStargazersUrl',
        'contributorsUrl' => 'getContributorsUrl',
        'commitsUrl' => 'getCommitsUrl',
        'commentsUrl' => 'getCommentsUrl',
        'issueCommentUrl' => 'getIssueCommentUrl',
        'issuesUrl' => 'getIssuesUrl',
        'pullsUrl' => 'getPullsUrl',
        'milestonesUrl' => 'getMilestonesUrl',
        'notificationsUrl' => 'getNotificationsUrl',
        'labelsUrl' => 'getLabelsUrl',
        'releasesUrl' => 'getReleasesUrl',
        'recommend' => 'getRecommend',
        'gvp' => 'getGvp',
        'homepage' => 'getHomepage',
        'language' => 'getLanguage',
        'forksCount' => 'getForksCount',
        'stargazersCount' => 'getStargazersCount',
        'watchersCount' => 'getWatchersCount',
        'defaultBranch' => 'getDefaultBranch',
        'openIssuesCount' => 'getOpenIssuesCount',
        'hasIssues' => 'getHasIssues',
        'hasWiki' => 'getHasWiki',
        'issueComment' => 'getIssueComment',
        'canComment' => 'getCanComment',
        'pullRequestsEnabled' => 'getPullRequestsEnabled',
        'hasPage' => 'getHasPage',
        'license' => 'getLicense',
        'outsourced' => 'getOutsourced',
        'projectCreator' => 'getProjectCreator',
        'pushedAt' => 'getPushedAt',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
        'parent' => 'getParent',
        'paas' => 'getPaas',
        'stared' => 'getStared',
        'watched' => 'getWatched',
        'relation' => 'getRelation',
        'assigneesNumber' => 'getAssigneesNumber',
        'testersNumber' => 'getTestersNumber',
        'assignee' => 'getAssignee',
        'testers' => 'getTesters',
        'status' => 'getStatus',
        'programs' => 'getPrograms',
        'enterprise' => 'getEnterprise',
        'projectLabels' => 'getProjectLabels',
        'issueTemplateSource' => 'getIssueTemplateSource'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['fullName'] = isset($data['fullName']) ? $data['fullName'] : null;
        $this->container['humanName'] = isset($data['humanName']) ? $data['humanName'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['namespace'] = isset($data['namespace']) ? $data['namespace'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['assigner'] = isset($data['assigner']) ? $data['assigner'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['private'] = isset($data['private']) ? $data['private'] : null;
        $this->container['public'] = isset($data['public']) ? $data['public'] : null;
        $this->container['internal'] = isset($data['internal']) ? $data['internal'] : null;
        $this->container['fork'] = isset($data['fork']) ? $data['fork'] : null;
        $this->container['htmlUrl'] = isset($data['htmlUrl']) ? $data['htmlUrl'] : null;
        $this->container['sshUrl'] = isset($data['sshUrl']) ? $data['sshUrl'] : null;
        $this->container['forksUrl'] = isset($data['forksUrl']) ? $data['forksUrl'] : null;
        $this->container['keysUrl'] = isset($data['keysUrl']) ? $data['keysUrl'] : null;
        $this->container['collaboratorsUrl'] = isset($data['collaboratorsUrl']) ? $data['collaboratorsUrl'] : null;
        $this->container['hooksUrl'] = isset($data['hooksUrl']) ? $data['hooksUrl'] : null;
        $this->container['branchesUrl'] = isset($data['branchesUrl']) ? $data['branchesUrl'] : null;
        $this->container['tagsUrl'] = isset($data['tagsUrl']) ? $data['tagsUrl'] : null;
        $this->container['blobsUrl'] = isset($data['blobsUrl']) ? $data['blobsUrl'] : null;
        $this->container['stargazersUrl'] = isset($data['stargazersUrl']) ? $data['stargazersUrl'] : null;
        $this->container['contributorsUrl'] = isset($data['contributorsUrl']) ? $data['contributorsUrl'] : null;
        $this->container['commitsUrl'] = isset($data['commitsUrl']) ? $data['commitsUrl'] : null;
        $this->container['commentsUrl'] = isset($data['commentsUrl']) ? $data['commentsUrl'] : null;
        $this->container['issueCommentUrl'] = isset($data['issueCommentUrl']) ? $data['issueCommentUrl'] : null;
        $this->container['issuesUrl'] = isset($data['issuesUrl']) ? $data['issuesUrl'] : null;
        $this->container['pullsUrl'] = isset($data['pullsUrl']) ? $data['pullsUrl'] : null;
        $this->container['milestonesUrl'] = isset($data['milestonesUrl']) ? $data['milestonesUrl'] : null;
        $this->container['notificationsUrl'] = isset($data['notificationsUrl']) ? $data['notificationsUrl'] : null;
        $this->container['labelsUrl'] = isset($data['labelsUrl']) ? $data['labelsUrl'] : null;
        $this->container['releasesUrl'] = isset($data['releasesUrl']) ? $data['releasesUrl'] : null;
        $this->container['recommend'] = isset($data['recommend']) ? $data['recommend'] : null;
        $this->container['gvp'] = isset($data['gvp']) ? $data['gvp'] : null;
        $this->container['homepage'] = isset($data['homepage']) ? $data['homepage'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['forksCount'] = isset($data['forksCount']) ? $data['forksCount'] : null;
        $this->container['stargazersCount'] = isset($data['stargazersCount']) ? $data['stargazersCount'] : null;
        $this->container['watchersCount'] = isset($data['watchersCount']) ? $data['watchersCount'] : null;
        $this->container['defaultBranch'] = isset($data['defaultBranch']) ? $data['defaultBranch'] : null;
        $this->container['openIssuesCount'] = isset($data['openIssuesCount']) ? $data['openIssuesCount'] : null;
        $this->container['hasIssues'] = isset($data['hasIssues']) ? $data['hasIssues'] : null;
        $this->container['hasWiki'] = isset($data['hasWiki']) ? $data['hasWiki'] : null;
        $this->container['issueComment'] = isset($data['issueComment']) ? $data['issueComment'] : null;
        $this->container['canComment'] = isset($data['canComment']) ? $data['canComment'] : null;
        $this->container['pullRequestsEnabled'] = isset($data['pullRequestsEnabled']) ? $data['pullRequestsEnabled'] : null;
        $this->container['hasPage'] = isset($data['hasPage']) ? $data['hasPage'] : null;
        $this->container['license'] = isset($data['license']) ? $data['license'] : null;
        $this->container['outsourced'] = isset($data['outsourced']) ? $data['outsourced'] : null;
        $this->container['projectCreator'] = isset($data['projectCreator']) ? $data['projectCreator'] : null;
        $this->container['pushedAt'] = isset($data['pushedAt']) ? $data['pushedAt'] : null;
        $this->container['createdAt'] = isset($data['createdAt']) ? $data['createdAt'] : null;
        $this->container['updatedAt'] = isset($data['updatedAt']) ? $data['updatedAt'] : null;
        $this->container['parent'] = isset($data['parent']) ? $data['parent'] : null;
        $this->container['paas'] = isset($data['paas']) ? $data['paas'] : null;
        $this->container['stared'] = isset($data['stared']) ? $data['stared'] : null;
        $this->container['watched'] = isset($data['watched']) ? $data['watched'] : null;
        $this->container['relation'] = isset($data['relation']) ? $data['relation'] : null;
        $this->container['assigneesNumber'] = isset($data['assigneesNumber']) ? $data['assigneesNumber'] : null;
        $this->container['testersNumber'] = isset($data['testersNumber']) ? $data['testersNumber'] : null;
        $this->container['assignee'] = isset($data['assignee']) ? $data['assignee'] : null;
        $this->container['testers'] = isset($data['testers']) ? $data['testers'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['programs'] = isset($data['programs']) ? $data['programs'] : null;
        $this->container['enterprise'] = isset($data['enterprise']) ? $data['enterprise'] : null;
        $this->container['projectLabels'] = isset($data['projectLabels']) ? $data['projectLabels'] : null;
        $this->container['issueTemplateSource'] = isset($data['issueTemplateSource']) ? $data['issueTemplateSource'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets fullName
     *
     * @return string
     */
    public function getFullName()
    {
        return $this->container['fullName'];
    }

    /**
     * Sets fullName
     *
     * @param string $fullName fullName
     *
     * @return $this
     */
    public function setFullName($fullName)
    {
        $this->container['fullName'] = $fullName;

        return $this;
    }

    /**
     * Gets humanName
     *
     * @return string
     */
    public function getHumanName()
    {
        return $this->container['humanName'];
    }

    /**
     * Sets humanName
     *
     * @param string $humanName humanName
     *
     * @return $this
     */
    public function setHumanName($humanName)
    {
        $this->container['humanName'] = $humanName;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets namespace
     *
     * @return \Gitee\Model\NamespaceMini
     */
    public function getNamespace()
    {
        return $this->container['namespace'];
    }

    /**
     * Sets namespace
     *
     * @param \Gitee\Model\NamespaceMini $namespace namespace
     *
     * @return $this
     */
    public function setNamespace($namespace)
    {
        $this->container['namespace'] = $namespace;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path 仓库路径
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name 仓库名称
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \Gitee\Model\UserBasic
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \Gitee\Model\UserBasic $owner 仓库拥有者
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets assigner
     *
     * @return \Gitee\Model\UserBasic
     */
    public function getAssigner()
    {
        return $this->container['assigner'];
    }

    /**
     * Sets assigner
     *
     * @param \Gitee\Model\UserBasic $assigner 仓库负责人
     *
     * @return $this
     */
    public function setAssigner($assigner)
    {
        $this->container['assigner'] = $assigner;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description 仓库描述
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets private
     *
     * @return bool
     */
    public function getPrivate()
    {
        return $this->container['private'];
    }

    /**
     * Sets private
     *
     * @param bool $private 是否私有
     *
     * @return $this
     */
    public function setPrivate($private)
    {
        $this->container['private'] = $private;

        return $this;
    }

    /**
     * Gets public
     *
     * @return bool
     */
    public function getPublic()
    {
        return $this->container['public'];
    }

    /**
     * Sets public
     *
     * @param bool $public 是否公开
     *
     * @return $this
     */
    public function setPublic($public)
    {
        $this->container['public'] = $public;

        return $this;
    }

    /**
     * Gets internal
     *
     * @return string
     */
    public function getInternal()
    {
        return $this->container['internal'];
    }

    /**
     * Sets internal
     *
     * @param string $internal 是否内部开源
     *
     * @return $this
     */
    public function setInternal($internal)
    {
        $this->container['internal'] = $internal;

        return $this;
    }

    /**
     * Gets fork
     *
     * @return bool
     */
    public function getFork()
    {
        return $this->container['fork'];
    }

    /**
     * Sets fork
     *
     * @param bool $fork 是否是fork仓库
     *
     * @return $this
     */
    public function setFork($fork)
    {
        $this->container['fork'] = $fork;

        return $this;
    }

    /**
     * Gets htmlUrl
     *
     * @return string
     */
    public function getHtmlUrl()
    {
        return $this->container['htmlUrl'];
    }

    /**
     * Sets htmlUrl
     *
     * @param string $htmlUrl htmlUrl
     *
     * @return $this
     */
    public function setHtmlUrl($htmlUrl)
    {
        $this->container['htmlUrl'] = $htmlUrl;

        return $this;
    }

    /**
     * Gets sshUrl
     *
     * @return string
     */
    public function getSshUrl()
    {
        return $this->container['sshUrl'];
    }

    /**
     * Sets sshUrl
     *
     * @param string $sshUrl sshUrl
     *
     * @return $this
     */
    public function setSshUrl($sshUrl)
    {
        $this->container['sshUrl'] = $sshUrl;

        return $this;
    }

    /**
     * Gets forksUrl
     *
     * @return string
     */
    public function getForksUrl()
    {
        return $this->container['forksUrl'];
    }

    /**
     * Sets forksUrl
     *
     * @param string $forksUrl forksUrl
     *
     * @return $this
     */
    public function setForksUrl($forksUrl)
    {
        $this->container['forksUrl'] = $forksUrl;

        return $this;
    }

    /**
     * Gets keysUrl
     *
     * @return string
     */
    public function getKeysUrl()
    {
        return $this->container['keysUrl'];
    }

    /**
     * Sets keysUrl
     *
     * @param string $keysUrl keysUrl
     *
     * @return $this
     */
    public function setKeysUrl($keysUrl)
    {
        $this->container['keysUrl'] = $keysUrl;

        return $this;
    }

    /**
     * Gets collaboratorsUrl
     *
     * @return string
     */
    public function getCollaboratorsUrl()
    {
        return $this->container['collaboratorsUrl'];
    }

    /**
     * Sets collaboratorsUrl
     *
     * @param string $collaboratorsUrl collaboratorsUrl
     *
     * @return $this
     */
    public function setCollaboratorsUrl($collaboratorsUrl)
    {
        $this->container['collaboratorsUrl'] = $collaboratorsUrl;

        return $this;
    }

    /**
     * Gets hooksUrl
     *
     * @return string
     */
    public function getHooksUrl()
    {
        return $this->container['hooksUrl'];
    }

    /**
     * Sets hooksUrl
     *
     * @param string $hooksUrl hooksUrl
     *
     * @return $this
     */
    public function setHooksUrl($hooksUrl)
    {
        $this->container['hooksUrl'] = $hooksUrl;

        return $this;
    }

    /**
     * Gets branchesUrl
     *
     * @return string
     */
    public function getBranchesUrl()
    {
        return $this->container['branchesUrl'];
    }

    /**
     * Sets branchesUrl
     *
     * @param string $branchesUrl branchesUrl
     *
     * @return $this
     */
    public function setBranchesUrl($branchesUrl)
    {
        $this->container['branchesUrl'] = $branchesUrl;

        return $this;
    }

    /**
     * Gets tagsUrl
     *
     * @return string
     */
    public function getTagsUrl()
    {
        return $this->container['tagsUrl'];
    }

    /**
     * Sets tagsUrl
     *
     * @param string $tagsUrl tagsUrl
     *
     * @return $this
     */
    public function setTagsUrl($tagsUrl)
    {
        $this->container['tagsUrl'] = $tagsUrl;

        return $this;
    }

    /**
     * Gets blobsUrl
     *
     * @return string
     */
    public function getBlobsUrl()
    {
        return $this->container['blobsUrl'];
    }

    /**
     * Sets blobsUrl
     *
     * @param string $blobsUrl blobsUrl
     *
     * @return $this
     */
    public function setBlobsUrl($blobsUrl)
    {
        $this->container['blobsUrl'] = $blobsUrl;

        return $this;
    }

    /**
     * Gets stargazersUrl
     *
     * @return string
     */
    public function getStargazersUrl()
    {
        return $this->container['stargazersUrl'];
    }

    /**
     * Sets stargazersUrl
     *
     * @param string $stargazersUrl stargazersUrl
     *
     * @return $this
     */
    public function setStargazersUrl($stargazersUrl)
    {
        $this->container['stargazersUrl'] = $stargazersUrl;

        return $this;
    }

    /**
     * Gets contributorsUrl
     *
     * @return string
     */
    public function getContributorsUrl()
    {
        return $this->container['contributorsUrl'];
    }

    /**
     * Sets contributorsUrl
     *
     * @param string $contributorsUrl contributorsUrl
     *
     * @return $this
     */
    public function setContributorsUrl($contributorsUrl)
    {
        $this->container['contributorsUrl'] = $contributorsUrl;

        return $this;
    }

    /**
     * Gets commitsUrl
     *
     * @return string
     */
    public function getCommitsUrl()
    {
        return $this->container['commitsUrl'];
    }

    /**
     * Sets commitsUrl
     *
     * @param string $commitsUrl commitsUrl
     *
     * @return $this
     */
    public function setCommitsUrl($commitsUrl)
    {
        $this->container['commitsUrl'] = $commitsUrl;

        return $this;
    }

    /**
     * Gets commentsUrl
     *
     * @return string
     */
    public function getCommentsUrl()
    {
        return $this->container['commentsUrl'];
    }

    /**
     * Sets commentsUrl
     *
     * @param string $commentsUrl commentsUrl
     *
     * @return $this
     */
    public function setCommentsUrl($commentsUrl)
    {
        $this->container['commentsUrl'] = $commentsUrl;

        return $this;
    }

    /**
     * Gets issueCommentUrl
     *
     * @return string
     */
    public function getIssueCommentUrl()
    {
        return $this->container['issueCommentUrl'];
    }

    /**
     * Sets issueCommentUrl
     *
     * @param string $issueCommentUrl issueCommentUrl
     *
     * @return $this
     */
    public function setIssueCommentUrl($issueCommentUrl)
    {
        $this->container['issueCommentUrl'] = $issueCommentUrl;

        return $this;
    }

    /**
     * Gets issuesUrl
     *
     * @return string
     */
    public function getIssuesUrl()
    {
        return $this->container['issuesUrl'];
    }

    /**
     * Sets issuesUrl
     *
     * @param string $issuesUrl issuesUrl
     *
     * @return $this
     */
    public function setIssuesUrl($issuesUrl)
    {
        $this->container['issuesUrl'] = $issuesUrl;

        return $this;
    }

    /**
     * Gets pullsUrl
     *
     * @return string
     */
    public function getPullsUrl()
    {
        return $this->container['pullsUrl'];
    }

    /**
     * Sets pullsUrl
     *
     * @param string $pullsUrl pullsUrl
     *
     * @return $this
     */
    public function setPullsUrl($pullsUrl)
    {
        $this->container['pullsUrl'] = $pullsUrl;

        return $this;
    }

    /**
     * Gets milestonesUrl
     *
     * @return string
     */
    public function getMilestonesUrl()
    {
        return $this->container['milestonesUrl'];
    }

    /**
     * Sets milestonesUrl
     *
     * @param string $milestonesUrl milestonesUrl
     *
     * @return $this
     */
    public function setMilestonesUrl($milestonesUrl)
    {
        $this->container['milestonesUrl'] = $milestonesUrl;

        return $this;
    }

    /**
     * Gets notificationsUrl
     *
     * @return string
     */
    public function getNotificationsUrl()
    {
        return $this->container['notificationsUrl'];
    }

    /**
     * Sets notificationsUrl
     *
     * @param string $notificationsUrl notificationsUrl
     *
     * @return $this
     */
    public function setNotificationsUrl($notificationsUrl)
    {
        $this->container['notificationsUrl'] = $notificationsUrl;

        return $this;
    }

    /**
     * Gets labelsUrl
     *
     * @return string
     */
    public function getLabelsUrl()
    {
        return $this->container['labelsUrl'];
    }

    /**
     * Sets labelsUrl
     *
     * @param string $labelsUrl labelsUrl
     *
     * @return $this
     */
    public function setLabelsUrl($labelsUrl)
    {
        $this->container['labelsUrl'] = $labelsUrl;

        return $this;
    }

    /**
     * Gets releasesUrl
     *
     * @return string
     */
    public function getReleasesUrl()
    {
        return $this->container['releasesUrl'];
    }

    /**
     * Sets releasesUrl
     *
     * @param string $releasesUrl releasesUrl
     *
     * @return $this
     */
    public function setReleasesUrl($releasesUrl)
    {
        $this->container['releasesUrl'] = $releasesUrl;

        return $this;
    }

    /**
     * Gets recommend
     *
     * @return bool
     */
    public function getRecommend()
    {
        return $this->container['recommend'];
    }

    /**
     * Sets recommend
     *
     * @param bool $recommend 是否是推荐仓库
     *
     * @return $this
     */
    public function setRecommend($recommend)
    {
        $this->container['recommend'] = $recommend;

        return $this;
    }

    /**
     * Gets gvp
     *
     * @return bool
     */
    public function getGvp()
    {
        return $this->container['gvp'];
    }

    /**
     * Sets gvp
     *
     * @param bool $gvp 是否是 GVP 仓库
     *
     * @return $this
     */
    public function setGvp($gvp)
    {
        $this->container['gvp'] = $gvp;

        return $this;
    }

    /**
     * Gets homepage
     *
     * @return string
     */
    public function getHomepage()
    {
        return $this->container['homepage'];
    }

    /**
     * Sets homepage
     *
     * @param string $homepage 主页
     *
     * @return $this
     */
    public function setHomepage($homepage)
    {
        $this->container['homepage'] = $homepage;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language 语言
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets forksCount
     *
     * @return int
     */
    public function getForksCount()
    {
        return $this->container['forksCount'];
    }

    /**
     * Sets forksCount
     *
     * @param int $forksCount 仓库fork数量
     *
     * @return $this
     */
    public function setForksCount($forksCount)
    {
        $this->container['forksCount'] = $forksCount;

        return $this;
    }

    /**
     * Gets stargazersCount
     *
     * @return int
     */
    public function getStargazersCount()
    {
        return $this->container['stargazersCount'];
    }

    /**
     * Sets stargazersCount
     *
     * @param int $stargazersCount 仓库star数量
     *
     * @return $this
     */
    public function setStargazersCount($stargazersCount)
    {
        $this->container['stargazersCount'] = $stargazersCount;

        return $this;
    }

    /**
     * Gets watchersCount
     *
     * @return int
     */
    public function getWatchersCount()
    {
        return $this->container['watchersCount'];
    }

    /**
     * Sets watchersCount
     *
     * @param int $watchersCount 仓库watch数量
     *
     * @return $this
     */
    public function setWatchersCount($watchersCount)
    {
        $this->container['watchersCount'] = $watchersCount;

        return $this;
    }

    /**
     * Gets defaultBranch
     *
     * @return string
     */
    public function getDefaultBranch()
    {
        return $this->container['defaultBranch'];
    }

    /**
     * Sets defaultBranch
     *
     * @param string $defaultBranch 默认分支
     *
     * @return $this
     */
    public function setDefaultBranch($defaultBranch)
    {
        $this->container['defaultBranch'] = $defaultBranch;

        return $this;
    }

    /**
     * Gets openIssuesCount
     *
     * @return int
     */
    public function getOpenIssuesCount()
    {
        return $this->container['openIssuesCount'];
    }

    /**
     * Sets openIssuesCount
     *
     * @param int $openIssuesCount 开启的issue数量
     *
     * @return $this
     */
    public function setOpenIssuesCount($openIssuesCount)
    {
        $this->container['openIssuesCount'] = $openIssuesCount;

        return $this;
    }

    /**
     * Gets hasIssues
     *
     * @return bool
     */
    public function getHasIssues()
    {
        return $this->container['hasIssues'];
    }

    /**
     * Sets hasIssues
     *
     * @param bool $hasIssues 是否开启issue功能
     *
     * @return $this
     */
    public function setHasIssues($hasIssues)
    {
        $this->container['hasIssues'] = $hasIssues;

        return $this;
    }

    /**
     * Gets hasWiki
     *
     * @return bool
     */
    public function getHasWiki()
    {
        return $this->container['hasWiki'];
    }

    /**
     * Sets hasWiki
     *
     * @param bool $hasWiki 是否开启Wiki功能
     *
     * @return $this
     */
    public function setHasWiki($hasWiki)
    {
        $this->container['hasWiki'] = $hasWiki;

        return $this;
    }

    /**
     * Gets issueComment
     *
     * @return bool
     */
    public function getIssueComment()
    {
        return $this->container['issueComment'];
    }

    /**
     * Sets issueComment
     *
     * @param bool $issueComment 是否允许用户对“关闭”状态的 Issue 进行评论
     *
     * @return $this
     */
    public function setIssueComment($issueComment)
    {
        $this->container['issueComment'] = $issueComment;

        return $this;
    }

    /**
     * Gets canComment
     *
     * @return bool
     */
    public function getCanComment()
    {
        return $this->container['canComment'];
    }

    /**
     * Sets canComment
     *
     * @param bool $canComment 是否允许用户对仓库进行评论
     *
     * @return $this
     */
    public function setCanComment($canComment)
    {
        $this->container['canComment'] = $canComment;

        return $this;
    }

    /**
     * Gets pullRequestsEnabled
     *
     * @return bool
     */
    public function getPullRequestsEnabled()
    {
        return $this->container['pullRequestsEnabled'];
    }

    /**
     * Sets pullRequestsEnabled
     *
     * @param bool $pullRequestsEnabled 是否接受 Pull Request，协作开发
     *
     * @return $this
     */
    public function setPullRequestsEnabled($pullRequestsEnabled)
    {
        $this->container['pullRequestsEnabled'] = $pullRequestsEnabled;

        return $this;
    }

    /**
     * Gets hasPage
     *
     * @return bool
     */
    public function getHasPage()
    {
        return $this->container['hasPage'];
    }

    /**
     * Sets hasPage
     *
     * @param bool $hasPage 是否开启了 Pages
     *
     * @return $this
     */
    public function setHasPage($hasPage)
    {
        $this->container['hasPage'] = $hasPage;

        return $this;
    }

    /**
     * Gets license
     *
     * @return string
     */
    public function getLicense()
    {
        return $this->container['license'];
    }

    /**
     * Sets license
     *
     * @param string $license 开源许可
     *
     * @return $this
     */
    public function setLicense($license)
    {
        $this->container['license'] = $license;

        return $this;
    }

    /**
     * Gets outsourced
     *
     * @return bool
     */
    public function getOutsourced()
    {
        return $this->container['outsourced'];
    }

    /**
     * Sets outsourced
     *
     * @param bool $outsourced 仓库类型（内部/外包）
     *
     * @return $this
     */
    public function setOutsourced($outsourced)
    {
        $this->container['outsourced'] = $outsourced;

        return $this;
    }

    /**
     * Gets projectCreator
     *
     * @return string
     */
    public function getProjectCreator()
    {
        return $this->container['projectCreator'];
    }

    /**
     * Sets projectCreator
     *
     * @param string $projectCreator 仓库创建者的 username
     *
     * @return $this
     */
    public function setProjectCreator($projectCreator)
    {
        $this->container['projectCreator'] = $projectCreator;

        return $this;
    }

    /**
     * Gets pushedAt
     *
     * @return \DateTime
     */
    public function getPushedAt()
    {
        return $this->container['pushedAt'];
    }

    /**
     * Sets pushedAt
     *
     * @param \DateTime $pushedAt 最近一次代码推送时间
     *
     * @return $this
     */
    public function setPushedAt($pushedAt)
    {
        $this->container['pushedAt'] = $pushedAt;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param string $createdAt createdAt
     *
     * @return $this
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param string $updatedAt updatedAt
     *
     * @return $this
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets parent
     *
     * @return \Gitee\Model\Project
     */
    public function getParent()
    {
        return $this->container['parent'];
    }

    /**
     * Sets parent
     *
     * @param \Gitee\Model\Project $parent 源仓库
     *
     * @return $this
     */
    public function setParent($parent)
    {
        $this->container['parent'] = $parent;

        return $this;
    }

    /**
     * Gets paas
     *
     * @return string
     */
    public function getPaas()
    {
        return $this->container['paas'];
    }

    /**
     * Sets paas
     *
     * @param string $paas paas
     *
     * @return $this
     */
    public function setPaas($paas)
    {
        $this->container['paas'] = $paas;

        return $this;
    }

    /**
     * Gets stared
     *
     * @return bool
     */
    public function getStared()
    {
        return $this->container['stared'];
    }

    /**
     * Sets stared
     *
     * @param bool $stared 是否 star
     *
     * @return $this
     */
    public function setStared($stared)
    {
        $this->container['stared'] = $stared;

        return $this;
    }

    /**
     * Gets watched
     *
     * @return bool
     */
    public function getWatched()
    {
        return $this->container['watched'];
    }

    /**
     * Sets watched
     *
     * @param bool $watched 是否 watch
     *
     * @return $this
     */
    public function setWatched($watched)
    {
        $this->container['watched'] = $watched;

        return $this;
    }

    /**
     * Gets relation
     *
     * @return string
     */
    public function getRelation()
    {
        return $this->container['relation'];
    }

    /**
     * Sets relation
     *
     * @param string $relation 当前用户相对于仓库的角色
     *
     * @return $this
     */
    public function setRelation($relation)
    {
        $this->container['relation'] = $relation;

        return $this;
    }

    /**
     * Gets assigneesNumber
     *
     * @return int
     */
    public function getAssigneesNumber()
    {
        return $this->container['assigneesNumber'];
    }

    /**
     * Sets assigneesNumber
     *
     * @param int $assigneesNumber 代码审查设置，审查人数
     *
     * @return $this
     */
    public function setAssigneesNumber($assigneesNumber)
    {
        $this->container['assigneesNumber'] = $assigneesNumber;

        return $this;
    }

    /**
     * Gets testersNumber
     *
     * @return int
     */
    public function getTestersNumber()
    {
        return $this->container['testersNumber'];
    }

    /**
     * Sets testersNumber
     *
     * @param int $testersNumber 代码审查设置，测试人数
     *
     * @return $this
     */
    public function setTestersNumber($testersNumber)
    {
        $this->container['testersNumber'] = $testersNumber;

        return $this;
    }

    /**
     * Gets assignee
     *
     * @return \Gitee\Model\UserBasic[]
     */
    public function getAssignee()
    {
        return $this->container['assignee'];
    }

    /**
     * Sets assignee
     *
     * @param \Gitee\Model\UserBasic[] $assignee 代码审查设置，审查人员
     *
     * @return $this
     */
    public function setAssignee($assignee)
    {
        $this->container['assignee'] = $assignee;

        return $this;
    }

    /**
     * Gets testers
     *
     * @return \Gitee\Model\UserBasic[]
     */
    public function getTesters()
    {
        return $this->container['testers'];
    }

    /**
     * Sets testers
     *
     * @param \Gitee\Model\UserBasic[] $testers 代码审查设置，测试人员
     *
     * @return $this
     */
    public function setTesters($testers)
    {
        $this->container['testers'] = $testers;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status 仓库状态
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets programs
     *
     * @return \Gitee\Model\ProgramBasic
     */
    public function getPrograms()
    {
        return $this->container['programs'];
    }

    /**
     * Sets programs
     *
     * @param \Gitee\Model\ProgramBasic $programs 仓库所属的项目
     *
     * @return $this
     */
    public function setPrograms($programs)
    {
        $this->container['programs'] = $programs;

        return $this;
    }

    /**
     * Gets enterprise
     *
     * @return \Gitee\Model\NamespaceMini
     */
    public function getEnterprise()
    {
        return $this->container['enterprise'];
    }

    /**
     * Sets enterprise
     *
     * @param \Gitee\Model\NamespaceMini $enterprise 仓库所属的企业
     *
     * @return $this
     */
    public function setEnterprise($enterprise)
    {
        $this->container['enterprise'] = $enterprise;

        return $this;
    }

    /**
     * Gets projectLabels
     *
     * @return \Gitee\Model\ProjectLabel
     */
    public function getProjectLabels()
    {
        return $this->container['projectLabels'];
    }

    /**
     * Sets projectLabels
     *
     * @param \Gitee\Model\ProjectLabel $projectLabels projectLabels
     *
     * @return $this
     */
    public function setProjectLabels($projectLabels)
    {
        $this->container['projectLabels'] = $projectLabels;

        return $this;
    }

    /**
     * Gets issueTemplateSource
     *
     * @return string
     */
    public function getIssueTemplateSource()
    {
        return $this->container['issueTemplateSource'];
    }

    /**
     * Sets issueTemplateSource
     *
     * @param string $issueTemplateSource Issue 模版来源 project: 使用仓库 Issue Template 作为模版； enterprise: 使用企业工作项作为模版
     *
     * @return $this
     */
    public function setIssueTemplateSource($issueTemplateSource)
    {
        $this->container['issueTemplateSource'] = $issueTemplateSource;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


