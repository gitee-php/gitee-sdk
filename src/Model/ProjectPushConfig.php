<?php
/**
 * ProjectPushConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  Gitee
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * Gitee SDK for PHP
 *
 * OpenAPI spec version: 5.4.85
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.42
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Gitee\Model;

use \ArrayAccess;
use \Gitee\ObjectSerializer;

/**
 * ProjectPushConfig Class Doc Comment
 *
 * @category Class
 * @description 修改仓库推送规则设置
 * @package  Gitee
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProjectPushConfig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProjectPushConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'restrictPushOwnCommit' => 'bool',
        'restrictAuthorEmailSuffix' => 'bool',
        'authorEmailSuffix' => 'string',
        'restrictCommitMessage' => 'bool',
        'commitMessageRegex' => 'string',
        'restrictFileSize' => 'bool',
        'maxFileSize' => 'int',
        'exceptManager' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'restrictPushOwnCommit' => null,
        'restrictAuthorEmailSuffix' => null,
        'authorEmailSuffix' => null,
        'restrictCommitMessage' => null,
        'commitMessageRegex' => null,
        'restrictFileSize' => null,
        'maxFileSize' => 'int32',
        'exceptManager' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'restrictPushOwnCommit' => 'restrict_push_own_commit',
        'restrictAuthorEmailSuffix' => 'restrict_author_email_suffix',
        'authorEmailSuffix' => 'author_email_suffix',
        'restrictCommitMessage' => 'restrict_commit_message',
        'commitMessageRegex' => 'commit_message_regex',
        'restrictFileSize' => 'restrict_file_size',
        'maxFileSize' => 'max_file_size',
        'exceptManager' => 'except_manager'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'restrictPushOwnCommit' => 'setRestrictPushOwnCommit',
        'restrictAuthorEmailSuffix' => 'setRestrictAuthorEmailSuffix',
        'authorEmailSuffix' => 'setAuthorEmailSuffix',
        'restrictCommitMessage' => 'setRestrictCommitMessage',
        'commitMessageRegex' => 'setCommitMessageRegex',
        'restrictFileSize' => 'setRestrictFileSize',
        'maxFileSize' => 'setMaxFileSize',
        'exceptManager' => 'setExceptManager'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'restrictPushOwnCommit' => 'getRestrictPushOwnCommit',
        'restrictAuthorEmailSuffix' => 'getRestrictAuthorEmailSuffix',
        'authorEmailSuffix' => 'getAuthorEmailSuffix',
        'restrictCommitMessage' => 'getRestrictCommitMessage',
        'commitMessageRegex' => 'getCommitMessageRegex',
        'restrictFileSize' => 'getRestrictFileSize',
        'maxFileSize' => 'getMaxFileSize',
        'exceptManager' => 'getExceptManager'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['restrictPushOwnCommit'] = isset($data['restrictPushOwnCommit']) ? $data['restrictPushOwnCommit'] : null;
        $this->container['restrictAuthorEmailSuffix'] = isset($data['restrictAuthorEmailSuffix']) ? $data['restrictAuthorEmailSuffix'] : null;
        $this->container['authorEmailSuffix'] = isset($data['authorEmailSuffix']) ? $data['authorEmailSuffix'] : null;
        $this->container['restrictCommitMessage'] = isset($data['restrictCommitMessage']) ? $data['restrictCommitMessage'] : null;
        $this->container['commitMessageRegex'] = isset($data['commitMessageRegex']) ? $data['commitMessageRegex'] : null;
        $this->container['restrictFileSize'] = isset($data['restrictFileSize']) ? $data['restrictFileSize'] : null;
        $this->container['maxFileSize'] = isset($data['maxFileSize']) ? $data['maxFileSize'] : null;
        $this->container['exceptManager'] = isset($data['exceptManager']) ? $data['exceptManager'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets restrictPushOwnCommit
     *
     * @return bool
     */
    public function getRestrictPushOwnCommit()
    {
        return $this->container['restrictPushOwnCommit'];
    }

    /**
     * Sets restrictPushOwnCommit
     *
     * @param bool $restrictPushOwnCommit restrictPushOwnCommit
     *
     * @return $this
     */
    public function setRestrictPushOwnCommit($restrictPushOwnCommit)
    {
        $this->container['restrictPushOwnCommit'] = $restrictPushOwnCommit;

        return $this;
    }

    /**
     * Gets restrictAuthorEmailSuffix
     *
     * @return bool
     */
    public function getRestrictAuthorEmailSuffix()
    {
        return $this->container['restrictAuthorEmailSuffix'];
    }

    /**
     * Sets restrictAuthorEmailSuffix
     *
     * @param bool $restrictAuthorEmailSuffix restrictAuthorEmailSuffix
     *
     * @return $this
     */
    public function setRestrictAuthorEmailSuffix($restrictAuthorEmailSuffix)
    {
        $this->container['restrictAuthorEmailSuffix'] = $restrictAuthorEmailSuffix;

        return $this;
    }

    /**
     * Gets authorEmailSuffix
     *
     * @return string
     */
    public function getAuthorEmailSuffix()
    {
        return $this->container['authorEmailSuffix'];
    }

    /**
     * Sets authorEmailSuffix
     *
     * @param string $authorEmailSuffix authorEmailSuffix
     *
     * @return $this
     */
    public function setAuthorEmailSuffix($authorEmailSuffix)
    {
        $this->container['authorEmailSuffix'] = $authorEmailSuffix;

        return $this;
    }

    /**
     * Gets restrictCommitMessage
     *
     * @return bool
     */
    public function getRestrictCommitMessage()
    {
        return $this->container['restrictCommitMessage'];
    }

    /**
     * Sets restrictCommitMessage
     *
     * @param bool $restrictCommitMessage restrictCommitMessage
     *
     * @return $this
     */
    public function setRestrictCommitMessage($restrictCommitMessage)
    {
        $this->container['restrictCommitMessage'] = $restrictCommitMessage;

        return $this;
    }

    /**
     * Gets commitMessageRegex
     *
     * @return string
     */
    public function getCommitMessageRegex()
    {
        return $this->container['commitMessageRegex'];
    }

    /**
     * Sets commitMessageRegex
     *
     * @param string $commitMessageRegex commitMessageRegex
     *
     * @return $this
     */
    public function setCommitMessageRegex($commitMessageRegex)
    {
        $this->container['commitMessageRegex'] = $commitMessageRegex;

        return $this;
    }

    /**
     * Gets restrictFileSize
     *
     * @return bool
     */
    public function getRestrictFileSize()
    {
        return $this->container['restrictFileSize'];
    }

    /**
     * Sets restrictFileSize
     *
     * @param bool $restrictFileSize restrictFileSize
     *
     * @return $this
     */
    public function setRestrictFileSize($restrictFileSize)
    {
        $this->container['restrictFileSize'] = $restrictFileSize;

        return $this;
    }

    /**
     * Gets maxFileSize
     *
     * @return int
     */
    public function getMaxFileSize()
    {
        return $this->container['maxFileSize'];
    }

    /**
     * Sets maxFileSize
     *
     * @param int $maxFileSize maxFileSize
     *
     * @return $this
     */
    public function setMaxFileSize($maxFileSize)
    {
        $this->container['maxFileSize'] = $maxFileSize;

        return $this;
    }

    /**
     * Gets exceptManager
     *
     * @return bool
     */
    public function getExceptManager()
    {
        return $this->container['exceptManager'];
    }

    /**
     * Sets exceptManager
     *
     * @param bool $exceptManager exceptManager
     *
     * @return $this
     */
    public function setExceptManager($exceptManager)
    {
        $this->container['exceptManager'] = $exceptManager;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


