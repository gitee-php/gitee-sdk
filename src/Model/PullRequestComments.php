<?php
/**
 * PullRequestComments
 *
 * PHP version 5
 *
 * @category Class
 * @package  Gitee
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Gitee Open API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 5.4.72
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Gitee\Model;

use \ArrayAccess;
use \Gitee\ObjectSerializer;

/**
 * PullRequestComments Class Doc Comment
 *
 * @category Class
 * @description 编辑评论
 * @package  Gitee
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PullRequestComments implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PullRequestComments';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'id' => 'string',
        'path' => 'string',
        'position' => 'string',
        'originalPosition' => 'string',
        'newLine' => 'string',
        'commitId' => 'string',
        'originalCommitId' => 'string',
        'user' => 'string',
        'createdAt' => 'string',
        'updatedAt' => 'string',
        'body' => 'string',
        'htmlUrl' => 'string',
        'pullRequestUrl' => 'string',
        'links' => 'string',
        'commentType' => 'string',
        'inReplyToId' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
        'id' => null,
        'path' => null,
        'position' => null,
        'originalPosition' => null,
        'newLine' => null,
        'commitId' => null,
        'originalCommitId' => null,
        'user' => null,
        'createdAt' => null,
        'updatedAt' => null,
        'body' => null,
        'htmlUrl' => null,
        'pullRequestUrl' => null,
        'links' => null,
        'commentType' => null,
        'inReplyToId' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'id' => 'id',
        'path' => 'path',
        'position' => 'position',
        'originalPosition' => 'original_position',
        'newLine' => 'new_line',
        'commitId' => 'commit_id',
        'originalCommitId' => 'original_commit_id',
        'user' => 'user',
        'createdAt' => 'created_at',
        'updatedAt' => 'updated_at',
        'body' => 'body',
        'htmlUrl' => 'html_url',
        'pullRequestUrl' => 'pull_request_url',
        'links' => '_links',
        'commentType' => 'comment_type',
        'inReplyToId' => 'in_reply_to_id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'id' => 'setId',
        'path' => 'setPath',
        'position' => 'setPosition',
        'originalPosition' => 'setOriginalPosition',
        'newLine' => 'setNewLine',
        'commitId' => 'setCommitId',
        'originalCommitId' => 'setOriginalCommitId',
        'user' => 'setUser',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
        'body' => 'setBody',
        'htmlUrl' => 'setHtmlUrl',
        'pullRequestUrl' => 'setPullRequestUrl',
        'links' => 'setLinks',
        'commentType' => 'setCommentType',
        'inReplyToId' => 'setInReplyToId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'id' => 'getId',
        'path' => 'getPath',
        'position' => 'getPosition',
        'originalPosition' => 'getOriginalPosition',
        'newLine' => 'getNewLine',
        'commitId' => 'getCommitId',
        'originalCommitId' => 'getOriginalCommitId',
        'user' => 'getUser',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
        'body' => 'getBody',
        'htmlUrl' => 'getHtmlUrl',
        'pullRequestUrl' => 'getPullRequestUrl',
        'links' => 'getLinks',
        'commentType' => 'getCommentType',
        'inReplyToId' => 'getInReplyToId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['originalPosition'] = isset($data['originalPosition']) ? $data['originalPosition'] : null;
        $this->container['newLine'] = isset($data['newLine']) ? $data['newLine'] : null;
        $this->container['commitId'] = isset($data['commitId']) ? $data['commitId'] : null;
        $this->container['originalCommitId'] = isset($data['originalCommitId']) ? $data['originalCommitId'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['createdAt'] = isset($data['createdAt']) ? $data['createdAt'] : null;
        $this->container['updatedAt'] = isset($data['updatedAt']) ? $data['updatedAt'] : null;
        $this->container['body'] = isset($data['body']) ? $data['body'] : null;
        $this->container['htmlUrl'] = isset($data['htmlUrl']) ? $data['htmlUrl'] : null;
        $this->container['pullRequestUrl'] = isset($data['pullRequestUrl']) ? $data['pullRequestUrl'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['commentType'] = isset($data['commentType']) ? $data['commentType'] : null;
        $this->container['inReplyToId'] = isset($data['inReplyToId']) ? $data['inReplyToId'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path path
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets position
     *
     * @return string
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param string $position position
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets originalPosition
     *
     * @return string
     */
    public function getOriginalPosition()
    {
        return $this->container['originalPosition'];
    }

    /**
     * Sets originalPosition
     *
     * @param string $originalPosition originalPosition
     *
     * @return $this
     */
    public function setOriginalPosition($originalPosition)
    {
        $this->container['originalPosition'] = $originalPosition;

        return $this;
    }

    /**
     * Gets newLine
     *
     * @return string
     */
    public function getNewLine()
    {
        return $this->container['newLine'];
    }

    /**
     * Sets newLine
     *
     * @param string $newLine newLine
     *
     * @return $this
     */
    public function setNewLine($newLine)
    {
        $this->container['newLine'] = $newLine;

        return $this;
    }

    /**
     * Gets commitId
     *
     * @return string
     */
    public function getCommitId()
    {
        return $this->container['commitId'];
    }

    /**
     * Sets commitId
     *
     * @param string $commitId commitId
     *
     * @return $this
     */
    public function setCommitId($commitId)
    {
        $this->container['commitId'] = $commitId;

        return $this;
    }

    /**
     * Gets originalCommitId
     *
     * @return string
     */
    public function getOriginalCommitId()
    {
        return $this->container['originalCommitId'];
    }

    /**
     * Sets originalCommitId
     *
     * @param string $originalCommitId originalCommitId
     *
     * @return $this
     */
    public function setOriginalCommitId($originalCommitId)
    {
        $this->container['originalCommitId'] = $originalCommitId;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string $user user
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param string $createdAt createdAt
     *
     * @return $this
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param string $updatedAt updatedAt
     *
     * @return $this
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string $body body
     *
     * @return $this
     */
    public function setBody($body)
    {
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets htmlUrl
     *
     * @return string
     */
    public function getHtmlUrl()
    {
        return $this->container['htmlUrl'];
    }

    /**
     * Sets htmlUrl
     *
     * @param string $htmlUrl htmlUrl
     *
     * @return $this
     */
    public function setHtmlUrl($htmlUrl)
    {
        $this->container['htmlUrl'] = $htmlUrl;

        return $this;
    }

    /**
     * Gets pullRequestUrl
     *
     * @return string
     */
    public function getPullRequestUrl()
    {
        return $this->container['pullRequestUrl'];
    }

    /**
     * Sets pullRequestUrl
     *
     * @param string $pullRequestUrl pullRequestUrl
     *
     * @return $this
     */
    public function setPullRequestUrl($pullRequestUrl)
    {
        $this->container['pullRequestUrl'] = $pullRequestUrl;

        return $this;
    }

    /**
     * Gets links
     *
     * @return string
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param string $links links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets commentType
     *
     * @return string
     */
    public function getCommentType()
    {
        return $this->container['commentType'];
    }

    /**
     * Sets commentType
     *
     * @param string $commentType commentType
     *
     * @return $this
     */
    public function setCommentType($commentType)
    {
        $this->container['commentType'] = $commentType;

        return $this;
    }

    /**
     * Gets inReplyToId
     *
     * @return string
     */
    public function getInReplyToId()
    {
        return $this->container['inReplyToId'];
    }

    /**
     * Sets inReplyToId
     *
     * @param string $inReplyToId inReplyToId
     *
     * @return $this
     */
    public function setInReplyToId($inReplyToId)
    {
        $this->container['inReplyToId'] = $inReplyToId;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


